<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sprockets | Robert Mosolgo]]></title>
  <link href="http://rmosolgo.github.io/blog/categories/sprockets/atom.xml" rel="self"/>
  <link href="http://rmosolgo.github.io/"/>
  <updated>2016-08-08T13:41:23-04:00</updated>
  <id>http://rmosolgo.github.io/</id>
  <author>
    <name><![CDATA[Robert Mosolgo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Finding a Browser-Ready File for Sprockets]]></title>
    <link href="http://rmosolgo.github.io/blog/2016/05/19/finding-a-browser-ready-file-for-sprockets/"/>
    <updated>2016-05-19T22:00:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2016/05/19/finding-a-browser-ready-file-for-sprockets</id>
    <content type="html"><![CDATA[<p>I like using Sprockets, but sometimes it&rsquo;s hard to find a file to include in the asset pipeline. Here are some methods I use to find browser-ready JavaScript files.</p>

<!-- more -->


<p>There are a few good options for getting browser-ready files for JavaScript libraries:</p>

<ul>
<li>Download a file from the project&rsquo;s website</li>
<li>Download a file from the project&rsquo;s source code repository</li>
<li>Download a file from a CDN (npmcdn is great for cases where files are only &ldquo;compiled&rdquo; for releases)</li>
<li>Build the file yourself, following the project&rsquo;s documentation</li>
</ul>


<p><strong>Don&rsquo;t</strong> get a minified version. Sprockets will minify it for us later. In the meantime, the unminified version will help us during development.</p>

<h3>From a Website</h3>

<p>This is the good ol' way of getting JavaScript files. Because we still use browsers, you can still download these files.</p>

<p>Here are some examples:</p>

<p><img src="/images/sprockets/website_download_d3.png" width="300"></p>

<p><img src="/images/sprockets/website_download_react.png" width="500"></p>

<p><img src="/images/sprockets/website_download_moment.png" width="300"></p>

<h3>From the Repo</h3>

<p>Many projects maintain a browser build in the project&rsquo;s source. You may have to poke around a bit, but likely places are the project&rsquo;s root folder, the <code>dist/</code> folder, or the <code>build/</code> folder.</p>

<p>As you explore the repo, remember to examine a stable ref, such as a release or a stable branch.</p>

<p>Here are some examples:</p>

<p><img src="/images/sprockets/repo_download_c3.png" width="300"></p>

<p><img src="/images/sprockets/repo_download_immutable.png" width="300"></p>

<p><img src="/images/sprockets/repo_download_three.png" width="300"></p>

<h3>From a CDN</h3>

<p><a href="https://cdnjs.com/libraries">CDNJS</a> hosts browser-ready files for many libraries.</p>

<p>Sometimes, an author only compiles browser-ready files for releases to NPM. You can get these files from <a href="https://npmcdn.com/">npmcdn</a>.</p>

<p>Since npmcdn is serving NodeJS projects, employ a similar technique to searching the project repo for a file:</p>

<ul>
<li>Check the &ldquo;main&rdquo; file</li>
<li>Check the &ldquo;dist&rdquo; or &ldquo;build&rdquo; directories</li>
</ul>


<h3>Build it from Source</h3>

<p>If a pre-built, browser-ready file is not available, you may have to build it yourself! The project&rsquo;s readme will contain instructions to do so. If it doesn&rsquo;t &hellip; you may want to reconsider adding this dependency! (Even if it&rsquo;s well-maintained, it&rsquo;s not a good match for this asset bundling approach.)</p>

<h2>Summary</h2>

<p>Hopefully these will work well for you!</p>

<p>You may have to learn a bit of RequireJS, jspm, Grunt, Browserify, Gulp, Webpack or Rollup along the way. (Ok, probably not Rollup, sadly.) But at least you don&rsquo;t have to use them day-in and day-out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Use Sprockets]]></title>
    <link href="http://rmosolgo.github.io/blog/2016/05/19/how-i-use-sprockets/"/>
    <updated>2016-05-19T08:44:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2016/05/19/how-i-use-sprockets</id>
    <content type="html"><![CDATA[<p>When reviewing issues for <code>react-rails</code>, I see many questions about how to gather JavaScript dependencies with Sprockets. Here is how I use Sprockets to manage JavaScript dependencies.</p>

<!-- more -->


<p>I&rsquo;m looking for a few things in a JavaScript bundler:</p>

<ul>
<li>Stability: I don&rsquo;t want any changes to my dependencies unless I explicitly make them.</li>
<li>Clarity: I want to be able to quickly tell what dependencies I have (library and version).</li>
<li>Insulation: I don&rsquo;t want to rely on external services during development, deployment or runtime (except for downloading <em>new</em> dependencies, of course)</li>
<li>Feature-completeness: I want to concatenate and minify my assets and serve them with cache headers</li>
</ul>


<h2>Using Sprockets</h2>

<p>To <strong>add a new dependency</strong>:</p>

<ol>
<li>Find a non-minified, browser-ready version of your dependency</li>
<li>Add it to <code>app/assets/javascripts/vendor/{library-name}-v{version-number}.js</code> (for example, <code>app/assets/javascripts/moment-v2.13.0.js</code>)</li>
<li>Require it in <code>application.js</code> with <code>//= require ./vendor/moment-v2.13.0</code></li>
<li>Access the global variable as needed in your app (eg <code>moment</code>)</li>
</ol>


<p>To <strong>update</strong> a dependency:</p>

<ol>
<li>Find a non-minified, browser-ready version of the updated dependency</li>
<li>Add it to <code>app/assets/javascripts/vendor/{library-name}-v{version-number}.js</code> and remove the <em>old</em> version from that directory</li>
<li>Update the <code>//= require</code> directive with the new version number</li>
<li>Check the dependency&rsquo;s changelog and update your app as needed. (Search your project for the global variable to find usages, eg <code>moment</code>.)</li>
</ol>


<p>To <strong>remove</strong> a dependency:</p>

<ol>
<li>Remove its file (<code>app/assets/javascripts/vendor/{library-name}-v{version-number}.js</code>)</li>
<li>Remove the <code>//= require</code> directive</li>
<li>Search your project for the global variable and remove all usages</li>
</ol>


<h2>Finding a browser-ready file</h2>

<p>This got its own page: <a href="/blog/2016/05/19/finding-a-browser-ready-file-for-sprockets/">Finding a browser-ready file</a>.</p>

<h2>Adding the file to <code>vendor/</code></h2>

<p>Use an <strong>unminified</strong> version of the library. It will help in debugging development and viewing diffs when you update the dependency. Have no fear, Sprockets will minify it for you for production.</p>

<p>Include the <strong>version number</strong> in the file name. This will give you more confidence in updating the library, since you&rsquo;ll know what version you&rsquo;re coming from.</p>

<h2>Integrating with Sprockets</h2>

<p>The <code>//= require ./vendor/{library}-v{version}</code> directive is your friend. Like an entry in <code>package.json</code>, it tells the reader what dependency you have.</p>

<p>Now, your library will be accessible by its global name, such as <code>React</code>, <code>d3</code> or <code>Immutable</code>.</p>

<p>Consuming a library via global variable is not ideal. But it <em>does</em> help you remember that, at the end of the day, the browser is one giant, mutable namespace, so you must be a good citizen! At least global variables can be grepped like any other dependency.</p>

<p>Consider isolating your dependency. For example, you could wrap <code>Pusher</code> in an application-specific event emitter. This way, when you update Pusher, you only have to check one file for its usages. (Some libraries are poor candidates for isolation. My app will never be isolated from React!)</p>

<h2>Caveats</h2>

<p>There are some things Sprockets doesn&rsquo;t provide for me, which I wish it did:</p>

<ul>
<li>Named imports: I wish there was a good alternative to global namespacing with Sprockets, but not yet. (It&rsquo;s not a deal breaker &mdash; it doesn&rsquo;t hurt to be familiar with this constraint because it&rsquo;s the reality of the browser, anyways.)</li>
<li>Tree shaking: It wish I could only transmit the parts of Underscore.js I actually used!</li>
</ul>


<p>Perhaps I should read up on Sprockets and submit a patch ðŸ˜Ž</p>

<p>Also, there&rsquo;s one case where copy-pasting isn&rsquo;t a great solution. Some libraries (like React.js) have <em>separate</em> &ldquo;development&rdquo; and &ldquo;production&rdquo; builds. The production build has fewer runtime checks than the development build, making it smaller and faster. There are a few solutions to this problem:</p>

<ul>
<li>Use a gem which provides the proper file for each environment (like <code>react-rails</code>)</li>
<li>Add environment-specific folders to the asset pipeline (like <code>react-rails</code> does, I can write more on this if need be)</li>
<li>Use the development build in productiosn (weigh the costs first: what&rsquo;s the difference in behavior, performance and file size?)</li>
</ul>

]]></content>
  </entry>
  
</feed>
