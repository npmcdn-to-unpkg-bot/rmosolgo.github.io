<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GraphQL | Robert Mosolgo]]></title>
  <link href="http://rmosolgo.github.io/blog/categories/graphql/atom.xml" rel="self"/>
  <link href="http://rmosolgo.github.io/"/>
  <updated>2016-08-08T13:41:23-04:00</updated>
  <id>http://rmosolgo.github.io/</id>
  <author>
    <name><![CDATA[Robert Mosolgo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using GraphQL without Relay]]></title>
    <link href="http://rmosolgo.github.io/blog/2016/03/03/using-graphql-without-relay/"/>
    <updated>2016-03-03T10:01:00-05:00</updated>
    <id>http://rmosolgo.github.io/blog/2016/03/03/using-graphql-without-relay</id>
    <content type="html"><![CDATA[<p>Although <a href="http://facebook.github.io/relay/">Relay</a> made <a href="facebook.github.io/graphql">GraphQL</a> famous, GraphQL was in use at Facebook for years before Relay took the scene. You can use plain AJAX requests to interact with a GraphQL server, too.</p>

<!-- more -->


<p>GraphQL servers like <a href="https://github.com/graphql/express-graphql"><code>express-graphql</code></a> or <a href="https://github.com/rmosolgo/graphql-ruby-demo"><code>graphql-ruby</code> on Rails</a> expose a single endpoint which responds to queries.</p>

<p>The endpoint accepts a few parameters:</p>

<ul>
<li><code>query</code>: The GraphQL query string to execute</li>
<li><code>variables</code>: Runtime values for variables in the GraphQL query</li>
<li><code>operationName</code>: if <code>query</code> contains multiple operations, you must tell the server which <em>one</em> to execute</li>
</ul>


<p>Given this interface, you can even use jQuery as a GraphQL client! Here&rsquo;s how you would use <code>$.post</code> to interact with the server.</p>

<h2>1. Build and send query strings</h2>

<p>In your JavaScript, you could dynamically build a GraphQL query, then post it to the server.</p>

<p>For example, if you were searching users by name, you might use this function to build a query string:</p>

<p>```javascript
function usersByNameQuery(searchTerm) {
  // GraphQL requires double-quoted strings in the query:
  return &lsquo;{ users(search: &ldquo;&rsquo; + searchTerm + &lsquo;&rdquo;) { name, id }  }&rsquo;
}</p>

<p>usersByNameQuery(&ldquo;bob&rdquo;)
// &ldquo;{ users(search: "bob&rdquo;) { name, id }  }&ldquo;
```</p>

<p>Then, you can post the query with <code>$.post</code>:</p>

<p>```javascript
var query = usersByNameQuery(&ldquo;bob&rdquo;)
$.post(&ldquo;/graphql&rdquo;, {query: query}, function(response) {
  if (response.errors) {</p>

<pre><code>// handle errors
</code></pre>

<p>  } else {</p>

<pre><code>// use response.data
</code></pre>

<p>  }
})
```</p>

<p>In the callback, you can check for errors and use the response&rsquo;s <code>data</code>.</p>

<h2>2. Send query <em>and</em> variables</h2>

<p>Often, we know our data requirements ahead of time. That is, we know what values we need to render our UI. In this case, we can <em>separate</em> the query structure and runtime values into <code>query</code> and <code>variables</code>.</p>

<p>Here&rsquo;s how we could adapt our previous example to separate the query from its values:</p>

<p><code>``javascript
// ES6 backtick-quoted string
var searchByNameQuery =</code>
query searchByName($searchTerm: String!) {
  users(search: $searchTerm) {</p>

<pre><code>name
id
</code></pre>

<p>  }
}`</p>

<p>function fetchUsersByName(searchTerm) {
  var payload = {</p>

<pre><code>query: searchByNameQuery,
variables: {
  // This will be used as `$searchTerm` by the server:
  searchTerm: searchTerm,
}
</code></pre>

<p>  }</p>

<p>  $.post(&ldquo;/graphql&rdquo;, payload, function(response) {</p>

<pre><code>if (response.errors) {
  // handle errors ...
} else {
  // use response.data
}
</code></pre>

<p>  })
}
```</p>

<p>In this case, we always send the <em>same</em> query string, but we change the <code>variables</code> for each request.</p>

<p>This setup is easier to maintain because the query string is so easy to read. Any changes to it will be easy to see in a pull request.</p>

<h1>3. (future) Store query strings on the server</h1>

<p>Maybe you noticed an optimization waiting to happen: since we always send the same query string, why send it at all? We could store it on the server ahead of time, then call it by name at runtime.</p>

<p>I heard that Facebook&rsquo;s GraphQL server had this behavior, but I don&rsquo;t know that any of the open implementations have it yet. I&rsquo;m <a href="https://github.com/rmosolgo/graphql-ruby/pull/76">considering it for <code>graphql-ruby</code></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authorization in GraphQL]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/08/04/authorization-in-graphql/"/>
    <updated>2015-08-04T10:19:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/08/04/authorization-in-graphql</id>
    <content type="html"><![CDATA[<p>A <a href="http://facebook.github.io/graphql/">GraphQL</a> system works differently from a &ldquo;traditional&rdquo; RESTful JSON API. Instead of authenticating during controller actions, you can authenticate users with &ldquo;query context.&rdquo;</p>

<!-- more -->


<h2>Query Context</h2>

<p>GraphQL execution systems should allow the consumer to pass some arbitrary data &ldquo;through&rdquo; the query, so it is accessible at any time during execution. For example, you could take some information from an HTTP request, pass it into the query, then use that information during field resolution.</p>

<p>You can see this idea at work in <a href="https://github.com/graphql/graphql-js/tree/v0.2.4">graphql-js 0.2.4</a>:</p>

<ul>
<li>An arbitrary value enters the <code>execute</code> function <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L108">as <code>rootValue</code></a> and is <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L119">built into <code>context</code></a></li>
<li>Execution context is <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L203-L206">passed to <code>executeFields</code></a></li>
<li><code>rootValue</code> is <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L489">drawn back out and passed</a> to fields' resolve functions, where it is the <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L663">third argument</a></li>
</ul>


<p>This way, any value that you pass to <code>execute</code> is passed along to any field resolution.</p>

<p><a href="https://github.com/rmosolgo/graphql-ruby">graphql-ruby</a> also implements this idea:</p>

<ul>
<li><code>Query#new</code> accepts <a href="https://github.com/rmosolgo/graphql-ruby/blob/adcf3c8ee83ba06232d71df1a2360bc985caf4d3/lib/graph_ql/query.rb#L15">a <code>context:</code> keyword</a></li>
<li>That value is <a href="https://github.com/rmosolgo/graphql-ruby/blob/adcf3c8ee83ba06232d71df1a2360bc985caf4d3/lib/graph_ql/query.rb#L74">accessible through <code>Query::Context</code></a>,
which is <a href="https://github.com/rmosolgo/graphql-ruby/blob/adcf3c8ee83ba06232d71df1a2360bc985caf4d3/lib/graph_ql/field.rb#L54">passed to field resolution methods</a></li>
</ul>


<h2>Using Query Context for Authorization</h2>

<p>To implement authorization in GraphQL, you could use query context.
There are roughly two approaches:</p>

<h4>Pass a permission indicator into the query.</h4>

<p>Before executing the query, determine the permission level of the current user, then pass that into the query as context. That way, each field can test the permission level to determine how to resolve.</p>

<p>For example, in Ruby:</p>

<p>```ruby</p>

<h1>pass the permission level in the context hash</h1>

<p>permission = current_user.permission
query = GraphQL::Query.new(MySchema, query_string, context: {permission: permission})
query.result
```</p>

<p>Inside a field, you could access <code>context[:permission]</code>, for example:</p>

<p>```ruby
GraphQL::Field.new do |f|
  # &hellip;
  f.resolve &ndash;> (obj, args, context) do</p>

<pre><code># Check the permission level which was passed as context
if context[:permission] == "admin"
  object.secret_info
else
  nil
end
</code></pre>

<p>  end
end
```</p>

<p>This allows you to access permission information without abusing the global scope.</p>

<h4>Pass the user object into the query.</h4>

<p>If your authentication scheme is more complex, you can pass the user object in to the query context.</p>

<p>For example, in Ruby:</p>

<p>```ruby</p>

<h1>Pass <code>current_user</code> in the context hash</h1>

<p>query = GraphQL::Query.new(MySchema, query_string, context: {user: current_user})
query.result
```</p>

<p>That way, fields can access the user object at resolve-time:</p>

<p>```ruby
GraphQL::Field.new do |f|
  # &hellip;
  f.resolve &ndash;> (object, args, context) {</p>

<pre><code># Check the user which was passed as context
if context[:user].can?(:read, object)
  objects.secret_info
else
  nil
end
</code></pre>

<p>  }
end
```</p>

<p>If you pass the user object into query context, you can use fine-grained authentication when resolving fields.</p>
]]></content>
  </entry>
  
</feed>
