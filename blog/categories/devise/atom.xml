<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Devise | Robert Mosolgo]]></title>
  <link href="http://rmosolgo.github.io/blog/categories/devise/atom.xml" rel="self"/>
  <link href="http://rmosolgo.github.io/"/>
  <updated>2015-04-27T08:40:45-07:00</updated>
  <id>http://rmosolgo.github.io/</id>
  <author>
    <name><![CDATA[Robert Mosolgo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Batman.js and Devise]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/07/21/batman-dot-js-and-devise/"/>
    <updated>2014-07-21T09:08:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/07/21/batman-dot-js-and-devise</id>
    <content type="html"><![CDATA[<p>Using <a href="http://batmanjs.org">batman.js</a> with <a href="https://github.com/plataformatec/devise">Devise</a> is pretty straightforward.</p>

<!-- more -->


<p>It&rsquo;s also pretty cool-looking, because when you define <code>App.User.current</code>, all your view bindings are instantly updated to reflect the user&rsquo;s signed-in status!</p>

<p>You just have to consider three things:</p>

<ul>
<li>Make Devise communicate in JSON</li>
<li>Make batman.js send Devise-friendly requests</li>
<li>Keep your CSRF token up-to-date</li>
</ul>


<h2>Make Devise Communicate in JSON</h2>

<p>To make your Devise controllers accept and send JSON, register <code>:json</code> as a valid format. Do this by adding to <code>app/config/application.rb</code>:</p>

<p>```ruby</p>

<pre><code>config.to_prepare do
  DeviseController.respond_to :html, :json
end
</code></pre>

<p>```</p>

<p>(From a <a href="https://github.com/plataformatec/devise/issues/2209#issuecomment-12150223">comment on plataformatec/devise</a>)</p>

<p>Now, all the provided Devise controllers will accept the JSON format.</p>

<h2>Make Batman.js Send Devise-friendly Requests</h2>

<p>At time of writing (v0.16), the batman.js rails extra <em>only</em> sends the CSRF token with <code>Batman.RailsStorage</code> storage operations. So, all your requests will be &ldquo;disguised&rdquo; as storage operations.</p>

<p>(These samples include code for updating the CSRF token which is described in detail below)</p>

<h3>Signing In / Signing Up</h3>

<p>I made one form with two states: &ldquo;signing in&rdquo; or &ldquo;signing up&rdquo;. I initialized a User to bind to the form:</p>

<p>```coffeescript
class Funzies.SessionsController extends Funzies.ApplicationController
  new: &ndash;></p>

<pre><code>@set 'user', new Funzies.User
@dialog()
</code></pre>

<p>```</p>

<p>In the form, <code>actionName</code> was either &ldquo;Sign In&rdquo; or &ldquo;Create an Account&rdquo;:</p>

<p>```jade
.row
  .col-xs-12</p>

<pre><code>form data-event-submit='signIn'
  div.alert.alert-danger data-showif='user.errors.length'
    ul
      li data-foreach-e='user.errors' data-bind='e.fullMessage'
  .form-group
    label Email
    input.form-control type='text' data-bind='user.email'
  .form-group
    label Password
    input.form-control type='password' data-bind='user.password'
  .form-group data-showif='signingUp'
    label Password Confirmation
    input.form-control type='password' data-bind='user.password_confirmation'
  .form-group
    .row
      .col-sm-4
        input.btn.btn-primary type='submit' data-bind-value='actionName | append "!"'
      .col-sm-8
        a.pull-right data-event-click='signingUp | toggle' data-bind='otherActionName'
</code></pre>

<p>```</p>

<p><em>(the <code>toggle</code> filter will be released in Batman.js 0.17)</em></p>

<p>It turned out looking like this:</p>

<p>{% img /images/sign_in_form.png 500 %} {% img /images/sign_up_form.png 500 %}</p>

<p>Here&rsquo;s the handler for submitting that form. Notice that it handles <em>creating an account</em> and <em>signing up</em>. This might have been stupid of me.</p>

<p>Notice the bit about initializing a new User &mdash; it&rsquo;s because the <code>401</code> puts the user in &ldquo;error&rdquo; state (even with <code>@catchError</code>), which can&rsquo;t be cleared. This stinks and should be fixed in batman.js.</p>

<p>```coffeescript
  signIn: &ndash;></p>

<pre><code>url = if @get('signingUp')
    "/users.json"
  else
    "/users/sign_in.json"
@get('user').save {url}, (err, record, env) =&gt;
  if newToken = env?.data?.csrf_token
    @updateCSRFToken(newToken)
  if err?
    if err instanceof Batman.StorageAdapter.UnauthorizedError
      @set 'user', new Funzies.User(record.toJSON())
      @get('user.errors').add("base", "Email/password don't match our records!")
    else
      console.log(err)
    return
  else
    record.unset('password')
    record.unset('password_confirmation')
    Funzies.User.set('current', record)
    @closeDialog()
</code></pre>

<p>```</p>

<h3>Signing Out</h3>

<p>To send a <code>DELETE</code> request, we&rsquo;ll make a new user, then &ldquo;destroy&rdquo; it:</p>

<p>```coffeescript
  signOut: &ndash;></p>

<pre><code>user = new Funzies.User
user.url = "/users/sign_out.json"
user.destroy (err, record, env) =&gt;
  if newToken = env?.data?.csrf_token
    @updateCSRFToken(newToken)
  Funzies.User.unset('current')
</code></pre>

<p>```</p>

<p>Normally, destroying a not-yet-saved record throws an error. It doesn&rsquo;t throw an error in this case because the storage adapter doesn&rsquo;t check for presence of an ID. (Since we provide a URL, it doesn&rsquo;t need the ID for anything.)</p>

<h2>Keeping the CSRF Token Up-To-Date</h2>

<p>When Rails changes the session, it also provides a new CSRF token for that session. This means that when your user signs in our out, Rails will expect a new CSRF token in the requests from that user. So, make devise send <code>csrf_token</code> when a user signs in or out.</p>

<p>Add to your Devise routes:</p>

<p>```ruby
  devise_for :users, controllers: {</p>

<pre><code>sessions: "users/sessions", # for sending CSRF tokens
</code></pre>

<p>  }
```</p>

<p>Then define the <code>users/sessions</code> controller. Put this in <code>app/controllers/users/sessions_controller.rb</code>:</p>

<p>```ruby
class Users::SessionsController &lt; Devise::SessionsController
  respond_to :json</p>

<p>  def create</p>

<pre><code>resource = warden.authenticate!(
  :scope =&gt; resource_name,
  :recall =&gt; "#{controller_path}#failure"
  )
sign_in_and_redirect(resource_name, resource)
</code></pre>

<p>  end</p>

<p>  def destroy</p>

<pre><code>sign_out(resource_name)
# on sign-out, send back the CSRF token
render json: {csrf_token: form_authenticity_token}
</code></pre>

<p>  end</p>

<p>  private
  def sign_in_and_redirect(resource_or_scope, resource=nil)</p>

<pre><code>scope = Devise::Mapping.find_scope!(resource_or_scope)
resource ||= resource_or_scope
if warden.user(scope) != resource
  sign_in(scope, resource)
end
# on sign-in, put the CSRF token in the JSON!
return render json: current_user.as_json.merge({csrf_token: form_authenticity_token})
</code></pre>

<p>  end</p>

<p>  def failure</p>

<pre><code>return render :json =&gt; {:success =&gt; false, :errors =&gt; ["Login failed."]}
</code></pre>

<p>  end
end
```</p>

<p>Then, add a way for batman.js to update its <code>Batman.config.CSRF_TOKEN</code>. I put a function on my <code>SessionsController</code>:</p>

<p>```coffeescript
class Funzies.SessionsController
  updateCSRFToken: (token) &ndash;></p>

<pre><code>Batman.config.CSRF_TOKEN = token
</code></pre>

<p>```</p>

<p>That&rsquo;s what I use in <code>signIn</code> and <code>signOut</code> above.</p>
]]></content>
  </entry>
  
</feed>
