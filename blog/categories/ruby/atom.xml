<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Robert Mosolgo]]></title>
  <link href="http://rmosolgo.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://rmosolgo.github.io/"/>
  <updated>2015-10-08T21:56:41-07:00</updated>
  <id>http://rmosolgo.github.io/</id>
  <author>
    <name><![CDATA[Robert Mosolgo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Authorization in GraphQL]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/08/04/authorization-in-graphql/"/>
    <updated>2015-08-04T10:19:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/08/04/authorization-in-graphql</id>
    <content type="html"><![CDATA[<p>A <a href="http://facebook.github.io/graphql/">GraphQL</a> system works differently from a &ldquo;traditional&rdquo; RESTful JSON API. Instead of authenticating during controller actions, you can authenticate users with &ldquo;query context.&rdquo;</p>

<!-- more -->


<h2>Query Context</h2>

<p>GraphQL execution systems should allow the consumer to pass some arbitrary data &ldquo;through&rdquo; the query, so it is accessible at any time during execution. For example, you could take some information from an HTTP request, pass it into the query, then use that information during field resolution.</p>

<p>You can see this idea at work in <a href="https://github.com/graphql/graphql-js/tree/v0.2.4">graphql-js 0.2.4</a>:</p>

<ul>
<li>An arbitrary value enters the <code>execute</code> function <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L108">as <code>rootValue</code></a> and is <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L119">built into <code>context</code></a></li>
<li>Execution context is <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L203-L206">passed to <code>executeFields</code></a></li>
<li><code>rootValue</code> is <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L489">drawn back out and passed</a> to fields' resolve functions, where it is the <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L663">third argument</a></li>
</ul>


<p>This way, any value that you pass to <code>execute</code> is passed along to any field resolution.</p>

<p><a href="https://github.com/rmosolgo/graphql-ruby">graphql-ruby</a> also implements this idea:</p>

<ul>
<li><code>Query#new</code> accepts <a href="https://github.com/rmosolgo/graphql-ruby/blob/adcf3c8ee83ba06232d71df1a2360bc985caf4d3/lib/graph_ql/query.rb#L15">a <code>context:</code> keyword</a></li>
<li>That value is <a href="https://github.com/rmosolgo/graphql-ruby/blob/adcf3c8ee83ba06232d71df1a2360bc985caf4d3/lib/graph_ql/query.rb#L74">accessible through <code>Query::Context</code></a>,
which is <a href="https://github.com/rmosolgo/graphql-ruby/blob/adcf3c8ee83ba06232d71df1a2360bc985caf4d3/lib/graph_ql/field.rb#L54">passed to field resolution methods</a></li>
</ul>


<h2>Using Query Context for Authorization</h2>

<p>To implement authorization in GraphQL, you could use query context.
There are roughly two approaches:</p>

<h4>Pass a permission indicator into the query.</h4>

<p>Before executing the query, determine the permission level of the current user, then pass that into the query as context. That way, each field can test the permission level to determine how to resolve.</p>

<p>For example, in Ruby:</p>

<p>```ruby</p>

<h1>pass the permission level in the context hash</h1>

<p>permission = current_user.permission
query = GraphQL::Query.new(MySchema, query_string, context: {permission: permission})
query.result
```</p>

<p>Inside a field, you could access <code>context[:permission]</code>, for example:</p>

<p>```ruby
GraphQL::Field.new do |f|
  # &hellip;
  f.resolve &ndash;> (obj, args, context) do</p>

<pre><code># Check the permission level which was passed as context
if context[:permission] == "admin"
  object.secret_info
else
  nil
end
</code></pre>

<p>  end
end
```</p>

<p>This allows you to access permission information without abusing the global scope.</p>

<h4>Pass the user object into the query.</h4>

<p>If your authentication scheme is more complex, you can pass the user object in to the query context.</p>

<p>For example, in Ruby:</p>

<p>```ruby</p>

<h1>Pass <code>current_user</code> in the context hash</h1>

<p>query = GraphQL::Query.new(MySchema, query_string, context: {user: current_user})
query.result
```</p>

<p>That way, fields can access the user object at resolve-time:</p>

<p>```ruby
GraphQL::Field.new do |f|
  # &hellip;
  f.resolve &ndash;> (object, args, context) {</p>

<pre><code># Check the user which was passed as context
if context[:user].can?(:read, object)
  objects.secret_info
else
  nil
end
</code></pre>

<p>  }
end
```</p>

<p>If you pass the user object into query context, you can use fine-grained authentication when resolving fields.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Response to "Using a Ruby Class to Write Functional Code"]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/03/15/response-to-using-a-ruby-class-to-write-functional-code/"/>
    <updated>2015-03-15T14:29:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/03/15/response-to-using-a-ruby-class-to-write-functional-code</id>
    <content type="html"><![CDATA[<p>Pat Shaughnessy&rsquo;s <a href="http://patshaughnessy.net/2014/4/8/using-a-ruby-class-to-write-functional-code">&ldquo;Using a Ruby Class to Write Functional Code&rdquo;</a> gives an example of bringing functional programming principles into object-oriented design. I like it.</p>

<!-- more -->


<p>It Pat&rsquo;s example, he turns a group of pure functions into a class whose state is <em>immutable-ish</em> (they technically could be changed, but they aren&rsquo;t) &amp; whose methods are <em>pure-ish</em> (they read from internal state, too). He says:</p>

<blockquote><p>You’ve broken the rules and rewritten your pure, functional program in a more idiomatic, Ruby manner. However, you haven’t lost the spirit of functional programming. Your code is just as easy to understand, maintain and test.</p></blockquote>

<p><a href="http://patshaughnessy.net/2014/4/8/using-a-ruby-class-to-write-functional-code#comment-1331596525">One commenter</a> goes further:</p>

<blockquote><p>I think you do not break the rules of FP by relying on <code>@line</code> and <code>@values</code>. <code>@line</code> is just partially applying a parameter to the &ldquo;functions&rdquo; of Line and currification is a usual techique in FP. <code>@values</code> is memoizing the result of a function which also comes from FP.</p></blockquote>

<p>There were a few ideas that jumped out at me.</p>

<h2>&ldquo;No Side-effects&rdquo; = Clarity at the Call Site</h2>

<p>Functions that don&rsquo;t modify their arguments are often easier to use. Their usage <em>reveals intent</em>.</p>

<p>Which do you prefer:</p>

<p>```ruby
def exclaim_1(statement)
  # modify the argument
  statement &lt;&lt; &ldquo;!!!&rdquo;
  return nil
end</p>

<p>wow = &ldquo;Wow&rdquo;
exclaim_1(wow)  # => nil
wow             # => &ldquo;Wow!!!&rdquo;
```</p>

<p>or:</p>

<p>```ruby
def exclaim_2(statement)
  # make a new string
  return statement + &ldquo;!!!&rdquo;
end</p>

<p>wow = &ldquo;Wow&rdquo;
such_wow = exclaim_2(wow) # => &ldquo;Wow!!!&rdquo;
wow                       # => &ldquo;Wow&rdquo;
such_wow                  # => &ldquo;Wow!!!&rdquo;
```</p>

<p>In the first case, if you didn&rsquo;t have the output in front of you, you wouldn&rsquo;t know what <code>exclaim_1</code> did. You&rsquo;d have to find the file and read the method body to know its purpose.</p>

<p>In the second case, it&rsquo;s obvious at the call site that the function returns a new, significant value. (Otherwise, why would the developer have captured in a new variable?)</p>

<h2>Think of <code>self</code> as an Argument</h2>

<p>You can extend the benefit of call site clarity to an object&rsquo;s internal state, too.</p>

<p>The commenter mentions that &ldquo;<code>@line</code> is like a parameter&rdquo; to the class&rsquo;s methods. Although it <em>isn&rsquo;t</em> part of the method signature, it has some parameter-like properties. It is:</p>

<ul>
<li>A value which affects the output</li>
<li>Unchanged by the function</li>
</ul>


<p>What if you <em>always</em> treated <code>self</code> like that? I mean, you didn&rsquo;t modify it inside method bodies, you treated it as read-only (as often as possible).</p>

<p>Python really invites you to think of <code>self</code> as a parameter of the function. It&rsquo;s actually part of the method signature:</p>

<p>```python
class Something():
  def some_method(self, arg_1, arg2):</p>

<pre><code>self # =&gt; the instance
return "whatever"
</code></pre>

<p>```</p>

<p>In fact, PyCharm will even complain if you modify <code>self</code> during a method:</p>

<p><img src="/images/pycharm_ivar.png" width="500"></p>

<p>(In reality, <code>self</code> <em>is</em> an argument in any language runtime that I ever heard of &hellip; we just tend not to think of it that way!)</p>

<h2>What Gives?</h2>

<p>I spend most of my time <em>maintaining</em> software and FP pays off big time in that regard:</p>

<ul>
<li><strong>Tests are more reliable</strong> for pure functions: if the function yields the correct output with those inputs today, it will <em>always</em> yield the correct output with those inputs.</li>
<li>Pure functions are <strong>easy to understand</strong>: the only factors are the inputs and there&rsquo;s no muddling from outside universe. Knowledge of the function body is sufficent to understand the function.</li>
<li>Pure functions must be <strong>decoupled</strong>. The only touch the world via <em>inputs</em> and <em>outputs</em> so they can&rsquo;t depend on anything else.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Hello World" with mruby]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/11/15/hello-world-with-mruby/"/>
    <updated>2014-11-15T19:38:00-08:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/11/15/hello-world-with-mruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.mruby.com">mruby</a> is an implementation of Ruby that&rsquo;s designed to be lightweight &amp; integrated with C. To get started, you can run a bit of Ruby code from <em>inside</em> C code.</p>

<!-- more -->


<p>&ldquo;Hello World&rdquo; with mruby looks like this:</p>

<ul>
<li>Set up a new project and include mruby as a submodule</li>
<li>Write some C code that loads mruby and executes some Ruby code</li>
<li>Compile the C code &amp; run the resulting binary</li>
</ul>


<p>You can find an example similar to this one <a href="https://github.com/rmosolgo/mruby-examples/tree/master/01_hello_world">on GitHub</a>.</p>

<h2>Start a project</h2>

<p>Make a directory for your new project and enter it:</p>

<p><code>
$ mkdir ~/hello-mruby
$ cd ~/hello-mruby
</code></p>

<p>Clone mruby source and compile mruby:</p>

<p><code>
$ git clone git@github.com:mruby/mruby.git
$ cd mruby
$ make
$ cd ..
</code></p>

<p>(You need bison and Ruby to compile mruby, see the <a href="https://github.com/mruby/mruby/blob/master/INSTALL">install guide</a> for more information.)</p>

<p>You can check if compilation was successful by running <code>mirb</code> (interactive mruby):</p>

<p>```
$ mruby/bin/mirb
mirb &ndash; Embeddable Interactive Ruby Shell</p>

<blockquote><p>1 + 1
 => 2
```</p></blockquote>

<h2>Write the program</h2>

<p>Here&rsquo;s the whole of <code>hello_world.c</code>:</p>

<p>```c
/<em> include mruby VM &amp; compiler </em>/</p>

<h1>include &ldquo;mruby.h&rdquo;</h1>

<h1>include &ldquo;mruby/compile.h&rdquo;</h1>

<p>int main(void)
{
  /<em> make a mruby instance </em>/
  mrb_state *mrb = mrb_open();</p>

<p>  /<em> write some code </em>/
  char code[] = &ldquo;p &lsquo;Hello world!&rsquo;&rdquo;;</p>

<p>  /<em> use mruby to execute code from string </em>/
  mrb_load_string(mrb, code);</p>

<p>  return 0;
}
```</p>

<p>Let&rsquo;s break that down:</p>

<ul>
<li><p><strong>Include mruby &amp; compiler</strong>. The mruby VM takes bytecode instructions. The compiler is used to turn a string of Ruby code into mruby bytecode. <code>mrb_load_string</code> handles both steps: Parse &amp; compile Ruby code, then execute with the mruby VM.</p></li>
<li><p><strong>Make a mruby instance</strong>. Create an instance of the mruby VM. This object contains the state of the Ruby evnironment. Besides using it to execute code, you can inject values into the Ruby environment or call Ruby code from C.</p></li>
<li><p><strong>Use mruby to execute code from string</strong>. As described above, in this case, the string will be turned into VM instructions first, then executed by mruby.</p></li>
</ul>


<h2>Compile &amp; run</h2>

<p>Compile your C application, referencing the necessary mruby files:</p>

<p><code>
$ gcc hello_world.c -o hello_world -Imruby/include  -lmruby  -Lmruby/build/host/lib
</code></p>

<p>Then, execute the resulting binary:</p>

<p><code>
$ ./hello_world
"Hello world!"
</code></p>

<p>You did it!</p>

<h2>What next?</h2>

<ul>
<li>Use <code>mrbc</code> to precompile <code>.rb</code> into mruby bytecode.</li>
<li>Modify <code>mrb_state</code> from C with things like <code>mrb_define_class</code>, <code>mrb_define_method</code> and <code>mrb_define_const</code>.</li>
<li>Call Ruby methods from C with <code>mrb_funcall</code>.</li>
</ul>


<p>However, I don&rsquo;t know of any English documentation for these things yet!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Batman.js to an Existing Rails App]]></title>
    <link href="http://rmosolgo.github.io/blog/2013/10/19/adding-batman-dot-js-to-an-existing-rails-app/"/>
    <updated>2013-10-19T22:08:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2013/10/19/adding-batman-dot-js-to-an-existing-rails-app</id>
    <content type="html"><![CDATA[<p>I had an existing app, but I wanted to take the front end to the next level. <a href="http://batmanjs.org/">Batman.js</a> is a full-featured, developer-friendly, Rails-inclined CoffeeScript (or JavaScript) framework with powerful <a href="https://github.com/batmanjs/batman-rails">Rails integration</a>.</p>

<!-- more -->


<h3>Installing Batman.js</h3>

<p>I was already using <a href="https://github.com/rails-api/active_model_serializers">ActiveModel::Serializer</a> to serve JSON from my app. To get Batman on the scene, I included
<code>batman-rails</code> in my Gemfile and installed it:</p>

<p>```ruby Gemfile.rb</p>

<pre><code>require 'batman-rails', '~&gt; 0.15'
</code></pre>

<p>```</p>

<p><code>bash
  $ bundle install
</code></p>

<p>The <a href="https://github.com/batmanjs/batman-rails">batman-rails gem</a> comes with a generator to get everything in order.
I ran it and restarted my Rails server:</p>

<p><code>bash
  $ rails g batman:app # that's not _your_ app name, it's just "app"
  $ powder restart # restart your Rails server one way or another
</code></p>

<p>I visited my app&rsquo;s <code>root_url</code> and found Batman-rails landing page. How&rsquo;d it get there!? Sure enough, the Batman generator had added a punchy line to the top of my routes file:</p>

<p><code>ruby config/routes.rb
  get "(*redirect_path)", to: "batman#index", constraints: lambda { |request| request.format == "text/html" }
</code></p>

<p>It captures all <code>text/html</code> requests and passes them to <code>BatmanController</code>, which was also created by the generator:</p>

<p>```ruby app/controllers/batman_controller
  class BatmanController &lt; ApplicationController</p>

<pre><code>def index
  render nothing: true, layout: 'batman'
end
</code></pre>

<p>  end
```</p>

<p>Along with that, there was a new file in my <code>app/views/layouts</code> folder, and then of course, <code>app/assets/batman</code>.</p>

<h3>My first view</h3>

<p>I didn&rsquo;t want the Batman landing page at my <code>root_url</code>, I wanted a list of sounds! So, I ran a Batman generator, beefed up the model and controller, created the index html, and redefined the route:</p>

<p><code>
  $ rails g batman:scaffold Sounds
</code></p>

<p>```coffeescript app/assets/batman/models/sound.js.coffee</p>

<pre><code>class Lang.Sound extends Batman.Model
  @resourceName: 'sounds'
  @storageKey: 'sounds'

  @persist Batman.RailsStorage

  # Use @encode to tell batman.js which properties Rails will send back with its JSON.
  @encode 'letter'
  @encodeTimestamps()
</code></pre>

<p>```</p>

<p>```coffeescript app/assets/batman/controllers/sounds_controller.js.coffee</p>

<pre><code>class Lang.SoundsController extends Lang.ApplicationController
  routingKey: 'sounds'
  index: (params) -&gt;
    @set("sounds", Lang.Sound.get('all'))
</code></pre>

<p>```</p>

<p>```haml app/assets/batman/html/sounds/index.html</p>

<pre><code>&lt;ul&gt;
  &lt;li data-foreach-sound="sounds"&gt;
    &lt;span data-bind="sound.letter" /&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>```</p>

<p><em>your filename will be your app name:</em>
```coffeescript app/assets/batman/lang.js.coffee</p>

<pre><code>class Lang extends Batman.App
  @root "sounds#index"
</code></pre>

<p>```</p>

<p>And now I had my own landing page!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert country names and codes with Countrysaurus]]></title>
    <link href="http://rmosolgo.github.io/blog/2013/10/07/convert-country-names-and-codes-with-countrysaurus/"/>
    <updated>2013-10-07T21:56:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2013/10/07/convert-country-names-and-codes-with-countrysaurus</id>
    <content type="html"><![CDATA[<p><a href="http://countrysaurus.herokuapp.com/">Countrysaurus</a> is an online tool for merging country codes into a CSV spreadsheet with country names in it. You can also download a CSV of country codes or access it via <a href="http://countrysaurus.herokuapp.com/api_documentation">REST API</a>.</p>

<!-- more -->


<p>In my old job, I often had spreadsheets with (sometimes misspelled) country names, but I needed to feed data into something with country codes, be it ISO-2, ISO-3, OECD, AidData, whatever kind of code.</p>

<p>Finally, I hammered out a little web app with Ruby&rsquo;s <a href="http://www.sinatrarb.com/">Sinatra</a> web framework to help with this problem. You can upload a (small- or medium-sized) CSV spreadsheet and it will:</p>

<ul>
<li>Identify unique country names</li>
<li>Allow you to pick which kinds of codes you need</li>
<li>Suggest matches</li>
<li>Allow you to add new matches (in case it doesn&rsquo;t have your country name already)</li>
<li>Allow you to download your spreadsheet.</li>
</ul>


<p>It&rsquo;s also <a href="https://github.com/rmosolgo/country-fixer">on Github</a>. <a href="http://countrysaurus.herokuapp.com/">Try it out!</a></p>
]]></content>
  </entry>
  
</feed>
