<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Robert Mosolgo]]></title>
  <link href="http://rmosolgo.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://rmosolgo.github.io/"/>
  <updated>2016-05-19T22:31:16-04:00</updated>
  <id>http://rmosolgo.github.io/</id>
  <author>
    <name><![CDATA[Robert Mosolgo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I Use Sprockets]]></title>
    <link href="http://rmosolgo.github.io/blog/2016/05/19/how-i-use-sprockets/"/>
    <updated>2016-05-19T08:44:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2016/05/19/how-i-use-sprockets</id>
    <content type="html"><![CDATA[<p>When reviewing issues for <code>react-rails</code>, I see many questions about how to gather JavaScript dependencies with Sprockets. Here is how I use Sprockets to manage JavaScript dependencies.</p>

<!-- more -->


<p>I&rsquo;m looking for a few things in a JavaScript bundler:</p>

<ul>
<li>Stability: I don&rsquo;t want any changes to my dependencies unless I explicitly make them.</li>
<li>Clarity: I want to be able to quickly tell what dependencies I have (library and version).</li>
<li>Insulation: I don&rsquo;t want to rely on external services during development, deployment or runtime (except for downloading <em>new</em> dependencies, of course)</li>
<li>Feature-completeness: I want to concatenate and minify my assets and serve them with cache headers</li>
</ul>


<h2>Using Sprockets</h2>

<p>To <strong>add a new dependency</strong>:</p>

<ol>
<li>Find a non-minified, browser-ready version of your dependency</li>
<li>Add it to <code>app/assets/javascripts/vendor/{library-name}-v{version-number}.js</code> (for example, <code>app/assets/javascripts/moment-v2.13.0.js</code>)</li>
<li>Require it in <code>application.js</code> with <code>//= require ./vendor/moment-v2.13.0</code></li>
<li>Access the global variable as needed in your app (eg <code>moment</code>)</li>
</ol>


<p>To <strong>update</strong> a dependency:</p>

<ol>
<li>Find a non-minified, browser-ready version of the updated dependency</li>
<li>Add it to <code>app/assets/javascripts/vendor/{library-name}-v{version-number}.js</code> and remove the <em>old</em> version from that directory</li>
<li>Update the <code>//= require</code> directive with the new version number</li>
<li>Check the dependency&rsquo;s changelog and update your app as needed. (Search your project for the global variable to find usages, eg <code>moment</code>.)</li>
</ol>


<p>To <strong>remove</strong> a dependency:</p>

<ol>
<li>Remove its file (<code>app/assets/javascripts/vendor/{library-name}-v{version-number}.js</code>)</li>
<li>Remove the <code>//= require</code> directive</li>
<li>Search your project for the global variable and remove all usages</li>
</ol>


<h2>Finding a browser-ready file</h2>

<p>This got its own page: <a href="/blog/2016/05/19/finding-a-browser-ready-file-for-sprockets/">Finding a browser-ready file</a>.</p>

<h2>Adding the file to <code>vendor/</code></h2>

<p>Use an <strong>unminified</strong> version of the library. It will help in debugging development and viewing diffs when you update the dependency. Have no fear, Sprockets will minify it for you for production.</p>

<p>Include the <strong>version number</strong> in the file name. This will give you more confidence in updating the library, since you&rsquo;ll know what version you&rsquo;re coming from.</p>

<h2>Integrating with Sprockets</h2>

<p>The <code>//= require ./vendor/{library}-v{version}</code> directive is your friend. Like an entry in <code>package.json</code>, it tells the reader what dependency you have.</p>

<p>Now, your library will be accessible by its global name, such as <code>React</code>, <code>d3</code> or <code>Immutable</code>.</p>

<p>Consuming a library via global variable is not ideal. But it <em>does</em> help you remember that, at the end of the day, the browser is one giant, mutable namespace, so you must be a good citizen! At least global variables can be grepped like any other dependency.</p>

<p>Consider isolating your dependency. For example, you could wrap <code>Pusher</code> in an application-specific event emitter. This way, when you update Pusher, you only have to check one file for its usages. (Some libraries are poor candidates for isolation. My app will never be isolated from React!)</p>

<h2>Caveats</h2>

<p>There are some things Sprockets doesn&rsquo;t provide for me, which I wish it did:</p>

<ul>
<li>Named imports: I wish there was a good alternative to global namespacing with Sprockets, but not yet. (It&rsquo;s not a deal breaker &mdash; it doesn&rsquo;t hurt to be familiar with this constraint because it&rsquo;s the reality of the browser, anyways.)</li>
<li>Tree shaking: It wish I could only transmit the parts of Underscore.js I actually used!</li>
</ul>


<p>Perhaps I should read up on Sprockets and submit a patch ðŸ˜Ž</p>

<p>Also, there&rsquo;s one case where copy-pasting isn&rsquo;t a great solution. Some libraries (like React.js) have <em>separate</em> &ldquo;development&rdquo; and &ldquo;production&rdquo; builds. The production build has fewer runtime checks than the development build, making it smaller and faster. There are a few solutions to this problem:</p>

<ul>
<li>Use a gem which provides the proper file for each environment (like <code>react-rails</code>)</li>
<li>Add environment-specific folders to the asset pipeline (like <code>react-rails</code> does, I can write more on this if need be)</li>
<li>Use the development build in productiosn (weigh the costs first: what&rsquo;s the difference in behavior, performance and file size?)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Class, meet Elixir Module]]></title>
    <link href="http://rmosolgo.github.io/blog/2016/05/01/ruby-class-meet-elixir-module/"/>
    <updated>2016-05-01T11:10:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2016/05/01/ruby-class-meet-elixir-module</id>
    <content type="html"><![CDATA[<p>Elixir modules offer some valuable insight into designing Ruby classes.</p>

<!-- more -->


<p>Ruby classes combine <em>data</em> and <em>behavior</em> in a typically object-oriented way:</p>

<ul>
<li><strong>data:</strong> instances of the class hold state in instance variables</li>
<li><strong>behavior:</strong> methods on the class alter state.</li>
</ul>


<p>Elixir modules also combine data and behavior:</p>

<ul>
<li><strong>data:</strong> the module&rsquo;s eponymous struct defines an immutable data structure</li>
<li><strong>behavior:</strong> the module&rsquo;s functions define state transformations, often taking the struct as input</li>
</ul>


<p>Perhaps we can combine these ideas to gain some functional-style benefits in Ruby!</p>

<h2>Data: Problem</h2>

<p>Ruby&rsquo;s mutable values open the door to errors caused by out-of-sight state changes. Here&rsquo;s a simple example:</p>

<p>```ruby</p>

<h1>mutate the passed-in array ðŸ˜ˆ</h1>

<p>def cause_mayhem(array)
  array &lt;&lt; nil
end</p>

<p>top_scores = [98, 95, 89]
cause_mayhem(top_scores)
top_scores.max # ArgumentError: comparison of Fixnum with nil failed
```</p>

<p>Unbeknownst to the user, <code>cause_mayhem</code> <em>altered</em> the array. It wasn&rsquo;t equal to its original value anymore! This is possible with many common objects in Ruby programming , eg <code>String</code>, <code>Hash</code>, <code>ActiveRecord::Base</code>, <code>ActiveRecord::Relation</code> and <code>ActionController::Params</code>.</p>

<p>When you pass a value to another method, you have <em>no way</em> to know how your value will be affected. Maybe it will be changed under your feet!</p>

<p>Elixir&rsquo;s immutable values offer a solution to this pitfall. When you pass a value to a function, your value won&rsquo;t be changed because it&rsquo;s <em>impossible</em> to change it!</p>

<p>```elixir
cause_mayhem = fn(list) &ndash;> [99999 | list] end</p>

<p>top_scores = [98, 95, 89]
cause_mayhem.(top_scores) # => [99999, 98, 95, 89]
Enum.max(top_scores)      # => 98
```</p>

<p>Although <code>cause_mayhem</code> returned a <em>new</em> list, it didn&rsquo;t alter the existing list. Changing the value of an existing item is impossible with Elixir! Because of this, you never have to worry about passing your value to another function. It <em>can&rsquo;t</em> mess up existing code!</p>

<h2>Data: Solution</h2>

<p>The Ruby solution is to write classes whose state is immutable.</p>

<p>A <em>mutable</em> class is one whose instance variables change during its lifetime. An <em>immutable</em> class is one whose instance variables <em>never</em> change during its lifetime.</p>

<p>Here&rsquo;s an example of refactoring a mutable class to be immutable.</p>

<p>First, a mutable <code>Counter</code>:</p>

<p>```ruby
class MutableCounter
  attr_reader :count</p>

<p>  def initialize</p>

<pre><code>@count = 0
</code></pre>

<p>  end</p>

<p>  # Adds one to the internal value
  def increment</p>

<pre><code>@count += 1
</code></pre>

<p>  end
end
```</p>

<p>Now, here&rsquo;s the problem with this class. It leads to unpredictable code:</p>

<p><code>ruby
counter = MutableCounter.new
counter.count         # =&gt; 0
counter.increment
counter.count         # =&gt; 1
cause_mayhem(counter)
counter.count         # =&gt; ????
</code></p>

<p>It could be mutated by <code>cause_mayhem</code>&hellip; but we have no idea!</p>

<p>Next, an immutable <code>Counter</code> class</p>

<p>```ruby
class ImmutableCounter
  attr_reader :count</p>

<p>  def initialize(count: 0)</p>

<pre><code>@count = count
</code></pre>

<p>  end</p>

<p>  # Return a <em>new</em> ImmutableCounter with an incremented count
  def increment</p>

<pre><code>self.class.new(count: @count + 1)
</code></pre>

<p>  end
end
```</p>

<p>No matter how you call methods on that object, its <code>@count</code> will not change after initialization.</p>

<p>Here&rsquo;s our problem code again:</p>

<p><code>ruby
counter = ImmutableCounter.new
counter.count         # =&gt; 0
counter = counter.increment
counter.count         # =&gt; 1
cause_mayhem(counter)
counter.count         # =&gt; 1 ðŸŽŠ  
</code></p>

<p>There&rsquo;s no way <code>cause_mayhem</code> could alter our counter!</p>

<p><strong>But,</strong> what if you <em>want</em> to alter the value by some other method?</p>

<p>Easy: just make the method <em>return</em> the value you want to use. Here&rsquo;s a modified example:</p>

<p>```ruby</p>

<h1>Increment the counter three times and return the new one</h1>

<p>def modify_counter(counter)
  counter = counter.increment
  counter = counter.increment
  counter = counter.increment
  counter
end</p>

<h1>usage:</h1>

<p>counter = ImmutableCounter.new
counter.count             # => 0</p>

<h1>store the old counter, just for example:</h1>

<p>previous_counter = counter</p>

<h1>reassign the counter</h1>

<p>counter = modify_counter(counter)</p>

<h1>counter has the new value:</h1>

<p>counter.count           # => 3</p>

<h1>previous_counter was unchanged:</h1>

<p>previous_counter.count  # => 0
```</p>

<p>In this case, the caller must <em>explicitly</em> receive the new value from the function. This makes it obvious to the reader that the function returned a new, useful value!</p>

<h2>Behavior: Problem</h2>

<p>In Ruby, classes express <em>behavior</em> by exposing public methods. These methods may alter internal state (like <code>MutableCounter#increment</code>). Shared code may be DRYed up by being relocated to a private method.</p>

<p>Here&rsquo;s an example:</p>

<p>```ruby
class BaseballTeam
  # &hellip;
  def add_player(player)</p>

<pre><code>@players &lt;&lt; player
# reset cached averages, etc:
update_team_aggregates
</code></pre>

<p>  end
end
```</p>

<p>The problem is that state changes are scattered throughout the code. Some are visible inline, some are out-of-sight. This makes <code>BaseballTeam</code> harder to understand.</p>

<p>To learn the behavior of <code>add_player</code>, must also know the behavior of <code>update_team_aggregates</code>. <em>Any</em> part of the <code>BaseballTeam</code>&rsquo;s internal state could have been altered in any way! At the end of the method body, there&rsquo;s no guarantee that <code>@players</code> contains the same objects it at the start of the method body. ðŸ˜¢.</p>

<p>In Elixir, any behavior that <em>would</em> mutate an object actually creates a <em>new</em> object. The analogous code is:</p>

<p>```elixir
defmodule BaseballTeam do
  def add_player(team, player) do</p>

<pre><code>players = [player | team.players]
[avg_batting_avg, avg_salary, avg_pitching_record] = calculate_aggregates(players)
%{team | players: players, avg_batting_avg: avg_batting_avg, avg_salary: avg_salary, avg_pitching_record: avg_pitching_record}
</code></pre>

<p>  end
end
```</p>

<p>In this case, it&rsquo;s clear exactly which keys of the <code>BaseballTeam</code> struct are updated when a players is added. It&rsquo;s impossible for <code>calculate_aggregates</code> to alter any other part of the <code>team</code>!</p>

<h2>Behavior: Solution</h2>

<p>The Ruby solution is to write methods as pure functions, that is, methods which use their arguments as their <em>only</em> input (no accessing <code>self</code>) and provide a return value as their <em>only</em> output (no side-effects).</p>

<p>Here&rsquo;s a rewritten Ruby example:</p>

<p>```ruby
class BaseballTeam
  # &hellip;
  def add_player(player)</p>

<pre><code>@players &lt;&lt; player
@avg_batting_avg, @avg_salary, @avg_pitching_record = calculate_aggregates(@players)
</code></pre>

<p>  end
end
```</p>

<p>In this case, it&rsquo;s obvious which members of the <code>team</code>&rsquo;s internal state will be modified by <code>add_player</code>. However, a developer <em>could</em> break the purely functional contract of <code>calculate_aggregates</code>.</p>

<p>To avoid that, refactor <code>BaseballTeam</code> to be a composition of <code>@players</code> and <code>@aggregates</code>:</p>

<p>```ruby
class BaseballTeam
  class AggregateStats</p>

<pre><code>def initialize(players)
 # ...
end
# ...
</code></pre>

<p>  end
  # &hellip;
  def add_player(player)</p>

<pre><code>@players &lt;&lt; player
@aggregates = AggregateStats.new(@players)
</code></pre>

<p>  end</p>

<p>  # Aggregate methods delegate to the AggregateStats object:
  def avg_salary</p>

<pre><code>@aggregates.avg_salary
</code></pre>

<p>  end
end<br/>
```</p>

<p>Further defensive techniques could be taken, such as:</p>

<ul>
<li>Creating a <em>new</em> <code>@players</code> array instead of mutating the existing one.</li>
<li>Freezing <code>@players</code> to prevent other code from changing it</li>
</ul>


<p>Those measures would guarantee correct state, but they may be &ldquo;overkill&rdquo; for some uses!</p>

<h2>Conclusion</h2>

<p>I can&rsquo;t magically transform my Ruby app into an Elixir app, but I <em>can</em> take some of the lessons learned from Elixir and apply them to Ruby code! Plus, Ruby gives us the ability to mutate state when necessary (for example, when performance is critical).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authorization in GraphQL]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/08/04/authorization-in-graphql/"/>
    <updated>2015-08-04T10:19:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/08/04/authorization-in-graphql</id>
    <content type="html"><![CDATA[<p>A <a href="http://facebook.github.io/graphql/">GraphQL</a> system works differently from a &ldquo;traditional&rdquo; RESTful JSON API. Instead of authenticating during controller actions, you can authenticate users with &ldquo;query context.&rdquo;</p>

<!-- more -->


<h2>Query Context</h2>

<p>GraphQL execution systems should allow the consumer to pass some arbitrary data &ldquo;through&rdquo; the query, so it is accessible at any time during execution. For example, you could take some information from an HTTP request, pass it into the query, then use that information during field resolution.</p>

<p>You can see this idea at work in <a href="https://github.com/graphql/graphql-js/tree/v0.2.4">graphql-js 0.2.4</a>:</p>

<ul>
<li>An arbitrary value enters the <code>execute</code> function <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L108">as <code>rootValue</code></a> and is <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L119">built into <code>context</code></a></li>
<li>Execution context is <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L203-L206">passed to <code>executeFields</code></a></li>
<li><code>rootValue</code> is <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L489">drawn back out and passed</a> to fields' resolve functions, where it is the <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L663">third argument</a></li>
</ul>


<p>This way, any value that you pass to <code>execute</code> is passed along to any field resolution.</p>

<p><a href="https://github.com/rmosolgo/graphql-ruby">graphql-ruby</a> also implements this idea:</p>

<ul>
<li><code>Query#new</code> accepts <a href="https://github.com/rmosolgo/graphql-ruby/blob/adcf3c8ee83ba06232d71df1a2360bc985caf4d3/lib/graph_ql/query.rb#L15">a <code>context:</code> keyword</a></li>
<li>That value is <a href="https://github.com/rmosolgo/graphql-ruby/blob/adcf3c8ee83ba06232d71df1a2360bc985caf4d3/lib/graph_ql/query.rb#L74">accessible through <code>Query::Context</code></a>,
which is <a href="https://github.com/rmosolgo/graphql-ruby/blob/adcf3c8ee83ba06232d71df1a2360bc985caf4d3/lib/graph_ql/field.rb#L54">passed to field resolution methods</a></li>
</ul>


<h2>Using Query Context for Authorization</h2>

<p>To implement authorization in GraphQL, you could use query context.
There are roughly two approaches:</p>

<h4>Pass a permission indicator into the query.</h4>

<p>Before executing the query, determine the permission level of the current user, then pass that into the query as context. That way, each field can test the permission level to determine how to resolve.</p>

<p>For example, in Ruby:</p>

<p>```ruby</p>

<h1>pass the permission level in the context hash</h1>

<p>permission = current_user.permission
query = GraphQL::Query.new(MySchema, query_string, context: {permission: permission})
query.result
```</p>

<p>Inside a field, you could access <code>context[:permission]</code>, for example:</p>

<p>```ruby
GraphQL::Field.new do |f|
  # &hellip;
  f.resolve &ndash;> (obj, args, context) do</p>

<pre><code># Check the permission level which was passed as context
if context[:permission] == "admin"
  object.secret_info
else
  nil
end
</code></pre>

<p>  end
end
```</p>

<p>This allows you to access permission information without abusing the global scope.</p>

<h4>Pass the user object into the query.</h4>

<p>If your authentication scheme is more complex, you can pass the user object in to the query context.</p>

<p>For example, in Ruby:</p>

<p>```ruby</p>

<h1>Pass <code>current_user</code> in the context hash</h1>

<p>query = GraphQL::Query.new(MySchema, query_string, context: {user: current_user})
query.result
```</p>

<p>That way, fields can access the user object at resolve-time:</p>

<p>```ruby
GraphQL::Field.new do |f|
  # &hellip;
  f.resolve &ndash;> (object, args, context) {</p>

<pre><code># Check the user which was passed as context
if context[:user].can?(:read, object)
  objects.secret_info
else
  nil
end
</code></pre>

<p>  }
end
```</p>

<p>If you pass the user object into query context, you can use fine-grained authentication when resolving fields.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Response to "Using a Ruby Class to Write Functional Code"]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/03/15/response-to-using-a-ruby-class-to-write-functional-code/"/>
    <updated>2015-03-15T14:29:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/03/15/response-to-using-a-ruby-class-to-write-functional-code</id>
    <content type="html"><![CDATA[<p>Pat Shaughnessy&rsquo;s <a href="http://patshaughnessy.net/2014/4/8/using-a-ruby-class-to-write-functional-code">&ldquo;Using a Ruby Class to Write Functional Code&rdquo;</a> gives an example of bringing functional programming principles into object-oriented design. I like it.</p>

<!-- more -->


<p>It Pat&rsquo;s example, he turns a group of pure functions into a class whose state is <em>immutable-ish</em> (they technically could be changed, but they aren&rsquo;t) &amp; whose methods are <em>pure-ish</em> (they read from internal state, too). He says:</p>

<blockquote><p>Youâ€™ve broken the rules and rewritten your pure, functional program in a more idiomatic, Ruby manner. However, you havenâ€™t lost the spirit of functional programming. Your code is just as easy to understand, maintain and test.</p></blockquote>

<p><a href="http://patshaughnessy.net/2014/4/8/using-a-ruby-class-to-write-functional-code#comment-1331596525">One commenter</a> goes further:</p>

<blockquote><p>I think you do not break the rules of FP by relying on <code>@line</code> and <code>@values</code>. <code>@line</code> is just partially applying a parameter to the &ldquo;functions&rdquo; of Line and currification is a usual techique in FP. <code>@values</code> is memoizing the result of a function which also comes from FP.</p></blockquote>

<p>There were a few ideas that jumped out at me.</p>

<h2>&ldquo;No Side-effects&rdquo; = Clarity at the Call Site</h2>

<p>Functions that don&rsquo;t modify their arguments are often easier to use. Their usage <em>reveals intent</em>.</p>

<p>Which do you prefer:</p>

<p>```ruby
def exclaim_1(statement)
  # modify the argument
  statement &lt;&lt; &ldquo;!!!&rdquo;
  return nil
end</p>

<p>wow = &ldquo;Wow&rdquo;
exclaim_1(wow)  # => nil
wow             # => &ldquo;Wow!!!&rdquo;
```</p>

<p>or:</p>

<p>```ruby
def exclaim_2(statement)
  # make a new string
  return statement + &ldquo;!!!&rdquo;
end</p>

<p>wow = &ldquo;Wow&rdquo;
such_wow = exclaim_2(wow) # => &ldquo;Wow!!!&rdquo;
wow                       # => &ldquo;Wow&rdquo;
such_wow                  # => &ldquo;Wow!!!&rdquo;
```</p>

<p>In the first case, if you didn&rsquo;t have the output in front of you, you wouldn&rsquo;t know what <code>exclaim_1</code> did. You&rsquo;d have to find the file and read the method body to know its purpose.</p>

<p>In the second case, it&rsquo;s obvious at the call site that the function returns a new, significant value. (Otherwise, why would the developer have captured in a new variable?)</p>

<h2>Think of <code>self</code> as an Argument</h2>

<p>You can extend the benefit of call site clarity to an object&rsquo;s internal state, too.</p>

<p>The commenter mentions that &ldquo;<code>@line</code> is like a parameter&rdquo; to the class&rsquo;s methods. Although it <em>isn&rsquo;t</em> part of the method signature, it has some parameter-like properties. It is:</p>

<ul>
<li>A value which affects the output</li>
<li>Unchanged by the function</li>
</ul>


<p>What if you <em>always</em> treated <code>self</code> like that? I mean, you didn&rsquo;t modify it inside method bodies, you treated it as read-only (as often as possible).</p>

<p>Python really invites you to think of <code>self</code> as a parameter of the function. It&rsquo;s actually part of the method signature:</p>

<p>```python
class Something():
  def some_method(self, arg_1, arg2):</p>

<pre><code>self # =&gt; the instance
return "whatever"
</code></pre>

<p>```</p>

<p>In fact, PyCharm will even complain if you modify <code>self</code> during a method:</p>

<p><img src="/images/pycharm_ivar.png" width="500"></p>

<p>(In reality, <code>self</code> <em>is</em> an argument in any language runtime that I ever heard of &hellip; we just tend not to think of it that way!)</p>

<h2>What Gives?</h2>

<p>I spend most of my time <em>maintaining</em> software and FP pays off big time in that regard:</p>

<ul>
<li><strong>Tests are more reliable</strong> for pure functions: if the function yields the correct output with those inputs today, it will <em>always</em> yield the correct output with those inputs.</li>
<li>Pure functions are <strong>easy to understand</strong>: the only factors are the inputs and there&rsquo;s no muddling from outside universe. Knowledge of the function body is sufficent to understand the function.</li>
<li>Pure functions must be <strong>decoupled</strong>. The only touch the world via <em>inputs</em> and <em>outputs</em> so they can&rsquo;t depend on anything else.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Hello World" with mruby]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/11/15/hello-world-with-mruby/"/>
    <updated>2014-11-15T19:38:00-05:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/11/15/hello-world-with-mruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.mruby.com">mruby</a> is an implementation of Ruby that&rsquo;s designed to be lightweight &amp; integrated with C. To get started, you can run a bit of Ruby code from <em>inside</em> C code.</p>

<!-- more -->


<p>&ldquo;Hello World&rdquo; with mruby looks like this:</p>

<ul>
<li>Set up a new project and include mruby as a submodule</li>
<li>Write some C code that loads mruby and executes some Ruby code</li>
<li>Compile the C code &amp; run the resulting binary</li>
</ul>


<p>You can find an example similar to this one <a href="https://github.com/rmosolgo/mruby-examples/tree/master/01_hello_world">on GitHub</a>.</p>

<h2>Start a project</h2>

<p>Make a directory for your new project and enter it:</p>

<p><code>
$ mkdir ~/hello-mruby
$ cd ~/hello-mruby
</code></p>

<p>Clone mruby source and compile mruby:</p>

<p><code>
$ git clone git@github.com:mruby/mruby.git
$ cd mruby
$ make
$ cd ..
</code></p>

<p>(You need bison and Ruby to compile mruby, see the <a href="https://github.com/mruby/mruby/blob/master/INSTALL">install guide</a> for more information.)</p>

<p>You can check if compilation was successful by running <code>mirb</code> (interactive mruby):</p>

<p>```
$ mruby/bin/mirb
mirb &ndash; Embeddable Interactive Ruby Shell</p>

<blockquote><p>1 + 1
 => 2
```</p></blockquote>

<h2>Write the program</h2>

<p>Here&rsquo;s the whole of <code>hello_world.c</code>:</p>

<p>```c
/<em> include mruby VM &amp; compiler </em>/</p>

<h1>include &ldquo;mruby.h&rdquo;</h1>

<h1>include &ldquo;mruby/compile.h&rdquo;</h1>

<p>int main(void)
{
  /<em> make a mruby instance </em>/
  mrb_state *mrb = mrb_open();</p>

<p>  /<em> write some code </em>/
  char code[] = &ldquo;p &lsquo;Hello world!&rsquo;&rdquo;;</p>

<p>  /<em> use mruby to execute code from string </em>/
  mrb_load_string(mrb, code);</p>

<p>  return 0;
}
```</p>

<p>Let&rsquo;s break that down:</p>

<ul>
<li><p><strong>Include mruby &amp; compiler</strong>. The mruby VM takes bytecode instructions. The compiler is used to turn a string of Ruby code into mruby bytecode. <code>mrb_load_string</code> handles both steps: Parse &amp; compile Ruby code, then execute with the mruby VM.</p></li>
<li><p><strong>Make a mruby instance</strong>. Create an instance of the mruby VM. This object contains the state of the Ruby evnironment. Besides using it to execute code, you can inject values into the Ruby environment or call Ruby code from C.</p></li>
<li><p><strong>Use mruby to execute code from string</strong>. As described above, in this case, the string will be turned into VM instructions first, then executed by mruby.</p></li>
</ul>


<h2>Compile &amp; run</h2>

<p>Compile your C application, referencing the necessary mruby files:</p>

<p><code>
$ gcc hello_world.c -o hello_world -Imruby/include  -lmruby  -Lmruby/build/host/lib
</code></p>

<p>Then, execute the resulting binary:</p>

<p><code>
$ ./hello_world
"Hello world!"
</code></p>

<p>You did it!</p>

<h2>What next?</h2>

<ul>
<li>Use <code>mrbc</code> to precompile <code>.rb</code> into mruby bytecode.</li>
<li>Modify <code>mrb_state</code> from C with things like <code>mrb_define_class</code>, <code>mrb_define_method</code> and <code>mrb_define_const</code>.</li>
<li>Call Ruby methods from C with <code>mrb_funcall</code>.</li>
</ul>


<p>However, I don&rsquo;t know of any English documentation for these things yet!</p>
]]></content>
  </entry>
  
</feed>
