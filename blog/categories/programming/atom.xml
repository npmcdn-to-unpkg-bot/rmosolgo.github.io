<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Robert Mosolgo]]></title>
  <link href="http://rmosolgo.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://rmosolgo.github.io/"/>
  <updated>2016-03-03T10:29:00-05:00</updated>
  <id>http://rmosolgo.github.io/</id>
  <author>
    <name><![CDATA[Robert Mosolgo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How many assertions per test case?]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/10/08/how-many-assertions-per-test-case/"/>
    <updated>2015-10-08T21:12:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/10/08/how-many-assertions-per-test-case</id>
    <content type="html"><![CDATA[<p>This question is too hard. Instead, ask, &ldquo;how many behaviors per test case?&rdquo; and answer, &ldquo;one.&rdquo;</p>

<!-- more -->


<p>I presented at Full Stack about unit testing but what I really like is behavior-driven development.</p>

<h2>A Behavior</h2>

<p>You can think of a code base as a collection of behaviors: given some inputs (data, events), it makes some outputs (more data, more events). In this perspective, the code itself is an implementation detail. As long as it takes the inputs and creates the outputs, it makes little difference what classes, methods, functions etc, implement that behavior.</p>

<p>This kind of thinking is recursive: each behavior is composed of smaller behaviors. For example, in a web application:</p>

<p>```
Behavior:
  &ndash; A request with a valid username &amp; password is allowed to take Action X</p>

<pre><code>Is composed of:
  - The user info is stored in the session
  - The user's `last_logged_in_at` is updated
  - Value Y is written to the database
</code></pre>

<p>```</p>

<p>Each subsequent level of behavior may have an implementation of its own.</p>

<h2>Testing a behavior</h2>

<p>In a web application, unauthorized requests:</p>

<ul>
<li>Return meaningful HTTP responses, including a status and a body; and</li>
<li>do not execute the requested action</li>
</ul>


<p>I would specify that as two <em>behaviors</em>:</p>

<p>```ruby
describe &ldquo;an unauthorized request&rdquo; do
  it &ldquo;responds as not authorized&rdquo; do</p>

<pre><code>http_response = make_create_request # makes a unauthorized_request
assert_equal(403, http_response.status)
assert_equal("Not Authorized", http_response.body)
</code></pre>

<p>  end</p>

<p>  it &ldquo;doesn&rsquo;t write to the database&rdquo; do</p>

<pre><code>http_response = make_create_request # makes a unauthorized_request
assert_equal(0, Posts.count)
</code></pre>

<p>  end<br/>
end
```</p>

<p>(using <a href="https://github.com/seattlerb/minitest#specs">minitest/spec</a>)</p>

<p>Notice that the first test made <em>two</em> assertions. You could split that into three test cases but I don&rsquo;t think it&rsquo;s worth the trouble. What&rsquo;s the case where <code>403</code> and <code>"Not Authorized"</code> are not part of the same behavior?</p>

<h2>Multiple Assertions is a Code Smell</h2>

<p>If your test case has many assertions, your code may be telling you that you&rsquo;re specifying multiple behaviors at once. Ask yourself:</p>

<ul>
<li>Is there a smaller unit of work to extract?</li>
<li>Can I make this a two-step process, where step one&rsquo;s result is passed to step two?</li>
<li>Can I break each test case (and its corresponding code) into a distinct <a href="http://c2.com/cgi/wiki?StrategyPattern">strategy</a>?</li>
<li>Am I testing business logic <em>and</em> interaction with an external service (eg, your database or an HTTP service)? Can I separate the two actions?</li>
<li>Am I transforming data, then acting based on the result? Can I separate those two?</li>
<li>Are there assertions that are shared between multiple test cases? Is there an underlying behavior there?</li>
</ul>


<h2>Other People on The Internet</h2>

<p>Here&rsquo;s some more dignified reading on the topic:</p>

<ul>
<li><strong><a href="http://dannorth.net/introducing-bdd/">&ldquo;Introducing BDD,&rdquo; Dan North</a></strong>. I especially agree with his point that behavior-driving thinking helps you focus your design and implementation.</li>
<li><strong><a href="http://blog.jayfields.com/2007/06/testing-one-assertion-per-test.html">&ldquo;Testing One Assertion Per Test,&rdquo; Jay Fields</a></strong>. I basically agree with him: &ldquo;Tests that focus on one behavior of the system are almost always easier to write and to comprehend at a later date.&rdquo; But I disagree with his assumption that one behavior equals one assertion.</li>
<li><strong><a href="http://programmers.stackexchange.com/a/7829">&ldquo;Is it OK to have multiple asserts in a single unit test?&rdquo;, random Stack Overflow people</a></strong>. &ldquo;Yeah, but try not to.&rdquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crystal First Impressions]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/09/27/crystal-first-impressions/"/>
    <updated>2015-09-27T21:47:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/09/27/crystal-first-impressions</id>
    <content type="html"><![CDATA[<p>The <a href="http://crystal-lang.org/">Crystal programming language</a> combines Ruby-like syntax with a really powerful compiler. As a result, it&rsquo;s fun to write, fast to run, and hard to screw up!</p>

<!-- more -->


<p>My Crystal experience so far:</p>

<ul>
<li><a href="https://github.com/danott">danott</a> mentioned it in our Slack a few weeks ago</li>
<li>I read the great <a href="http://crystal-lang.org/docs/">Crystal docs</a></li>
<li>I cobbled together <a href="https://github.com/rmosolgo/crythtal">a lisp (barely)</a></li>
</ul>


<p>I&rsquo;d say it&rsquo;s a combination of:</p>

<ul>
<li>a more-stable-Ruby (like Elixir, but without Erlang)</li>
<li>a developer-friendly, life-embetter-ing type system (like Elm, but &hellip; not JavaScript)</li>
<li>a real compiler! (like C, but fun to read and write)</li>
</ul>


<p>Um, what else could you want?! (See last paragraph üòõ)</p>

<h2>Crystal Syntax</h2>

<p>Crystal brings the best of Ruby:</p>

<ul>
<li><strong>Concise literals</strong>, just like Ruby (take it for granted until you use regexps in Python üôÄ)</li>
<li><strong>Great OO support</strong>, classes &amp; modules just like Ruby</li>
<li><strong>Attractive syntax</strong> thanks to blocks, operator overloading and optional parens</li>
<li><strong>consistent</strong>, predictable standard library (like Ruby)</li>
</ul>


<p>Plus, some improvements over Ruby:</p>

<ul>
<li><strong>Method overloading</strong></li>
<li>Python-like <strong>keyword args</strong>: must have default value, may be passed as kwargs or positional args (I could go either way on this since Ruby 2.1, but it beats <code>options={}</code>)</li>
<li>More robust <strong>Proc literals</strong>, reminded me of Elixir</li>
<li>Convention: <strong><code>?</code> methods return maybe-nil types</strong>, while their counterparts raise on nil</li>
<li>First-class <strong>enums</strong> &amp; <strong>tuples</strong></li>
<li><strong>Immutable strings</strong>, like Ruby 3 will have (?)</li>
</ul>


<p>For completeness, you lose some things from Ruby:</p>

<ul>
<li>Runtime <strong>code creation</strong>, like <code>define_method</code> &amp; friends</li>
<li>Runtime <strong>code evaluation</strong>, like <code>eval</code> &amp; friends</li>
</ul>


<p>Crystal offers a powerful <strong>macro system</strong> that makes up for the loss of runtime metaprogramming. Unlike C preprossing, Crystal macros are awesome. You basically define functions which are called at compile-time, then generate code with liquid-like syntax.</p>

<h2>Crystal Typing</h2>

<h3>Inferring Types</h3>

<p>Crystal infers types from your code, so these are OK:</p>

<p>```ruby
my_string = &ldquo;Hello World&rdquo;</p>

<h1>String</h1>

<p>my_hash = {key: &ldquo;value&rdquo;, key2: &ldquo;value2&rdquo;}</p>

<h1>Hash(Symbol, String)</h1>

<p>my_array = [1,2,3]</p>

<h1>Array(Int32)</h1>

<p>```</p>

<p>When types mix, Crystal automatically unions them. It will ensure any usages of the variable in question are valid for both types. For example:</p>

<p>```ruby
my_variable = &ldquo;string&rdquo;
my_variable = 1</p>

<h1>String | Int32</h1>

<h1>Ok, because String &amp; Int32 both implement #to_f</h1>

<p>my_variable.to_f</p>

<h1>You can add runtime checks to call type-specific methods</h1>

<p>if my_variable.is_a?(String)
  my_variable.upcase
end
```</p>

<p>There are some times you need to define types to help the compiler. For example, there aren&rsquo;t any values here to tell the compiler what to expect:</p>

<p>```ruby
some_array =  [] of Int32</p>

<h1>You can use custom types, too</h1>

<p>some_hash =   {} of Symbol => SomeCustomClass
```</p>

<h3>Goodbye, NoMethodErrors</h3>

<p>If you&rsquo;re like me, you hate this:</p>

<p><code>
undefined method `whatever' for nil:NilClass
</code></p>

<p>Something somehow became nil. üò¢</p>

<p>Instead, Crystal reads your code, and if there&rsquo;s somewhere a value could be nil, it throws a compile error:</p>

<p>```
in ./src/lisp/binding.cr:55: undefined method &lsquo;find_owner&rsquo; for Nil</p>

<pre><code>  @parent.find_owner(key)
          ^~~~~~~~~~
</code></pre>

<p>```</p>

<p>You have two options:</p>

<ul>
<li>Add an explicit not-nil check (<code>if object.is_a?(String) ...</code>) so the compiler knows it will be safe</li>
<li>Refactor so the value won&rsquo;t be nil</li>
</ul>


<p>Of course, the first one seems better at the start, but I hope to get better at the second one üòÅ.</p>

<h2>What&rsquo;s Missing?</h2>

<p>Crystal really shows its youth. Its shortcomings all fall in that vein:</p>

<ul>
<li><strong>Poorly documented</strong>, which isn&rsquo;t so bad if you&rsquo;re coming from Ruby</li>
<li><strong>Few projects</strong> out there (I think the <a href="http://crystalshards.herokuapp.com/">package repository is a free Heroku app</a>)</li>
<li>Standard library has <strong>some kinks</strong>, they say it is still changing</li>
</ul>


<p>One example of a standard library kink is the handling of <code>break</code>, <code>next</code> and <code>return</code> in blocks. If you want to exit a block early, you have to choose one of those three. The problem is that, to choose the right one, you have to know whether the method captures the block into a proc or simply yields values to it. It&rsquo;s a drag to have to know a method&rsquo;s implementation to call it! (IRL, I didn&rsquo;t run into this and I suspect it would be easy enough to work around it.)</p>

<h2>Now What?</h2>

<p>I really liked Crystal and I hope I can work with it more!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Response to "Using a Ruby Class to Write Functional Code"]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/03/15/response-to-using-a-ruby-class-to-write-functional-code/"/>
    <updated>2015-03-15T14:29:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/03/15/response-to-using-a-ruby-class-to-write-functional-code</id>
    <content type="html"><![CDATA[<p>Pat Shaughnessy&rsquo;s <a href="http://patshaughnessy.net/2014/4/8/using-a-ruby-class-to-write-functional-code">&ldquo;Using a Ruby Class to Write Functional Code&rdquo;</a> gives an example of bringing functional programming principles into object-oriented design. I like it.</p>

<!-- more -->


<p>It Pat&rsquo;s example, he turns a group of pure functions into a class whose state is <em>immutable-ish</em> (they technically could be changed, but they aren&rsquo;t) &amp; whose methods are <em>pure-ish</em> (they read from internal state, too). He says:</p>

<blockquote><p>You‚Äôve broken the rules and rewritten your pure, functional program in a more idiomatic, Ruby manner. However, you haven‚Äôt lost the spirit of functional programming. Your code is just as easy to understand, maintain and test.</p></blockquote>

<p><a href="http://patshaughnessy.net/2014/4/8/using-a-ruby-class-to-write-functional-code#comment-1331596525">One commenter</a> goes further:</p>

<blockquote><p>I think you do not break the rules of FP by relying on <code>@line</code> and <code>@values</code>. <code>@line</code> is just partially applying a parameter to the &ldquo;functions&rdquo; of Line and currification is a usual techique in FP. <code>@values</code> is memoizing the result of a function which also comes from FP.</p></blockquote>

<p>There were a few ideas that jumped out at me.</p>

<h2>&ldquo;No Side-effects&rdquo; = Clarity at the Call Site</h2>

<p>Functions that don&rsquo;t modify their arguments are often easier to use. Their usage <em>reveals intent</em>.</p>

<p>Which do you prefer:</p>

<p>```ruby
def exclaim_1(statement)
  # modify the argument
  statement &lt;&lt; &ldquo;!!!&rdquo;
  return nil
end</p>

<p>wow = &ldquo;Wow&rdquo;
exclaim_1(wow)  # => nil
wow             # => &ldquo;Wow!!!&rdquo;
```</p>

<p>or:</p>

<p>```ruby
def exclaim_2(statement)
  # make a new string
  return statement + &ldquo;!!!&rdquo;
end</p>

<p>wow = &ldquo;Wow&rdquo;
such_wow = exclaim_2(wow) # => &ldquo;Wow!!!&rdquo;
wow                       # => &ldquo;Wow&rdquo;
such_wow                  # => &ldquo;Wow!!!&rdquo;
```</p>

<p>In the first case, if you didn&rsquo;t have the output in front of you, you wouldn&rsquo;t know what <code>exclaim_1</code> did. You&rsquo;d have to find the file and read the method body to know its purpose.</p>

<p>In the second case, it&rsquo;s obvious at the call site that the function returns a new, significant value. (Otherwise, why would the developer have captured in a new variable?)</p>

<h2>Think of <code>self</code> as an Argument</h2>

<p>You can extend the benefit of call site clarity to an object&rsquo;s internal state, too.</p>

<p>The commenter mentions that &ldquo;<code>@line</code> is like a parameter&rdquo; to the class&rsquo;s methods. Although it <em>isn&rsquo;t</em> part of the method signature, it has some parameter-like properties. It is:</p>

<ul>
<li>A value which affects the output</li>
<li>Unchanged by the function</li>
</ul>


<p>What if you <em>always</em> treated <code>self</code> like that? I mean, you didn&rsquo;t modify it inside method bodies, you treated it as read-only (as often as possible).</p>

<p>Python really invites you to think of <code>self</code> as a parameter of the function. It&rsquo;s actually part of the method signature:</p>

<p>```python
class Something():
  def some_method(self, arg_1, arg2):</p>

<pre><code>self # =&gt; the instance
return "whatever"
</code></pre>

<p>```</p>

<p>In fact, PyCharm will even complain if you modify <code>self</code> during a method:</p>

<p><img src="/images/pycharm_ivar.png" width="500"></p>

<p>(In reality, <code>self</code> <em>is</em> an argument in any language runtime that I ever heard of &hellip; we just tend not to think of it that way!)</p>

<h2>What Gives?</h2>

<p>I spend most of my time <em>maintaining</em> software and FP pays off big time in that regard:</p>

<ul>
<li><strong>Tests are more reliable</strong> for pure functions: if the function yields the correct output with those inputs today, it will <em>always</em> yield the correct output with those inputs.</li>
<li>Pure functions are <strong>easy to understand</strong>: the only factors are the inputs and there&rsquo;s no muddling from outside universe. Knowledge of the function body is sufficent to understand the function.</li>
<li>Pure functions must be <strong>decoupled</strong>. The only touch the world via <em>inputs</em> and <em>outputs</em> so they can&rsquo;t depend on anything else.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Move ActiveRecord Scopes into Separate Files]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/03/12/move-activerecord-scopes-into-separate-files/"/>
    <updated>2015-03-12T08:14:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/03/12/move-activerecord-scopes-into-separate-files</id>
    <content type="html"><![CDATA[<p>Ruby on Rails models tend to grow and grow. When refactoring scopes, it turns out you <em>can</em> move them into their own classes.</p>

<!-- more -->


<h2>The Problem</h2>

<p>Rails models can get out of hand. Over time they get more associations, more methods, more everything. The resulting huge API and visual clutter makes those classes hard to maintain.</p>

<p>Consider these scopes:</p>

<p>```ruby
class CheckIn &lt; ActiveRecord::Base
  scope :normal, &ndash;> { where(kind: &ldquo;Regular&rdquo;) }
  scope :guest, &ndash;> { where(kind: &ldquo;Guest&rdquo;) }
  scope :volunteer, &ndash;> { where(kind: &ldquo;Volunteer&rdquo;) }
  scope :first_time, &ndash;> {</p>

<pre><code>joins(%{
  INNER JOIN person_events
    ON  person_events.person_id =         check_ins.person_id
    AND person_events.event_id =          check_ins.event_id
    AND person_events.first_check_in_id = check_ins.id
    })
</code></pre>

<p>  }
end
```</p>

<h2>How do we usually address this?</h2>

<p>For me, refactoring often means finding related methods &amp; values that deserve their own class, then moving code out of the model and into the new class. For example:</p>

<ul>
<li>moving complex validations into <a href="http://api.rubyonrails.org/classes/ActiveModel/Validator.html">validator classes</a></li>
<li>moving complex serialization into serializer classes (I do this with serialization to <em>English</em>, too, not just JSON)</li>
<li>moving complex calculations into value classes.</li>
</ul>


<p>Whenever I&rsquo;m trying to move code out of a model, I visit Code Climate&rsquo;s <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">great post on the topic</a>.</p>

<p>However, <em>scopes</em> are never on the list. What can we do with those?</p>

<h2>Digging In</h2>

<p>I poked around Rails source a bit to see if there were any other options available to me.</p>

<p>I found that the <code>body</code> passed to <code>ActiveRecord::Base.scope</code> just has to <a href="https://github.com/rails/rails/blob/5e0b555b453ea2ca36986c111512627d806101e7/activerecord/lib/active_record/scoping/named.rb#L149">respond to <code>:call</code></a>. I guess that&rsquo;s why lambdas are a shoo-in for that purpose: they respond to <code>:call</code> and aren&rsquo;t picky about arguments.</p>

<p>The other thing I found is that the lambdas you usually pass to <code>scope</code> <em>aren&rsquo;t magical</em>. I always assumed that they were <code>instance_eval</code>&rsquo;d against other objects at whatever other times, but as far as I can tell, they aren&rsquo;t magical. <code>self</code> is always the model class (from lexical scope), just like any other lambda.</p>

<p>Instead, the magic is a combination of Rails' <a href="https://github.com/rails/rails/blob/5e0b555b453ea2ca36986c111512627d806101e7/activerecord/lib/active_record/scoping.rb#L57">thread-aware <code>ScopeRegistry</code></a> which tracks the scope for a given class, combined with <a href="https://github.com/rails/rails/blob/ce32ff462f3ba89c87f337f9150b3976d23220e8/activerecord/lib/active_record/relation.rb#L319"><code>Association#scoping</code></a>, which I don&rsquo;t understand. :)</p>

<h2>Moving Scopes from Lambda to Class</h2>

<p>You can make a class that complies to the required API. Make calls on the model class (<code>CheckIn</code>, in my case), which is usually <code>self</code> in a <code>scope</code> lambda.</p>

<p>```ruby</p>

<h1>app/models/check_in/scopes/latest.rb</h1>

<p>class CheckIn::Scopes::Latest
  def call</p>

<pre><code>CheckIn.where("check_ins.id IN (SELECT max(id) FROM check_ins GROUP BY check_ins.person_id)")
</code></pre>

<p>  end
end
```</p>

<p>Then, hook up the scope in the model definition:</p>

<p><code>ruby
class CheckIn &lt; ActiveRecord::Base
  scope :latest, Scopes::Latest.new
end
</code></p>

<p>Since it&rsquo;s just a plain ol' class, you can give it <strong>other methods</strong> too:</p>

<p>```ruby</p>

<h1>app/models/check_in/scopes/latest.rb</h1>

<p>class CheckIn::Scopes::Latest
  def call</p>

<pre><code>CheckIn.where(query_string)
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def query_string</p>

<pre><code>"check_ins.id IN (SELECT max(id) FROM check_ins GROUP BY check_ins.person_id)"
</code></pre>

<p>  end
end
```</p>

<p>You can also <strong>initialize it</strong> with some data:</p>

<p><code>ruby
class CheckIn &lt; ActiveRecord::Base
  scope :normal,          Scopes::KindScope.new("Regular")
  scope :guest,           Scopes::KindScope.new("Guest")
  scope :volunteer,       Scopes::KindScope.new("Volunteer")
end
</code></p>

<h2>Any Benefit?</h2>

<p>Here&rsquo;s what I think:</p>

<p><strong>Pros:</strong></p>

<ul>
<li>Less visual noise.</li>
<li>Your model still reads like a table of contents.</li>
<li>Theoretically, you could test the scope in isolation (but I&rsquo;m too lazy, if the existing tests still pass, that&rsquo;s good enough for me :P).</li>
</ul>


<p><strong>Cons:</strong></p>

<ul>
<li>If the scope takes arguments, you can&rsquo;t tell right away.</li>
<li>It doesn&rsquo;t <em>actually</em> shrink the class&rsquo;s API: it&rsquo;s still a big ol' model.</li>
<li>It&rsquo;s not a known Rails practice.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building up vs Building out]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/03/11/building-up-vs-building-out/"/>
    <updated>2015-03-11T13:27:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/03/11/building-up-vs-building-out</id>
    <content type="html"><![CDATA[<p>While adding a big feature to <a href="http://get.planningcenteronline.com/check-ins">PCO Check-Ins</a>, I was struck with this way of describing my approach to adding complexity to the system.</p>

<!-- more -->


<p>Suppose you&rsquo;re given the task: &ldquo;Our system only handles data of type <em>X</em>, it also needs to handle data of type <em>Y</em>. Everywhere.&rdquo; All over the program, you need to check what kind of data you have, then choose to handle it the old way or handle it the new way.</p>

<p>Your program has one entry point and renders views outputs:</p>

<p><code>
‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ+‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ
‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ|‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ
‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ|‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ
+----+----+
|‚Äâ‚Äâ‚Äâ‚Äâ|‚Äâ‚Äâ‚Äâ‚Äâ|
|‚Äâ‚Äâ‚Äâ‚Äâ|‚Äâ‚Äâ‚Äâ‚Äâ|
+‚Äâ‚Äâ‚Äâ‚Äâ+‚Äâ‚Äâ‚Äâ‚Äâ+
A    B    C
</code></p>

<h2>Building Up</h2>

<p>One way to address this problem is to find everywhere you handle data type <em>X</em>, then extend it to handle type <em>Y</em>:</p>

<p><code>ruby
if data.type_X?
  # handle data type X
else
  # handle data type Y
end
</code></p>

<p>Your code paths now look like this:</p>

<p><code>
‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ+‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ
‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ|‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ
‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ|‚Äâ
‚Äâ‚Äâ+------+------+
‚Äâ‚Äâ|      |      |
‚Äâ‚Äâ|      |      |
+-+-+  +-+-+  +-+-+  &lt;- check for type X or type Y
|   |  |   |  |   |
+   +  +   +  +   +
A1  A2 B1  B2 C1  C2
</code></p>

<p>Your tree is deeper than it was. You slapped some complexity &ldquo;on top&rdquo; of the existing code.</p>

<h2>Building Out</h2>

<p>Another approach would be to implement a parallel set of views for rendering the new data. Your existing views don&rsquo;t change. Instead you add three new views:</p>

<p><code>
‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ+
‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ|
‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ|
+--+--+--+--+--+--+
|  |  |     |  |  |
|  |  |     |  |  |
+  +  +     +  +  +
A  B  C     D  E  F
</code></p>

<p>Your program has grown &ldquo;out&rdquo;. It has more objects, but each one is doing a small job.</p>

<p>This way, your existing views stay simple. The new views can be equally simple. Hopefully, recycled code can be shared between views!</p>

<h2>In Rails</h2>

<p>Rather than adding <code>if</code>s in controller actions, add a new controller. Maybe it renders the same kind of objects as the existing controller &mdash; that&rsquo;s OK! It&rsquo;s worth it to add the extra controllers &amp; actions to keep the code paths simple.</p>
]]></content>
  </entry>
  
</feed>
