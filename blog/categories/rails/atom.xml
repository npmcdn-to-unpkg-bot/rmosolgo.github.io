<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Robert Mosolgo]]></title>
  <link href="http://rmosolgo.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://rmosolgo.github.io/"/>
  <updated>2016-05-19T22:31:16-04:00</updated>
  <id>http://rmosolgo.github.io/</id>
  <author>
    <name><![CDATA[Robert Mosolgo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Finding a Browser-Ready File for Sprockets]]></title>
    <link href="http://rmosolgo.github.io/blog/2016/05/19/finding-a-browser-ready-file-for-sprockets/"/>
    <updated>2016-05-19T22:00:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2016/05/19/finding-a-browser-ready-file-for-sprockets</id>
    <content type="html"><![CDATA[<p>I like using Sprockets, but sometimes it&rsquo;s hard to find a file to include in the asset pipeline. Here are some methods I use to find browser-ready JavaScript files.</p>

<!-- more -->


<p>There are a few good options for getting browser-ready files for JavaScript libraries:</p>

<ul>
<li>Download a file from the project&rsquo;s website</li>
<li>Download a file from the project&rsquo;s source code repository</li>
<li>Download a file from a CDN (npmcdn is great for cases where files are only &ldquo;compiled&rdquo; for releases)</li>
<li>Build the file yourself, following the project&rsquo;s documentation</li>
</ul>


<p><strong>Don&rsquo;t</strong> get a minified version. Sprockets will minify it for us later. In the meantime, the unminified version will help us during development.</p>

<h3>From a Website</h3>

<p>This is the good ol' way of getting JavaScript files. Because we still use browsers, you can still download these files.</p>

<p>Here are some examples:</p>

<p><img src="/images/sprockets/website_download_d3.png" width="300"></p>

<p><img src="/images/sprockets/website_download_react.png" width="500"></p>

<p><img src="/images/sprockets/website_download_moment.png" width="300"></p>

<h3>From the Repo</h3>

<p>Many projects maintain a browser build in the project&rsquo;s source. You may have to poke around a bit, but likely places are the project&rsquo;s root folder, the <code>dist/</code> folder, or the <code>build/</code> folder.</p>

<p>As you explore the repo, remember to examine a stable ref, such as a release or a stable branch.</p>

<p>Here are some examples:</p>

<p><img src="/images/sprockets/repo_download_c3.png" width="300"></p>

<p><img src="/images/sprockets/repo_download_immutable.png" width="300"></p>

<p><img src="/images/sprockets/repo_download_three.png" width="300"></p>

<h3>From a CDN</h3>

<p><a href="https://cdnjs.com/libraries">CDNJS</a> hosts browser-ready files for many libraries.</p>

<p>Sometimes, an author only compiles browser-ready files for releases to NPM. You can get these files from <a href="https://npmcdn.com/">npmcdn</a>.</p>

<p>Since npmcdn is serving NodeJS projects, employ a similar technique to searching the project repo for a file:</p>

<ul>
<li>Check the &ldquo;main&rdquo; file</li>
<li>Check the &ldquo;dist&rdquo; or &ldquo;build&rdquo; directories</li>
</ul>


<h3>Build it from Source</h3>

<p>If a pre-built, browser-ready file is not available, you may have to build it yourself! The project&rsquo;s readme will contain instructions to do so. If it doesn&rsquo;t &hellip; you may want to reconsider adding this dependency! (Even if it&rsquo;s well-maintained, it&rsquo;s not a good match for this asset bundling approach.)</p>

<h2>Summary</h2>

<p>Hopefully these will work well for you!</p>

<p>You may have to learn a bit of RequireJS, jspm, Grunt, Browserify, Gulp, Webpack or Rollup along the way. (Ok, probably not Rollup, sadly.) But at least you don&rsquo;t have to use them day-in and day-out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Use Sprockets]]></title>
    <link href="http://rmosolgo.github.io/blog/2016/05/19/how-i-use-sprockets/"/>
    <updated>2016-05-19T08:44:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2016/05/19/how-i-use-sprockets</id>
    <content type="html"><![CDATA[<p>When reviewing issues for <code>react-rails</code>, I see many questions about how to gather JavaScript dependencies with Sprockets. Here is how I use Sprockets to manage JavaScript dependencies.</p>

<!-- more -->


<p>I&rsquo;m looking for a few things in a JavaScript bundler:</p>

<ul>
<li>Stability: I don&rsquo;t want any changes to my dependencies unless I explicitly make them.</li>
<li>Clarity: I want to be able to quickly tell what dependencies I have (library and version).</li>
<li>Insulation: I don&rsquo;t want to rely on external services during development, deployment or runtime (except for downloading <em>new</em> dependencies, of course)</li>
<li>Feature-completeness: I want to concatenate and minify my assets and serve them with cache headers</li>
</ul>


<h2>Using Sprockets</h2>

<p>To <strong>add a new dependency</strong>:</p>

<ol>
<li>Find a non-minified, browser-ready version of your dependency</li>
<li>Add it to <code>app/assets/javascripts/vendor/{library-name}-v{version-number}.js</code> (for example, <code>app/assets/javascripts/moment-v2.13.0.js</code>)</li>
<li>Require it in <code>application.js</code> with <code>//= require ./vendor/moment-v2.13.0</code></li>
<li>Access the global variable as needed in your app (eg <code>moment</code>)</li>
</ol>


<p>To <strong>update</strong> a dependency:</p>

<ol>
<li>Find a non-minified, browser-ready version of the updated dependency</li>
<li>Add it to <code>app/assets/javascripts/vendor/{library-name}-v{version-number}.js</code> and remove the <em>old</em> version from that directory</li>
<li>Update the <code>//= require</code> directive with the new version number</li>
<li>Check the dependency&rsquo;s changelog and update your app as needed. (Search your project for the global variable to find usages, eg <code>moment</code>.)</li>
</ol>


<p>To <strong>remove</strong> a dependency:</p>

<ol>
<li>Remove its file (<code>app/assets/javascripts/vendor/{library-name}-v{version-number}.js</code>)</li>
<li>Remove the <code>//= require</code> directive</li>
<li>Search your project for the global variable and remove all usages</li>
</ol>


<h2>Finding a browser-ready file</h2>

<p>This got its own page: <a href="/blog/2016/05/19/finding-a-browser-ready-file-for-sprockets/">Finding a browser-ready file</a>.</p>

<h2>Adding the file to <code>vendor/</code></h2>

<p>Use an <strong>unminified</strong> version of the library. It will help in debugging development and viewing diffs when you update the dependency. Have no fear, Sprockets will minify it for you for production.</p>

<p>Include the <strong>version number</strong> in the file name. This will give you more confidence in updating the library, since you&rsquo;ll know what version you&rsquo;re coming from.</p>

<h2>Integrating with Sprockets</h2>

<p>The <code>//= require ./vendor/{library}-v{version}</code> directive is your friend. Like an entry in <code>package.json</code>, it tells the reader what dependency you have.</p>

<p>Now, your library will be accessible by its global name, such as <code>React</code>, <code>d3</code> or <code>Immutable</code>.</p>

<p>Consuming a library via global variable is not ideal. But it <em>does</em> help you remember that, at the end of the day, the browser is one giant, mutable namespace, so you must be a good citizen! At least global variables can be grepped like any other dependency.</p>

<p>Consider isolating your dependency. For example, you could wrap <code>Pusher</code> in an application-specific event emitter. This way, when you update Pusher, you only have to check one file for its usages. (Some libraries are poor candidates for isolation. My app will never be isolated from React!)</p>

<h2>Caveats</h2>

<p>There are some things Sprockets doesn&rsquo;t provide for me, which I wish it did:</p>

<ul>
<li>Named imports: I wish there was a good alternative to global namespacing with Sprockets, but not yet. (It&rsquo;s not a deal breaker &mdash; it doesn&rsquo;t hurt to be familiar with this constraint because it&rsquo;s the reality of the browser, anyways.)</li>
<li>Tree shaking: It wish I could only transmit the parts of Underscore.js I actually used!</li>
</ul>


<p>Perhaps I should read up on Sprockets and submit a patch ðŸ˜Ž</p>

<p>Also, there&rsquo;s one case where copy-pasting isn&rsquo;t a great solution. Some libraries (like React.js) have <em>separate</em> &ldquo;development&rdquo; and &ldquo;production&rdquo; builds. The production build has fewer runtime checks than the development build, making it smaller and faster. There are a few solutions to this problem:</p>

<ul>
<li>Use a gem which provides the proper file for each environment (like <code>react-rails</code>)</li>
<li>Add environment-specific folders to the asset pipeline (like <code>react-rails</code> does, I can write more on this if need be)</li>
<li>Use the development build in productiosn (weigh the costs first: what&rsquo;s the difference in behavior, performance and file size?)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Move ActiveRecord Scopes into Separate Files]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/03/12/move-activerecord-scopes-into-separate-files/"/>
    <updated>2015-03-12T08:14:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/03/12/move-activerecord-scopes-into-separate-files</id>
    <content type="html"><![CDATA[<p>Ruby on Rails models tend to grow and grow. When refactoring scopes, it turns out you <em>can</em> move them into their own classes.</p>

<!-- more -->


<h2>The Problem</h2>

<p>Rails models can get out of hand. Over time they get more associations, more methods, more everything. The resulting huge API and visual clutter makes those classes hard to maintain.</p>

<p>Consider these scopes:</p>

<p>```ruby
class CheckIn &lt; ActiveRecord::Base
  scope :normal, &ndash;> { where(kind: &ldquo;Regular&rdquo;) }
  scope :guest, &ndash;> { where(kind: &ldquo;Guest&rdquo;) }
  scope :volunteer, &ndash;> { where(kind: &ldquo;Volunteer&rdquo;) }
  scope :first_time, &ndash;> {</p>

<pre><code>joins(%{
  INNER JOIN person_events
    ON  person_events.person_id =         check_ins.person_id
    AND person_events.event_id =          check_ins.event_id
    AND person_events.first_check_in_id = check_ins.id
    })
</code></pre>

<p>  }
end
```</p>

<h2>How do we usually address this?</h2>

<p>For me, refactoring often means finding related methods &amp; values that deserve their own class, then moving code out of the model and into the new class. For example:</p>

<ul>
<li>moving complex validations into <a href="http://api.rubyonrails.org/classes/ActiveModel/Validator.html">validator classes</a></li>
<li>moving complex serialization into serializer classes (I do this with serialization to <em>English</em>, too, not just JSON)</li>
<li>moving complex calculations into value classes.</li>
</ul>


<p>Whenever I&rsquo;m trying to move code out of a model, I visit Code Climate&rsquo;s <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">great post on the topic</a>.</p>

<p>However, <em>scopes</em> are never on the list. What can we do with those?</p>

<h2>Digging In</h2>

<p>I poked around Rails source a bit to see if there were any other options available to me.</p>

<p>I found that the <code>body</code> passed to <code>ActiveRecord::Base.scope</code> just has to <a href="https://github.com/rails/rails/blob/5e0b555b453ea2ca36986c111512627d806101e7/activerecord/lib/active_record/scoping/named.rb#L149">respond to <code>:call</code></a>. I guess that&rsquo;s why lambdas are a shoo-in for that purpose: they respond to <code>:call</code> and aren&rsquo;t picky about arguments.</p>

<p>The other thing I found is that the lambdas you usually pass to <code>scope</code> <em>aren&rsquo;t magical</em>. I always assumed that they were <code>instance_eval</code>&rsquo;d against other objects at whatever other times, but as far as I can tell, they aren&rsquo;t magical. <code>self</code> is always the model class (from lexical scope), just like any other lambda.</p>

<p>Instead, the magic is a combination of Rails' <a href="https://github.com/rails/rails/blob/5e0b555b453ea2ca36986c111512627d806101e7/activerecord/lib/active_record/scoping.rb#L57">thread-aware <code>ScopeRegistry</code></a> which tracks the scope for a given class, combined with <a href="https://github.com/rails/rails/blob/ce32ff462f3ba89c87f337f9150b3976d23220e8/activerecord/lib/active_record/relation.rb#L319"><code>Association#scoping</code></a>, which I don&rsquo;t understand. :)</p>

<h2>Moving Scopes from Lambda to Class</h2>

<p>You can make a class that complies to the required API. Make calls on the model class (<code>CheckIn</code>, in my case), which is usually <code>self</code> in a <code>scope</code> lambda.</p>

<p>```ruby</p>

<h1>app/models/check_in/scopes/latest.rb</h1>

<p>class CheckIn::Scopes::Latest
  def call</p>

<pre><code>CheckIn.where("check_ins.id IN (SELECT max(id) FROM check_ins GROUP BY check_ins.person_id)")
</code></pre>

<p>  end
end
```</p>

<p>Then, hook up the scope in the model definition:</p>

<p><code>ruby
class CheckIn &lt; ActiveRecord::Base
  scope :latest, Scopes::Latest.new
end
</code></p>

<p>Since it&rsquo;s just a plain ol' class, you can give it <strong>other methods</strong> too:</p>

<p>```ruby</p>

<h1>app/models/check_in/scopes/latest.rb</h1>

<p>class CheckIn::Scopes::Latest
  def call</p>

<pre><code>CheckIn.where(query_string)
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def query_string</p>

<pre><code>"check_ins.id IN (SELECT max(id) FROM check_ins GROUP BY check_ins.person_id)"
</code></pre>

<p>  end
end
```</p>

<p>You can also <strong>initialize it</strong> with some data:</p>

<p><code>ruby
class CheckIn &lt; ActiveRecord::Base
  scope :normal,          Scopes::KindScope.new("Regular")
  scope :guest,           Scopes::KindScope.new("Guest")
  scope :volunteer,       Scopes::KindScope.new("Volunteer")
end
</code></p>

<h2>Any Benefit?</h2>

<p>Here&rsquo;s what I think:</p>

<p><strong>Pros:</strong></p>

<ul>
<li>Less visual noise.</li>
<li>Your model still reads like a table of contents.</li>
<li>Theoretically, you could test the scope in isolation (but I&rsquo;m too lazy, if the existing tests still pass, that&rsquo;s good enough for me :P).</li>
</ul>


<p><strong>Cons:</strong></p>

<ul>
<li>If the scope takes arguments, you can&rsquo;t tell right away.</li>
<li>It doesn&rsquo;t <em>actually</em> shrink the class&rsquo;s API: it&rsquo;s still a big ol' model.</li>
<li>It&rsquo;s not a known Rails practice.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Refactoring by Keeping ApplicationController to a Minimum]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/01/17/happy-refactoring-by-keeping-applicationcontroller-to-a-minimum/"/>
    <updated>2015-01-17T10:24:00-05:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/01/17/happy-refactoring-by-keeping-applicationcontroller-to-a-minimum</id>
    <content type="html"><![CDATA[<p>Extending <code>ActionController::Base</code> <em>once</em>, in <code>ApplicationController</code>, is a great Ruby on Rails practice. However, if <code>ApplicationController</code> is your only abstract controller, it&rsquo;s likely to become a maintenance challenge. To avoid this, you should extend <code>ApplicationController</code> as needed and move as much code as possible into its subclasses.</p>

<!-- more -->


<h2>Feeling ApplicationController Pain</h2>

<p>So, our app is live. We&rsquo;ve dutily extended <code>ApplicationController</code> in all our other controllers, giving us an inheritance tree like this:</p>

<p><img src="/images/controller_inheritance_bad.png" width="500" height="500"></p>

<p>Fortunately, our app is a success and our customers want us to open an API. Let&rsquo;s use <code>API::BaseController</code> as the superclass of all our API controllers:</p>

<p><img src="/images/controller_inheritance_bad_with_api.png" width="500" height="500"></p>

<p>As our user base grows, we need a more robust permissions system. We tighten up restrictions:</p>

<p><code>ruby
class ApplicationController &lt; ActionController::Base
  before_action :authenticate!
end
</code></p>

<p>Since some actions are public, we skip the restrictions:</p>

<p>```ruby
class ReportsController &lt; ApplicationController
  skip_before_action :authenticate!
end</p>

<h1>&hellip;</h1>

<p>class ProfilesController &lt; ApplicationController
  skip_before_action :authenticate!
end
```</p>

<p>We&rsquo;ve forgotten about our API, and when we deploy, we&rsquo;ll be quickly reminded that <code>ApplicationController</code> is involved in those requests too. Since <code>ApplicationController</code> touches <em>every request</em>, it&rsquo;s hard to be sure about exactly what will be affected by changes there.</p>

<h2>ApplicationController Gains Weight</h2>

<p>Left alone, <code>ApplicationController</code> can bloat for many reasons:</p>

<ul>
<li><strong>Authentication logic</strong>, perhaps with complex branching based on what the user is accessing, builds up little-by-little as the application is extended.</li>
<li><strong>Before-actions &amp; helpers</strong> which are used <em>often</em> but <em>not always</em> tend to accrue in <code>ApplicationController</code>, since they&rsquo;re &ldquo;used more than once.&rdquo;</li>
<li><strong>Oddball routes</strong> might be implemented in <code>ApplicationController</code> because no other existing controller seems like the right place.</li>
</ul>


<p>In JavaScript development, filling the global namespace with application code is a no-no. Similarly, <code>ApplicationController</code> is a near-global namespace, so each addition to it should be considered very carefully. When we add to (and remove from) <code>ApplicationController</code>, we&rsquo;re potentially altering <em>every</em> request that our application serves; how can we be sure we aren&rsquo;t breaking something?</p>

<h2>Isolating &ldquo;Parts&rdquo; of the App</h2>

<p>Returning to the example above, I think this inheritance tree is better:</p>

<p><img src="/images/controller_inheritance_good.png" width="500" height="500"></p>

<p>We&rsquo;ve introduced abstract classes for each &ldquo;part&rdquo; of the app. (I use quotes because I don&rsquo;t know a technical term for it!) Now, logged-in authentication would be handled by a subclass of <code>ApplicationController</code>, perhaps named <code>BaseController</code>. A logged-in controller would extend <code>BaseController</code>. For example:</p>

<p><code>ruby
class ItemsController &lt; BaseController
  # ...
end
</code></p>

<p>Similarly, public controllers would be in a namespace of their own, with their own base controller. For example:</p>

<p><code>ruby
class Public::ProfilesController &lt; Public::BaseController
  # ...
end
</code></p>

<p>This is good because:</p>

<ul>
<li>You can refactor with more confidence, since you only have to load <em>part</em> of the app into memory when working on abstract controllers.</li>
<li>Stable parts of the app are more likely to remain stable (since they won&rsquo;t be affected by other parts).</li>
</ul>


<p>The corresponding file structure looks like this:</p>

<p>```bash
controllers/
  api/</p>

<pre><code>base_controller.rb
items_controller.rb
profiles_controller.rb
</code></pre>

<p>  public/</p>

<pre><code>base_controller.rb
reports_controller.rb
profiles_controller.rb
</code></pre>

<p>  staff/</p>

<pre><code>base_controller.rb
stats_controller.rb
</code></pre>

<p>  application_controller.rb
  base_controller.rb
  items_controller.rb
  profiles_controller.rb
  reports_controller.rb
```</p>

<p><em>(I&rsquo;ve left some controllers in the root namespace. If you like, you could put logged-in actions in a namespace too!)</em></p>

<p>And the routes might look like this:</p>

<p>```ruby
namespace :api do
  resources :items, :profiles
end</p>

<p>namespace :public do
  resources :profiles, :reports
end</p>

<p>namespace :staff do
  resources :stats
end</p>

<p>resources :items, :profiles, :reports
```</p>

<h2>When should we extend ApplicationController?</h2>

<p>I&rsquo;d say it&rsquo;s good to extend <code>ApplicationController</code> for each &ldquo;part&rdquo; of the app. It&rsquo;s a bit subjective, but here are some clues:</p>

<ul>
<li>Actions rendered with a <strong>different layout</strong> (or lack thereof). Your webservice, administration and public views are distinct parts of your app.</li>
<li>Actions using <strong>different authentication</strong> strategies. Keep API endpoints, public pages, and staff-only actions in separate sections. If a staff member goes rogue, you&rsquo;ll be able to tighten up that part of the app confidently :)</li>
<li>Actions with <strong>different frequently-used helpers or before-actions</strong>. If there&rsquo;s a before-action that&rsquo;s often skipped, Rails wants to tell you something: these controllers are different! Similarly, if you have controller-level helper methods, perhaps the controllers who depend on that helper should be in a &ldquo;part&rdquo; of their own.</li>
</ul>


<p>I hope a pattern like this will give you more freedom &amp; confidence when refactoring important parts of the request-response cycle!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamically-Generated Headers for ActiveResource Requests]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/02/05/dynamically-generated-headers-for-activeresource-requests/"/>
    <updated>2014-02-05T15:47:00-05:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/02/05/dynamically-generated-headers-for-activeresource-requests</id>
    <content type="html"><![CDATA[<p>Need to add a header to an ActiveResource request? If you need to do it at dynamically at request-time, redefine <code>.headers</code>.</p>

<!-- more -->


<p>I needed to include header in my requests, but I didn&rsquo;t just want to set it in the class definition.</p>

<p><code>ruby
class MyResource &lt; ActiveResource::Base
  headers["My-Header"] = "Something-Useful" # boo hiss, I want it dynamically!
end
</code></p>

<p>So, I overwrote <code>.headers</code> to be a method rather than just a pointer to a hash:</p>

<p>```ruby
class MyResource &lt; ActiveResource::Base
  cattr_accessor :static_headers
  self.static_headers = headers</p>

<p>  def self.headers</p>

<pre><code>new_headers = static_headers.clone
new_headers["My-header"] = MyClass.some_method # voila, evaluated at request-time
new_headers
</code></pre>

<p>  end
end
```</p>

<p>Now, I can add whatever value to the headers I want, whenever I want!</p>
]]></content>
  </entry>
  
</feed>
