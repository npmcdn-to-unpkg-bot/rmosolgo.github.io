<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Robert Mosolgo]]></title>
  <link href="http://rmosolgo.github.io/atom.xml" rel="self"/>
  <link href="http://rmosolgo.github.io/"/>
  <updated>2016-03-03T10:29:00-05:00</updated>
  <id>http://rmosolgo.github.io/</id>
  <author>
    <name><![CDATA[Robert Mosolgo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using GraphQL without Relay]]></title>
    <link href="http://rmosolgo.github.io/blog/2016/03/03/using-graphql-without-relay/"/>
    <updated>2016-03-03T10:01:00-05:00</updated>
    <id>http://rmosolgo.github.io/blog/2016/03/03/using-graphql-without-relay</id>
    <content type="html"><![CDATA[<p>Although <a href="http://facebook.github.io/relay/">Relay</a> made <a href="facebook.github.io/graphql">GraphQL</a> famous, GraphQL was in use at Facebook for years before Relay took the scene. You can use plain AJAX requests to interact with a GraphQL server, too.</p>

<!-- more -->


<p>GraphQL servers like <a href="https://github.com/graphql/express-graphql"><code>express-graphql</code></a> or <a href="https://github.com/rmosolgo/graphql-ruby-demo"><code>graphql-ruby</code> on Rails</a> expose a single endpoint which responds to queries.</p>

<p>The endpoint accepts a few parameters:</p>

<ul>
<li><code>query</code>: The GraphQL query string to execute</li>
<li><code>variables</code>: Runtime values for variables in the GraphQL query</li>
<li><code>operationName</code>: if <code>query</code> contains multiple operations, you must tell the server which <em>one</em> to execute</li>
</ul>


<p>Given this interface, you can even use jQuery as a GraphQL client! Here&rsquo;s how you would use <code>$.post</code> to interact with the server.</p>

<h2>1. Build and send query strings</h2>

<p>In your JavaScript, you could dynamically build a GraphQL query, then post it to the server.</p>

<p>For example, if you were searching users by name, you might use this function to build a query string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">usersByNameQuery</span><span class="p">(</span><span class="nx">searchTerm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// GraphQL requires double-quoted strings in the query:</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;{ users(search: &quot;&#39;</span> <span class="o">+</span> <span class="nx">searchTerm</span> <span class="o">+</span> <span class="s1">&#39;&quot;) { name, id }  }&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">usersByNameQuery</span><span class="p">(</span><span class="s2">&quot;bob&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// &quot;{ users(search: &quot;bob&quot;) { name, id }  }&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, you can post the query with <code>$.post</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">usersByNameQuery</span><span class="p">(</span><span class="s2">&quot;bob&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&quot;/graphql&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">query</span><span class="o">:</span> <span class="nx">query</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">errors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// handle errors</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// use response.data</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the callback, you can check for errors and use the response&rsquo;s <code>data</code>.</p>

<h2>2. Send query <em>and</em> variables</h2>

<p>Often, we know our data requirements ahead of time. That is, we know what values we need to render our UI. In this case, we can <em>separate</em> the query structure and runtime values into <code>query</code> and <code>variables</code>.</p>

<p>Here&rsquo;s how we could adapt our previous example to separate the query from its values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// ES6 backtick-quoted string</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">searchByNameQuery</span> <span class="o">=</span> <span class="err">`</span>
</span><span class='line'><span class="nx">query</span> <span class="nx">searchByName</span><span class="p">(</span><span class="nx">$searchTerm</span><span class="o">:</span> <span class="nb">String</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">users</span><span class="p">(</span><span class="nx">search</span><span class="o">:</span> <span class="nx">$searchTerm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>
</span><span class='line'>    <span class="nx">id</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">fetchUsersByName</span><span class="p">(</span><span class="nx">searchTerm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">query</span><span class="o">:</span> <span class="nx">searchByNameQuery</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">variables</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// This will be used as `$searchTerm` by the server:</span>
</span><span class='line'>      <span class="nx">searchTerm</span><span class="o">:</span> <span class="nx">searchTerm</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&quot;/graphql&quot;</span><span class="p">,</span> <span class="nx">payload</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">errors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// handle errors ...</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// use response.data</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, we always send the <em>same</em> query string, but we change the <code>variables</code> for each request.</p>

<p>This setup is easier to maintain because the query string is so easy to read. Any changes to it will be easy to see in a pull request.</p>

<h1>3. (future) Store query strings on the server</h1>

<p>Maybe you noticed an optimization waiting to happen: since we always send the same query string, why send it at all? We could store it on the server ahead of time, then call it by name at runtime.</p>

<p>I heard that Facebook&rsquo;s GraphQL server had this behavior, but I don&rsquo;t know that any of the open implementations have it yet. I&rsquo;m <a href="https://github.com/rmosolgo/graphql-ruby/pull/76">considering it for <code>graphql-ruby</code></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How many assertions per test case?]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/10/08/how-many-assertions-per-test-case/"/>
    <updated>2015-10-08T21:12:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/10/08/how-many-assertions-per-test-case</id>
    <content type="html"><![CDATA[<p>This question is too hard. Instead, ask, &ldquo;how many behaviors per test case?&rdquo; and answer, &ldquo;one.&rdquo;</p>

<!-- more -->


<p>I presented at Full Stack about unit testing but what I really like is behavior-driven development.</p>

<h2>A Behavior</h2>

<p>You can think of a code base as a collection of behaviors: given some inputs (data, events), it makes some outputs (more data, more events). In this perspective, the code itself is an implementation detail. As long as it takes the inputs and creates the outputs, it makes little difference what classes, methods, functions etc, implement that behavior.</p>

<p>This kind of thinking is recursive: each behavior is composed of smaller behaviors. For example, in a web application:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Behavior:
</span><span class='line'>  - A request with a valid username & password is allowed to take Action X
</span><span class='line'>
</span><span class='line'>    Is composed of:
</span><span class='line'>      - The user info is stored in the session
</span><span class='line'>      - The user's `last_logged_in_at` is updated
</span><span class='line'>      - Value Y is written to the database</span></code></pre></td></tr></table></div></figure>


<p>Each subsequent level of behavior may have an implementation of its own.</p>

<h2>Testing a behavior</h2>

<p>In a web application, unauthorized requests:</p>

<ul>
<li>Return meaningful HTTP responses, including a status and a body; and</li>
<li>do not execute the requested action</li>
</ul>


<p>I would specify that as two <em>behaviors</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;an unauthorized request&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;responds as not authorized&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">http_response</span> <span class="o">=</span> <span class="n">make_create_request</span> <span class="c1"># makes a unauthorized_request</span>
</span><span class='line'>    <span class="n">assert_equal</span><span class="p">(</span><span class="mi">403</span><span class="p">,</span> <span class="n">http_response</span><span class="o">.</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span><span class="p">(</span><span class="s2">&quot;Not Authorized&quot;</span><span class="p">,</span> <span class="n">http_response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;doesn&#39;t write to the database&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">http_response</span> <span class="o">=</span> <span class="n">make_create_request</span> <span class="c1"># makes a unauthorized_request</span>
</span><span class='line'>    <span class="n">assert_equal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="no">Posts</span><span class="o">.</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>(using <a href="https://github.com/seattlerb/minitest#specs">minitest/spec</a>)</p>

<p>Notice that the first test made <em>two</em> assertions. You could split that into three test cases but I don&rsquo;t think it&rsquo;s worth the trouble. What&rsquo;s the case where <code>403</code> and <code>"Not Authorized"</code> are not part of the same behavior?</p>

<h2>Multiple Assertions is a Code Smell</h2>

<p>If your test case has many assertions, your code may be telling you that you&rsquo;re specifying multiple behaviors at once. Ask yourself:</p>

<ul>
<li>Is there a smaller unit of work to extract?</li>
<li>Can I make this a two-step process, where step one&rsquo;s result is passed to step two?</li>
<li>Can I break each test case (and its corresponding code) into a distinct <a href="http://c2.com/cgi/wiki?StrategyPattern">strategy</a>?</li>
<li>Am I testing business logic <em>and</em> interaction with an external service (eg, your database or an HTTP service)? Can I separate the two actions?</li>
<li>Am I transforming data, then acting based on the result? Can I separate those two?</li>
<li>Are there assertions that are shared between multiple test cases? Is there an underlying behavior there?</li>
</ul>


<h2>Other People on The Internet</h2>

<p>Here&rsquo;s some more dignified reading on the topic:</p>

<ul>
<li><strong><a href="http://dannorth.net/introducing-bdd/">&ldquo;Introducing BDD,&rdquo; Dan North</a></strong>. I especially agree with his point that behavior-driving thinking helps you focus your design and implementation.</li>
<li><strong><a href="http://blog.jayfields.com/2007/06/testing-one-assertion-per-test.html">&ldquo;Testing One Assertion Per Test,&rdquo; Jay Fields</a></strong>. I basically agree with him: &ldquo;Tests that focus on one behavior of the system are almost always easier to write and to comprehend at a later date.&rdquo; But I disagree with his assumption that one behavior equals one assertion.</li>
<li><strong><a href="http://programmers.stackexchange.com/a/7829">&ldquo;Is it OK to have multiple asserts in a single unit test?&rdquo;, random Stack Overflow people</a></strong>. &ldquo;Yeah, but try not to.&rdquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crystal First Impressions]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/09/27/crystal-first-impressions/"/>
    <updated>2015-09-27T21:47:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/09/27/crystal-first-impressions</id>
    <content type="html"><![CDATA[<p>The <a href="http://crystal-lang.org/">Crystal programming language</a> combines Ruby-like syntax with a really powerful compiler. As a result, it&rsquo;s fun to write, fast to run, and hard to screw up!</p>

<!-- more -->


<p>My Crystal experience so far:</p>

<ul>
<li><a href="https://github.com/danott">danott</a> mentioned it in our Slack a few weeks ago</li>
<li>I read the great <a href="http://crystal-lang.org/docs/">Crystal docs</a></li>
<li>I cobbled together <a href="https://github.com/rmosolgo/crythtal">a lisp (barely)</a></li>
</ul>


<p>I&rsquo;d say it&rsquo;s a combination of:</p>

<ul>
<li>a more-stable-Ruby (like Elixir, but without Erlang)</li>
<li>a developer-friendly, life-embetter-ing type system (like Elm, but &hellip; not JavaScript)</li>
<li>a real compiler! (like C, but fun to read and write)</li>
</ul>


<p>Um, what else could you want?! (See last paragraph 😛)</p>

<h2>Crystal Syntax</h2>

<p>Crystal brings the best of Ruby:</p>

<ul>
<li><strong>Concise literals</strong>, just like Ruby (take it for granted until you use regexps in Python 🙀)</li>
<li><strong>Great OO support</strong>, classes &amp; modules just like Ruby</li>
<li><strong>Attractive syntax</strong> thanks to blocks, operator overloading and optional parens</li>
<li><strong>consistent</strong>, predictable standard library (like Ruby)</li>
</ul>


<p>Plus, some improvements over Ruby:</p>

<ul>
<li><strong>Method overloading</strong></li>
<li>Python-like <strong>keyword args</strong>: must have default value, may be passed as kwargs or positional args (I could go either way on this since Ruby 2.1, but it beats <code>options={}</code>)</li>
<li>More robust <strong>Proc literals</strong>, reminded me of Elixir</li>
<li>Convention: <strong><code>?</code> methods return maybe-nil types</strong>, while their counterparts raise on nil</li>
<li>First-class <strong>enums</strong> &amp; <strong>tuples</strong></li>
<li><strong>Immutable strings</strong>, like Ruby 3 will have (?)</li>
</ul>


<p>For completeness, you lose some things from Ruby:</p>

<ul>
<li>Runtime <strong>code creation</strong>, like <code>define_method</code> &amp; friends</li>
<li>Runtime <strong>code evaluation</strong>, like <code>eval</code> &amp; friends</li>
</ul>


<p>Crystal offers a powerful <strong>macro system</strong> that makes up for the loss of runtime metaprogramming. Unlike C preprossing, Crystal macros are awesome. You basically define functions which are called at compile-time, then generate code with liquid-like syntax.</p>

<h2>Crystal Typing</h2>

<h3>Inferring Types</h3>

<p>Crystal infers types from your code, so these are OK:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_string</span> <span class="o">=</span> <span class="s2">&quot;Hello World&quot;</span>
</span><span class='line'><span class="c1"># String</span>
</span><span class='line'><span class="n">my_hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">key</span><span class="p">:</span> <span class="s2">&quot;value&quot;</span><span class="p">,</span> <span class="ss">key2</span><span class="p">:</span> <span class="s2">&quot;value2&quot;</span><span class="p">}</span>
</span><span class='line'><span class="c1"># Hash(Symbol, String)</span>
</span><span class='line'><span class="n">my_array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="c1"># Array(Int32)</span>
</span></code></pre></td></tr></table></div></figure>


<p>When types mix, Crystal automatically unions them. It will ensure any usages of the variable in question are valid for both types. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_variable</span> <span class="o">=</span> <span class="s2">&quot;string&quot;</span>
</span><span class='line'><span class="n">my_variable</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="c1"># String | Int32</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Ok, because String &amp; Int32 both implement #to_f</span>
</span><span class='line'><span class="n">my_variable</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># You can add runtime checks to call type-specific methods</span>
</span><span class='line'><span class="k">if</span> <span class="n">my_variable</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span>
</span><span class='line'>  <span class="n">my_variable</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are some times you need to define types to help the compiler. For example, there aren&rsquo;t any values here to tell the compiler what to expect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">some_array</span> <span class="o">=</span>  <span class="o">[]</span> <span class="n">of</span> <span class="no">Int32</span>
</span><span class='line'><span class="c1"># You can use custom types, too</span>
</span><span class='line'><span class="n">some_hash</span> <span class="o">=</span>   <span class="p">{}</span> <span class="n">of</span> <span class="no">Symbol</span> <span class="o">=&gt;</span> <span class="no">SomeCustomClass</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Goodbye, NoMethodErrors</h3>

<p>If you&rsquo;re like me, you hate this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`whatever&#39; for nil:NilClass</span>
</span></code></pre></td></tr></table></div></figure>


<p>Something somehow became nil. 😢</p>

<p>Instead, Crystal reads your code, and if there&rsquo;s somewhere a value could be nil, it throws a compile error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">in</span> <span class="o">.</span><span class="n">/src</span><span class="o">/</span><span class="n">lisp</span><span class="o">/</span><span class="nb">binding</span><span class="o">.</span><span class="n">cr</span><span class="p">:</span><span class="mi">55</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="s1">&#39;find_owner&#39;</span> <span class="k">for</span> <span class="no">Nil</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@parent</span><span class="o">.</span><span class="n">find_owner</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>              <span class="o">^~~~~~~~~~</span>
</span></code></pre></td></tr></table></div></figure>


<p>You have two options:</p>

<ul>
<li>Add an explicit not-nil check (<code>if object.is_a?(String) ...</code>) so the compiler knows it will be safe</li>
<li>Refactor so the value won&rsquo;t be nil</li>
</ul>


<p>Of course, the first one seems better at the start, but I hope to get better at the second one 😁.</p>

<h2>What&rsquo;s Missing?</h2>

<p>Crystal really shows its youth. Its shortcomings all fall in that vein:</p>

<ul>
<li><strong>Poorly documented</strong>, which isn&rsquo;t so bad if you&rsquo;re coming from Ruby</li>
<li><strong>Few projects</strong> out there (I think the <a href="http://crystalshards.herokuapp.com/">package repository is a free Heroku app</a>)</li>
<li>Standard library has <strong>some kinks</strong>, they say it is still changing</li>
</ul>


<p>One example of a standard library kink is the handling of <code>break</code>, <code>next</code> and <code>return</code> in blocks. If you want to exit a block early, you have to choose one of those three. The problem is that, to choose the right one, you have to know whether the method captures the block into a proc or simply yields values to it. It&rsquo;s a drag to have to know a method&rsquo;s implementation to call it! (IRL, I didn&rsquo;t run into this and I suspect it would be easy enough to work around it.)</p>

<h2>Now What?</h2>

<p>I really liked Crystal and I hope I can work with it more!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Communion as "Bread from Heaven"]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/08/08/communion-as-bread-from-heaven/"/>
    <updated>2015-08-08T08:45:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/08/08/communion-as-bread-from-heaven</id>
    <content type="html"><![CDATA[<p>The Christian practice of communion is a reminder of why Jesus is important and how his life affects us. To see the full depth of it, you have to consider pre-Christian religion.</p>

<!-- more -->


<h3>Before Jesus: Manna Was &ldquo;Bread from Heaven&rdquo;</h3>

<p>When the Israelites left Egypt, they spent 40 years in the desert as nomads. During this time, their primary sustenance was a food called &ldquo;manna&rdquo; (lit. <em>What is it?</em>). Every morning, it appeared on the surface of the ground. People milled it into flour, then baked cakes with it. This food couldn&rsquo;t be kept overnight; it would spoil.</p>

<p>During this time, God sustained people in a very tangible way. They would have starved in the desert if he hadn&rsquo;t provided them with this miraculous food. The people had no choice but trust God to provide it each day.</p>

<p>(Descriptions of manna: <a href="http://www.esvbible.org/Ex16/">Exodos 16</a>, <a href="http://www.esvbible.org/Nu11/">Numbers 11</a>)</p>

<h3>Before Jesus: Sacrificed Meat</h3>

<p>Part of the Israelites&#8217; relationship with God was animal sacrifice. In short, sacrifices served as &ldquo;bridges&rdquo; between the supplicants (who were imperfect) and God (who was perfect). An animal would be killed, then some parts were burned on the altar. Other parts were given to the priests, to be eaten by them.</p>

<p>In this way, the sacrifice served a double purpose of providing access to God <em>and</em> providing food for full-time clergy.</p>

<p>(Priests eat meat: <a href="http://www.esvbible.org/Lv7:28-36/">Leviticus 7</a>, <a href="http://www.esvbible.org/1Cor9:13/">1 Corinthians 9</a>)</p>

<h3>Jesus Is &ldquo;Bread from Heaven&rdquo;</h3>

<p>These two points provide a backdrop for Jesus&rsquo;s claims:</p>

<blockquote><p>&ldquo;I am the bread of life. Your fathers ate the manna in the wilderness, and they died.  This is the bread that comes down from heaven, so that one may eat of it and not die. I am the living bread that came down from heaven. If anyone eats of this bread, he will live forever. And the bread that I will give for the life of the world is my flesh.”</p>

<p>The Jews then disputed among themselves, saying, “How can this man give us his flesh to eat?”</p>

<p>So Jesus said to them, “Truly, truly, I say to you, unless you eat the flesh of the Son of Man and drink his blood, you have no life in you. Whoever feeds on my flesh and drinks my blood has eternal life, and I will raise him up on the last day.</p></blockquote>

<p>(source: <a href="http://www.esvbible.org/Jn6:22/">John 6</a>)</p>

<p>Here, Jesus united the traditions of sacrifice and &ldquo;bread from heaven&rdquo;:</p>

<ul>
<li>Jesus <em>himself</em> is some kind of better bread than manna.</li>
<li>To eat this bread, you must <em>eat his flesh</em>. (Yuck!?)</li>
<li>As the &ldquo;living bread&rdquo;, Jesus provides <em>absolute</em> sustenance: those who eat it have &ldquo;eternal life&rdquo;, meaning that they&rsquo;ll enjoy eternity in union with God after Jesus&rsquo;s return (cf &ldquo;raised up on the last day&rdquo;).</li>
</ul>


<p>On the night before his arrest (ie, during the &ldquo;last supper&rdquo;), Jesus made this idea concrete:</p>

<blockquote><p>And he took bread, and when he had given thanks, he broke it and gave it to them, saying, “This is my body, which is given for you. Do this in remembrance of me.”</p>

<p>And likewise the cup after they had eaten, saying, &ldquo;This cup that is poured out for you is the new covenant in my blood.&rdquo;</p></blockquote>

<p>(source: <a href="http://www.esvbible.org/Lk22:19/">Luke 22</a>)</p>

<p>This instituted the practice of communion, also called the Lord&rsquo;s supper. Communion is a reflection of some points of faith:</p>

<ul>
<li>The bread &amp; wine are <em>imperfect pointers</em> to a perfect &ldquo;food&rdquo;, which is Jesus himself.</li>
<li>Although bread sustains you for short time, believing in Jesus provides eternal life upon Jesus&rsquo;s return.</li>
<li>The bread &amp; wine are stand-ins for Jesus&rsquo;s <em>flesh and blood</em> (😳), and by eating it, we remember Jesus as a sacrifice in both ways mentioned above:

<ul>
<li>Jesus bridges the gap between us and God, allowing us to have a relationship with God</li>
<li>Jesus provides sustenance for day-to-day life (by way of faith in him, in the form of hope for his kingdom to come).</li>
</ul>
</li>
</ul>


<p>These are the reasons I enjoy communion. It&rsquo;s a reminder of how God made peace with me, a sinner, by Jesus&rsquo;s sacrifice. As a result, I can trust God to forgive my sin, sustain me in day-to-day life <em>and</em> &ldquo;raise [me] up on the last day&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authorization in GraphQL]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/08/04/authorization-in-graphql/"/>
    <updated>2015-08-04T10:19:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/08/04/authorization-in-graphql</id>
    <content type="html"><![CDATA[<p>A <a href="http://facebook.github.io/graphql/">GraphQL</a> system works differently from a &ldquo;traditional&rdquo; RESTful JSON API. Instead of authenticating during controller actions, you can authenticate users with &ldquo;query context.&rdquo;</p>

<!-- more -->


<h2>Query Context</h2>

<p>GraphQL execution systems should allow the consumer to pass some arbitrary data &ldquo;through&rdquo; the query, so it is accessible at any time during execution. For example, you could take some information from an HTTP request, pass it into the query, then use that information during field resolution.</p>

<p>You can see this idea at work in <a href="https://github.com/graphql/graphql-js/tree/v0.2.4">graphql-js 0.2.4</a>:</p>

<ul>
<li>An arbitrary value enters the <code>execute</code> function <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L108">as <code>rootValue</code></a> and is <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L119">built into <code>context</code></a></li>
<li>Execution context is <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L203-L206">passed to <code>executeFields</code></a></li>
<li><code>rootValue</code> is <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L489">drawn back out and passed</a> to fields&#8217; resolve functions, where it is the <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L663">third argument</a></li>
</ul>


<p>This way, any value that you pass to <code>execute</code> is passed along to any field resolution.</p>

<p><a href="https://github.com/rmosolgo/graphql-ruby">graphql-ruby</a> also implements this idea:</p>

<ul>
<li><code>Query#new</code> accepts <a href="https://github.com/rmosolgo/graphql-ruby/blob/adcf3c8ee83ba06232d71df1a2360bc985caf4d3/lib/graph_ql/query.rb#L15">a <code>context:</code> keyword</a></li>
<li>That value is <a href="https://github.com/rmosolgo/graphql-ruby/blob/adcf3c8ee83ba06232d71df1a2360bc985caf4d3/lib/graph_ql/query.rb#L74">accessible through <code>Query::Context</code></a>,
which is <a href="https://github.com/rmosolgo/graphql-ruby/blob/adcf3c8ee83ba06232d71df1a2360bc985caf4d3/lib/graph_ql/field.rb#L54">passed to field resolution methods</a></li>
</ul>


<h2>Using Query Context for Authorization</h2>

<p>To implement authorization in GraphQL, you could use query context.
There are roughly two approaches:</p>

<h4>Pass a permission indicator into the query.</h4>

<p>Before executing the query, determine the permission level of the current user, then pass that into the query as context. That way, each field can test the permission level to determine how to resolve.</p>

<p>For example, in Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># pass the permission level in the context hash</span>
</span><span class='line'><span class="n">permission</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">permission</span>
</span><span class='line'><span class="n">query</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Query</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">MySchema</span><span class="p">,</span> <span class="n">query_string</span><span class="p">,</span> <span class="ss">context</span><span class="p">:</span> <span class="p">{</span><span class="ss">permission</span><span class="p">:</span> <span class="n">permission</span><span class="p">})</span>
</span><span class='line'><span class="n">query</span><span class="o">.</span><span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside a field, you could access <code>context[:permission]</code>, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Field</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">resolve</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># Check the permission level which was passed as context</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">context</span><span class="o">[</span><span class="ss">:permission</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;admin&quot;</span>
</span><span class='line'>      <span class="n">object</span><span class="o">.</span><span class="n">secret_info</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows you to access permission information without abusing the global scope.</p>

<h4>Pass the user object into the query.</h4>

<p>If your authentication scheme is more complex, you can pass the user object in to the query context.</p>

<p>For example, in Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Pass `current_user` in the context hash</span>
</span><span class='line'><span class="n">query</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Query</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">MySchema</span><span class="p">,</span> <span class="n">query_string</span><span class="p">,</span> <span class="ss">context</span><span class="p">:</span> <span class="p">{</span><span class="ss">user</span><span class="p">:</span> <span class="n">current_user</span><span class="p">})</span>
</span><span class='line'><span class="n">query</span><span class="o">.</span><span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>That way, fields can access the user object at resolve-time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Field</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">resolve</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># Check the user which was passed as context</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">context</span><span class="o">[</span><span class="ss">:user</span><span class="o">].</span><span class="n">can?</span><span class="p">(</span><span class="ss">:read</span><span class="p">,</span> <span class="n">object</span><span class="p">)</span>
</span><span class='line'>      <span class="n">objects</span><span class="o">.</span><span class="n">secret_info</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you pass the user object into query context, you can use fine-grained authentication when resolving fields.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Ginger Ale]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/05/06/making-ginger-ale/"/>
    <updated>2015-05-06T17:50:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/05/06/making-ginger-ale</id>
    <content type="html"><![CDATA[<p>I had leftover whey after <a href="http://rmosolgo.github.io/blog/2015/04/27/making-yogurt/">making yogurt</a>, so I made ginger ale.</p>

<!-- more -->


<p>I followed <a href="http://www.instructables.com/id/Lacto-fermented-Ginger-Ale/">this recipe</a>. (I also tried making ricotta cheese and it was a total fail: it never curdled.)</p>

<p>Overall:</p>

<ul>
<li>It didn&rsquo;t do anything for 2 days, then it suddently showed signs of fermentation (namely, carbonation).</li>
<li>Next time, I&rsquo;ll bleed some CO2 as it goes. Maybe that would make it fizzier.</li>
</ul>


<h2>Mix</h2>

<p>I used a 2-liter soda bottle because the contents would become very pressurized. These bottles are designed to handle it!</p>

<p>I mixed honey (1 &frac12; cups, yum), lemon juice, grated ginger, and a bit of whey:</p>

<p><img src="http://rmosolgo.github.io/images/ginger_ale/mix.jpg" width="500"></p>

<p>Then I filled it almost to the top with water, leaving some space for CO2.</p>

<p>Lactic acid bacteria in the whey will eat sugar from the honey and turn it into lactic acid, CO2, and a tiny bit of alcohol.</p>

<h2>Wait</h2>

<p>The recipe said &ldquo;3 to 7 days&rdquo;. I left it for 4 days. It pretty much looked like this the whole time:</p>

<p><img src="http://rmosolgo.github.io/images/ginger_ale/wait.jpg" width="500"></p>

<p>(It&rsquo;s translucent and brown-ish, with little bubbles on the top.)</p>

<p>For the first 2 days, nothing happened. I was afraid it would be a failure like the ricotta.</p>

<p>On day 3, it was noticeably more pressurized.</p>

<p>By day 4, it was so pressurized that I thought it would explode in the kitchen, so I put it in the fridge.</p>

<p>It rested in the fridge for about 20 hours.</p>

<h2>Enjoy</h2>

<p>It turned out gingery, sweet, &amp; lightly carbonated:</p>

<p><img src="http://rmosolgo.github.io/images/ginger_ale/enjoy.jpg"></p>

<p>Next time, I&rsquo;ll try to make it more carbonated. I might also add less lemon juice &amp; more ginger.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Yogurt]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/04/27/making-yogurt/"/>
    <updated>2015-04-27T07:37:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/04/27/making-yogurt</id>
    <content type="html"><![CDATA[<p>This weekend I tried making yogurt. It worked!</p>

<!-- more -->


<p>I based it on this great recipe: <a href="http://biology.clc.uc.edu/Fankhauser/Cheese/yogurt_making/YOGURT2000.htm">Dr. David Fankhauser&rsquo;s Yogurt</a>. Dr. Fankhauser has a <a href="http://biology.clc.uc.edu/Fankhauser/Cheese/CHEESE.html">ton of illustrated, detailed recipes</a> for other dairy and make-at home foods (eg, <a href="http://biology.clc.uc.edu/fankhauser/Cheese/Blue_Cheese/Blue_Cheese.htm">blue cheese</a>, <a href="http://biology.clc.uc.edu/fankhauser/Buds_and_Bark/tapping_sugar_maple_index.html">maple syrup</a>, <a href="http://biology.clc.uc.edu/fankhauser/homesteading/popcorn_index.html">microwave popcorn</a>).</p>

<p>Some overall notes:</p>

<ul>
<li>My grocery store <em>doesn&rsquo;t carry</em> plain yogurt (except in giant containers), so I used <strong>greek yogurt as starter</strong>. It worked just fine.</li>
<li>The recipe called for 3 hours of culturing time, but I found <strong>longer (12-16 hours) was better</strong>.</li>
<li>I really fretted over the incubation temperature. I don&rsquo;t think that was necessary. I think <strong>set-it-and-forget-it would have been OK</strong>!</li>
<li>The resulting yogurt is as <strong>good</strong> as you can get at the store!</li>
<li>I&rsquo;m also looking forward to using the <strong>whey</strong> (pickles, ginger ale, ricotta cheese).</li>
</ul>


<h2>The Setup</h2>

<p>First, scald the milk to kill any unwanted cultures that may have survived pasteurization:</p>

<p><img src="http://rmosolgo.github.io/images/yogurt/scalding-milk.jpg" width="500"></p>

<p>Sterilize equipment in boiling water:</p>

<p><img src="http://rmosolgo.github.io/images/yogurt/sterilize-equipment.jpg" width="500"></p>

<p>Unwanted cultures could give the yogurt a bad taste.</p>

<h2>Incubation</h2>

<p>Mix a cup of store-bought yogurt into the milk, then distribute it into jars.</p>

<p>Put the jars in a cooler with 120°F (50°C) water:</p>

<p><img src="http://rmosolgo.github.io/images/yogurt/incubation-jars.jpg" width="500"></p>

<p>And let it sit:</p>

<p><img src="http://rmosolgo.github.io/images/yogurt/incubation.jpg" width="500"></p>

<p>I found longer was better. My longest was 16 hours and looked thick and good!</p>

<p>I was really fretting about the temperature: I occassionally scooped some water out, boiled it, then added it back. I think this was overkill!</p>

<h2>Result</h2>

<p>In the jar, the curds and whey separate:</p>

<p><img src="http://rmosolgo.github.io/images/yogurt/yogurt-in-jar.jpg" width="500"></p>

<p>The whey can be decanted:</p>

<p><img src="http://rmosolgo.github.io/images/yogurt/jar-of-whey.jpg" width="500"></p>

<p>(This is whey from a few jars of yogurt.)</p>

<p>Leaving only the yogurt curd:</p>

<p><img src="http://rmosolgo.github.io/images/yogurt/yogurt-curd-in-jar.jpg" width="500"></p>

<p>Yum! Smooth and creamy (after stirring), but unsweetened, so I add <a href="http://stuffdutchpeoplelike.com/2011/03/06/hagelslag/">hagelslag</a>:</p>

<p><img src="http://rmosolgo.github.io/images/yogurt/yogurt-in-bowl.jpg" width="500"></p>

<h2>Next</h2>

<p>I&rsquo;m looking forward to using the &ldquo;leftover&rdquo; whey to make:</p>

<ul>
<li><a href="http://immigrantstable.com/2013/11/17/whey-pickles/">whey pickles</a></li>
<li><a href="http://www.instructables.com/id/Lacto-fermented-Ginger-Ale/">ginger ale</a></li>
<li><a href="http://biology.clc.uc.edu/fankhauser/Cheese/Ricotta/ricotta_00.htm">ricotta</a> (also from Dr. Fankhauser)</li>
</ul>


<p>Also, in a few weeks I&rsquo;ll try to step up my game and try <a href="http://biology.clc.uc.edu/Fankhauser/Cheese/neufchatel/neufchatel.htm">Dr. Fankhauser&rsquo;s neufchatel</a>, which adds rennet to the mix.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Response to "Using a Ruby Class to Write Functional Code"]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/03/15/response-to-using-a-ruby-class-to-write-functional-code/"/>
    <updated>2015-03-15T14:29:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/03/15/response-to-using-a-ruby-class-to-write-functional-code</id>
    <content type="html"><![CDATA[<p>Pat Shaughnessy&rsquo;s <a href="http://patshaughnessy.net/2014/4/8/using-a-ruby-class-to-write-functional-code">&ldquo;Using a Ruby Class to Write Functional Code&rdquo;</a> gives an example of bringing functional programming principles into object-oriented design. I like it.</p>

<!-- more -->


<p>It Pat&rsquo;s example, he turns a group of pure functions into a class whose state is <em>immutable-ish</em> (they technically could be changed, but they aren&rsquo;t) &amp; whose methods are <em>pure-ish</em> (they read from internal state, too). He says:</p>

<blockquote><p>You’ve broken the rules and rewritten your pure, functional program in a more idiomatic, Ruby manner. However, you haven’t lost the spirit of functional programming. Your code is just as easy to understand, maintain and test.</p></blockquote>

<p><a href="http://patshaughnessy.net/2014/4/8/using-a-ruby-class-to-write-functional-code#comment-1331596525">One commenter</a> goes further:</p>

<blockquote><p>I think you do not break the rules of FP by relying on <code>@line</code> and <code>@values</code>. <code>@line</code> is just partially applying a parameter to the &ldquo;functions&rdquo; of Line and currification is a usual techique in FP. <code>@values</code> is memoizing the result of a function which also comes from FP.</p></blockquote>

<p>There were a few ideas that jumped out at me.</p>

<h2>&ldquo;No Side-effects&rdquo; = Clarity at the Call Site</h2>

<p>Functions that don&rsquo;t modify their arguments are often easier to use. Their usage <em>reveals intent</em>.</p>

<p>Which do you prefer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">exclaim_1</span><span class="p">(</span><span class="n">statement</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># modify the argument</span>
</span><span class='line'>  <span class="n">statement</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;!!!&quot;</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">wow</span> <span class="o">=</span> <span class="s2">&quot;Wow&quot;</span>
</span><span class='line'><span class="n">exclaim_1</span><span class="p">(</span><span class="n">wow</span><span class="p">)</span>  <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">wow</span>             <span class="c1"># =&gt; &quot;Wow!!!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>or:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">exclaim_2</span><span class="p">(</span><span class="n">statement</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># make a new string</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">statement</span> <span class="o">+</span> <span class="s2">&quot;!!!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">wow</span> <span class="o">=</span> <span class="s2">&quot;Wow&quot;</span>
</span><span class='line'><span class="n">such_wow</span> <span class="o">=</span> <span class="n">exclaim_2</span><span class="p">(</span><span class="n">wow</span><span class="p">)</span> <span class="c1"># =&gt; &quot;Wow!!!&quot;</span>
</span><span class='line'><span class="n">wow</span>                       <span class="c1"># =&gt; &quot;Wow&quot;</span>
</span><span class='line'><span class="n">such_wow</span>                  <span class="c1"># =&gt; &quot;Wow!!!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the first case, if you didn&rsquo;t have the output in front of you, you wouldn&rsquo;t know what <code>exclaim_1</code> did. You&rsquo;d have to find the file and read the method body to know its purpose.</p>

<p>In the second case, it&rsquo;s obvious at the call site that the function returns a new, significant value. (Otherwise, why would the developer have captured in a new variable?)</p>

<h2>Think of <code>self</code> as an Argument</h2>

<p>You can extend the benefit of call site clarity to an object&rsquo;s internal state, too.</p>

<p>The commenter mentions that &ldquo;<code>@line</code> is like a parameter&rdquo; to the class&rsquo;s methods. Although it <em>isn&rsquo;t</em> part of the method signature, it has some parameter-like properties. It is:</p>

<ul>
<li>A value which affects the output</li>
<li>Unchanged by the function</li>
</ul>


<p>What if you <em>always</em> treated <code>self</code> like that? I mean, you didn&rsquo;t modify it inside method bodies, you treated it as read-only (as often as possible).</p>

<p>Python really invites you to think of <code>self</code> as a parameter of the function. It&rsquo;s actually part of the method signature:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Something</span><span class="p">():</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">some_method</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arg_1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span> <span class="c"># =&gt; the instance</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;whatever&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In fact, PyCharm will even complain if you modify <code>self</code> during a method:</p>

<p><img src="http://rmosolgo.github.io/images/pycharm_ivar.png" width="500"></p>

<p>(In reality, <code>self</code> <em>is</em> an argument in any language runtime that I ever heard of &hellip; we just tend not to think of it that way!)</p>

<h2>What Gives?</h2>

<p>I spend most of my time <em>maintaining</em> software and FP pays off big time in that regard:</p>

<ul>
<li><strong>Tests are more reliable</strong> for pure functions: if the function yields the correct output with those inputs today, it will <em>always</em> yield the correct output with those inputs.</li>
<li>Pure functions are <strong>easy to understand</strong>: the only factors are the inputs and there&rsquo;s no muddling from outside universe. Knowledge of the function body is sufficent to understand the function.</li>
<li>Pure functions must be <strong>decoupled</strong>. The only touch the world via <em>inputs</em> and <em>outputs</em> so they can&rsquo;t depend on anything else.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Move ActiveRecord Scopes into Separate Files]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/03/12/move-activerecord-scopes-into-separate-files/"/>
    <updated>2015-03-12T08:14:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/03/12/move-activerecord-scopes-into-separate-files</id>
    <content type="html"><![CDATA[<p>Ruby on Rails models tend to grow and grow. When refactoring scopes, it turns out you <em>can</em> move them into their own classes.</p>

<!-- more -->


<h2>The Problem</h2>

<p>Rails models can get out of hand. Over time they get more associations, more methods, more everything. The resulting huge API and visual clutter makes those classes hard to maintain.</p>

<p>Consider these scopes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CheckIn</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:normal</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">kind</span><span class="p">:</span> <span class="s2">&quot;Regular&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:guest</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">kind</span><span class="p">:</span> <span class="s2">&quot;Guest&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:volunteer</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">kind</span><span class="p">:</span> <span class="s2">&quot;Volunteer&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:first_time</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">joins</span><span class="p">(</span><span class="sx">%{</span>
</span><span class='line'><span class="sx">      INNER JOIN person_events</span>
</span><span class='line'><span class="sx">        ON  person_events.person_id =         check_ins.person_id</span>
</span><span class='line'><span class="sx">        AND person_events.event_id =          check_ins.event_id</span>
</span><span class='line'><span class="sx">        AND person_events.first_check_in_id = check_ins.id</span>
</span><span class='line'><span class="sx">        }</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How do we usually address this?</h2>

<p>For me, refactoring often means finding related methods &amp; values that deserve their own class, then moving code out of the model and into the new class. For example:</p>

<ul>
<li>moving complex validations into <a href="http://api.rubyonrails.org/classes/ActiveModel/Validator.html">validator classes</a></li>
<li>moving complex serialization into serializer classes (I do this with serialization to <em>English</em>, too, not just JSON)</li>
<li>moving complex calculations into value classes.</li>
</ul>


<p>Whenever I&rsquo;m trying to move code out of a model, I visit Code Climate&rsquo;s <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">great post on the topic</a>.</p>

<p>However, <em>scopes</em> are never on the list. What can we do with those?</p>

<h2>Digging In</h2>

<p>I poked around Rails source a bit to see if there were any other options available to me.</p>

<p>I found that the <code>body</code> passed to <code>ActiveRecord::Base.scope</code> just has to <a href="https://github.com/rails/rails/blob/5e0b555b453ea2ca36986c111512627d806101e7/activerecord/lib/active_record/scoping/named.rb#L149">respond to <code>:call</code></a>. I guess that&rsquo;s why lambdas are a shoo-in for that purpose: they respond to <code>:call</code> and aren&rsquo;t picky about arguments.</p>

<p>The other thing I found is that the lambdas you usually pass to <code>scope</code> <em>aren&rsquo;t magical</em>. I always assumed that they were <code>instance_eval</code>&rsquo;d against other objects at whatever other times, but as far as I can tell, they aren&rsquo;t magical. <code>self</code> is always the model class (from lexical scope), just like any other lambda.</p>

<p>Instead, the magic is a combination of Rails&#8217; <a href="https://github.com/rails/rails/blob/5e0b555b453ea2ca36986c111512627d806101e7/activerecord/lib/active_record/scoping.rb#L57">thread-aware <code>ScopeRegistry</code></a> which tracks the scope for a given class, combined with <a href="https://github.com/rails/rails/blob/ce32ff462f3ba89c87f337f9150b3976d23220e8/activerecord/lib/active_record/relation.rb#L319"><code>Association#scoping</code></a>, which I don&rsquo;t understand. :)</p>

<h2>Moving Scopes from Lambda to Class</h2>

<p>You can make a class that complies to the required API. Make calls on the model class (<code>CheckIn</code>, in my case), which is usually <code>self</code> in a <code>scope</code> lambda.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/check_in/scopes/latest.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CheckIn</span><span class="o">::</span><span class="ss">Scopes</span><span class="p">:</span><span class="ss">:Latest</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span>
</span><span class='line'>    <span class="no">CheckIn</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;check_ins.id IN (SELECT max(id) FROM check_ins GROUP BY check_ins.person_id)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, hook up the scope in the model definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CheckIn</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:latest</span><span class="p">,</span> <span class="ss">Scopes</span><span class="p">:</span><span class="ss">:Latest</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since it&rsquo;s just a plain ol&#8217; class, you can give it <strong>other methods</strong> too:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/check_in/scopes/latest.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CheckIn</span><span class="o">::</span><span class="ss">Scopes</span><span class="p">:</span><span class="ss">:Latest</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span>
</span><span class='line'>    <span class="no">CheckIn</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">query_string</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">query_string</span>
</span><span class='line'>    <span class="s2">&quot;check_ins.id IN (SELECT max(id) FROM check_ins GROUP BY check_ins.person_id)&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also <strong>initialize it</strong> with some data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CheckIn</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:normal</span><span class="p">,</span>          <span class="ss">Scopes</span><span class="p">:</span><span class="ss">:KindScope</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Regular&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:guest</span><span class="p">,</span>           <span class="ss">Scopes</span><span class="p">:</span><span class="ss">:KindScope</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Guest&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:volunteer</span><span class="p">,</span>       <span class="ss">Scopes</span><span class="p">:</span><span class="ss">:KindScope</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Volunteer&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Any Benefit?</h2>

<p>Here&rsquo;s what I think:</p>

<p><strong>Pros:</strong></p>

<ul>
<li>Less visual noise.</li>
<li>Your model still reads like a table of contents.</li>
<li>Theoretically, you could test the scope in isolation (but I&rsquo;m too lazy, if the existing tests still pass, that&rsquo;s good enough for me :P).</li>
</ul>


<p><strong>Cons:</strong></p>

<ul>
<li>If the scope takes arguments, you can&rsquo;t tell right away.</li>
<li>It doesn&rsquo;t <em>actually</em> shrink the class&rsquo;s API: it&rsquo;s still a big ol&#8217; model.</li>
<li>It&rsquo;s not a known Rails practice.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building up vs Building out]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/03/11/building-up-vs-building-out/"/>
    <updated>2015-03-11T13:27:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/03/11/building-up-vs-building-out</id>
    <content type="html"><![CDATA[<p>While adding a big feature to <a href="http://get.planningcenteronline.com/check-ins">PCO Check-Ins</a>, I was struck with this way of describing my approach to adding complexity to the system.</p>

<!-- more -->


<p>Suppose you&rsquo;re given the task: &ldquo;Our system only handles data of type <em>X</em>, it also needs to handle data of type <em>Y</em>. Everywhere.&rdquo; All over the program, you need to check what kind of data you have, then choose to handle it the old way or handle it the new way.</p>

<p>Your program has one entry point and renders views outputs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>     +     
</span><span class='line'>     |     
</span><span class='line'>     |     
</span><span class='line'>+----+----+
</span><span class='line'>|    |    |
</span><span class='line'>|    |    |
</span><span class='line'>+    +    +
</span><span class='line'>A    B    C</span></code></pre></td></tr></table></div></figure>


<h2>Building Up</h2>

<p>One way to address this problem is to find everywhere you handle data type <em>X</em>, then extend it to handle type <em>Y</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">data</span><span class="o">.</span><span class="n">type_X?</span>
</span><span class='line'>  <span class="c1"># handle data type X</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c1"># handle data type Y</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your code paths now look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">         </span><span class="o">+</span><span class="err">     </span>
</span><span class='line'><span class="err">         </span><span class="o">|</span><span class="err">     </span>
</span><span class='line'><span class="err">         </span><span class="o">|</span><span class="err"> </span>
</span><span class='line'><span class="err">  </span><span class="o">+------+------+</span>
</span><span class='line'><span class="err">  </span><span class="o">|</span>      <span class="o">|</span>      <span class="o">|</span>
</span><span class='line'><span class="err">  </span><span class="o">|</span>      <span class="o">|</span>      <span class="o">|</span>
</span><span class='line'><span class="o">+-+-+</span>  <span class="o">+-+-+</span>  <span class="o">+-+-+</span>  <span class="o">&lt;-</span> <span class="n">check</span> <span class="k">for</span> <span class="n">type</span> <span class="n">X</span> <span class="ow">or</span> <span class="n">type</span> <span class="n">Y</span>
</span><span class='line'><span class="o">|</span>   <span class="o">|</span>  <span class="o">|</span>   <span class="o">|</span>  <span class="o">|</span>   <span class="o">|</span>
</span><span class='line'><span class="o">+</span>   <span class="o">+</span>  <span class="o">+</span>   <span class="o">+</span>  <span class="o">+</span>   <span class="o">+</span>
</span><span class='line'><span class="no">A1</span>  <span class="no">A2</span> <span class="no">B1</span>  <span class="no">B2</span> <span class="no">C1</span>  <span class="no">C2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your tree is deeper than it was. You slapped some complexity &ldquo;on top&rdquo; of the existing code.</p>

<h2>Building Out</h2>

<p>Another approach would be to implement a parallel set of views for rendering the new data. Your existing views don&rsquo;t change. Instead you add three new views:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">         </span><span class="o">+</span>
</span><span class='line'><span class="err">         </span><span class="o">|</span>
</span><span class='line'><span class="err">         </span><span class="o">|</span>
</span><span class='line'><span class="o">+--+--+--+--+--+--+</span>
</span><span class='line'><span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>     <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>     <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>
</span><span class='line'><span class="o">+</span>  <span class="o">+</span>  <span class="o">+</span>     <span class="o">+</span>  <span class="o">+</span>  <span class="o">+</span>
</span><span class='line'><span class="n">A</span>  <span class="n">B</span>  <span class="n">C</span>     <span class="n">D</span>  <span class="n">E</span>  <span class="n">F</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your program has grown &ldquo;out&rdquo;. It has more objects, but each one is doing a small job.</p>

<p>This way, your existing views stay simple. The new views can be equally simple. Hopefully, recycled code can be shared between views!</p>

<h2>In Rails</h2>

<p>Rather than adding <code>if</code>s in controller actions, add a new controller. Maybe it renders the same kind of objects as the existing controller &mdash; that&rsquo;s OK! It&rsquo;s worth it to add the extra controllers &amp; actions to keep the code paths simple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging: Behavior &amp; Purpose]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/03/01/debugging-behavior-and-purpose/"/>
    <updated>2015-03-01T15:53:00-05:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/03/01/debugging-behavior-and-purpose</id>
    <content type="html"><![CDATA[<p>To resolve a bug, a developer must know the <em>behavior</em> and the <em>purpose</em> of the program at hand. I&rsquo;ve been reading <a href="http://en.wikipedia.org/wiki/Lesslie_Newbigin">Lesslie Newbingin</a> and it made me think of this.</p>

<!-- more -->


<p>There are at least two kinds of bugs:</p>

<ul>
<li>The program crashes</li>
<li>The program does not crash, but it does not accomplish the desired result</li>
</ul>


<p>In either case, the developer must draw on two important facts in order to fix the bug:</p>

<ul>
<li>What is the <em>current behavior</em> of the program? How does it work?</li>
<li>What is the <em>purpose</em> of the program? Why does it exist?</li>
</ul>


<h3>Debugging: Behavior</h3>

<p>In some cases, a bug expresses itself by causing the program to crash. The fix  may be purely technical:</p>

<ul>
<li>don&rsquo;t enter an infinite loop</li>
<li>rectify an off-by-one error</li>
<li>fix a typo in the source code</li>
</ul>


<h3>Debugging: Purpose</h3>

<p>In other cases, a bug does <em>not</em> cause the program to crash. In fact, the program runs fine, but there is still a bug. Here, <em>purpose</em> is essential.</p>

<p>I often ask the product manager, &ldquo;How should this program behave?&rdquo; His response is dictated by the <em>design</em> of the application: why does it exist? What was it made for? What should it accomplish?</p>

<p>No amount of technical information can answer that question.</p>

<h3>Software without Purpose?</h3>

<p>Imagine error handling without purpose. Suppose an external web service returns <code>404 Not Found</code>. How should that be handled by our application? In a program whose design is unknown, the developer has no option but to hide the crash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="c1"># do something</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'>  <span class="kp">nil</span> <span class="c1"># who knows?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sometimes, this is the norm for American culture. Bugs in society aren&rsquo;t <em>treated</em> as much as <em>suppressed</em>. How could they be treated? We insist that discussions regarding the <em>purpose</em> of humanity are a private matter and not to be addressed in a public way. &ldquo;What&rsquo;s true for you might not be true for me.&rdquo;</p>

<h3>Product Manager of Product Managers</h3>

<p>A key tenet of Christianity is that, in the life of Jesus of Nazareth, God communicated to humans their purpose. It has traditionally been summarized as  &ldquo;The chief end of man is to worship God and enjoy him forever.&rdquo; This means we ought to live (individually and together) in light of God&rsquo;s supremacy and our togetherness as his children.</p>

<p>This opens the door to much more effective troubleshooting. When the system (human life, human society) fails, we can do more than apply technical bandages; we can refashion the system to better serve the purpose for which it was designed.</p>

<p>Nobody operates under a truly purposeless mindset. Indeed, even when we state a purpose, we find ourselves seeking to fulfill a different one. But we ought to ask: what design <em>should</em> we try to fulfill?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Refactoring by Keeping ApplicationController to a Minimum]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/01/17/happy-refactoring-by-keeping-applicationcontroller-to-a-minimum/"/>
    <updated>2015-01-17T10:24:00-05:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/01/17/happy-refactoring-by-keeping-applicationcontroller-to-a-minimum</id>
    <content type="html"><![CDATA[<p>Extending <code>ActionController::Base</code> <em>once</em>, in <code>ApplicationController</code>, is a great Ruby on Rails practice. However, if <code>ApplicationController</code> is your only abstract controller, it&rsquo;s likely to become a maintenance challenge. To avoid this, you should extend <code>ApplicationController</code> as needed and move as much code as possible into its subclasses.</p>

<!-- more -->


<h2>Feeling ApplicationController Pain</h2>

<p>So, our app is live. We&rsquo;ve dutily extended <code>ApplicationController</code> in all our other controllers, giving us an inheritance tree like this:</p>

<p><img src="http://rmosolgo.github.io/images/controller_inheritance_bad.png" width="500" height="500"></p>

<p>Fortunately, our app is a success and our customers want us to open an API. Let&rsquo;s use <code>API::BaseController</code> as the superclass of all our API controllers:</p>

<p><img src="http://rmosolgo.github.io/images/controller_inheritance_bad_with_api.png" width="500" height="500"></p>

<p>As our user base grows, we need a more robust permissions system. We tighten up restrictions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:authenticate!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since some actions are public, we skip the restrictions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ReportsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">skip_before_action</span> <span class="ss">:authenticate!</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ProfilesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">skip_before_action</span> <span class="ss">:authenticate!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve forgotten about our API, and when we deploy, we&rsquo;ll be quickly reminded that <code>ApplicationController</code> is involved in those requests too. Since <code>ApplicationController</code> touches <em>every request</em>, it&rsquo;s hard to be sure about exactly what will be affected by changes there.</p>

<h2>ApplicationController Gains Weight</h2>

<p>Left alone, <code>ApplicationController</code> can bloat for many reasons:</p>

<ul>
<li><strong>Authentication logic</strong>, perhaps with complex branching based on what the user is accessing, builds up little-by-little as the application is extended.</li>
<li><strong>Before-actions &amp; helpers</strong> which are used <em>often</em> but <em>not always</em> tend to accrue in <code>ApplicationController</code>, since they&rsquo;re &ldquo;used more than once.&rdquo;</li>
<li><strong>Oddball routes</strong> might be implemented in <code>ApplicationController</code> because no other existing controller seems like the right place.</li>
</ul>


<p>In JavaScript development, filling the global namespace with application code is a no-no. Similarly, <code>ApplicationController</code> is a near-global namespace, so each addition to it should be considered very carefully. When we add to (and remove from) <code>ApplicationController</code>, we&rsquo;re potentially altering <em>every</em> request that our application serves; how can we be sure we aren&rsquo;t breaking something?</p>

<h2>Isolating &ldquo;Parts&rdquo; of the App</h2>

<p>Returning to the example above, I think this inheritance tree is better:</p>

<p><img src="http://rmosolgo.github.io/images/controller_inheritance_good.png" width="500" height="500"></p>

<p>We&rsquo;ve introduced abstract classes for each &ldquo;part&rdquo; of the app. (I use quotes because I don&rsquo;t know a technical term for it!) Now, logged-in authentication would be handled by a subclass of <code>ApplicationController</code>, perhaps named <code>BaseController</code>. A logged-in controller would extend <code>BaseController</code>. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ItemsController</span> <span class="o">&lt;</span> <span class="no">BaseController</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly, public controllers would be in a namespace of their own, with their own base controller. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Public</span><span class="o">::</span><span class="no">ProfilesController</span> <span class="o">&lt;</span> <span class="ss">Public</span><span class="p">:</span><span class="ss">:BaseController</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is good because:</p>

<ul>
<li>You can refactor with more confidence, since you only have to load <em>part</em> of the app into memory when working on abstract controllers.</li>
<li>Stable parts of the app are more likely to remain stable (since they won&rsquo;t be affected by other parts).</li>
</ul>


<p>The corresponding file structure looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>controllers/
</span><span class='line'>  api/
</span><span class='line'>    base_controller.rb
</span><span class='line'>    items_controller.rb
</span><span class='line'>    profiles_controller.rb
</span><span class='line'>
</span><span class='line'>  public/
</span><span class='line'>    base_controller.rb
</span><span class='line'>    reports_controller.rb
</span><span class='line'>    profiles_controller.rb
</span><span class='line'>
</span><span class='line'>  staff/
</span><span class='line'>    base_controller.rb
</span><span class='line'>    stats_controller.rb
</span><span class='line'>
</span><span class='line'>  application_controller.rb
</span><span class='line'>  base_controller.rb
</span><span class='line'>  items_controller.rb
</span><span class='line'>  profiles_controller.rb
</span><span class='line'>  reports_controller.rb
</span></code></pre></td></tr></table></div></figure>


<p><em>(I&rsquo;ve left some controllers in the root namespace. If you like, you could put logged-in actions in a namespace too!)</em></p>

<p>And the routes might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:items</span><span class="p">,</span> <span class="ss">:profiles</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:public</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:profiles</span><span class="p">,</span> <span class="ss">:reports</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:staff</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:stats</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">resources</span> <span class="ss">:items</span><span class="p">,</span> <span class="ss">:profiles</span><span class="p">,</span> <span class="ss">:reports</span>
</span></code></pre></td></tr></table></div></figure>


<h2>When should we extend ApplicationController?</h2>

<p>I&rsquo;d say it&rsquo;s good to extend <code>ApplicationController</code> for each &ldquo;part&rdquo; of the app. It&rsquo;s a bit subjective, but here are some clues:</p>

<ul>
<li>Actions rendered with a <strong>different layout</strong> (or lack thereof). Your webservice, administration and public views are distinct parts of your app.</li>
<li>Actions using <strong>different authentication</strong> strategies. Keep API endpoints, public pages, and staff-only actions in separate sections. If a staff member goes rogue, you&rsquo;ll be able to tighten up that part of the app confidently :)</li>
<li>Actions with <strong>different frequently-used helpers or before-actions</strong>. If there&rsquo;s a before-action that&rsquo;s often skipped, Rails wants to tell you something: these controllers are different! Similarly, if you have controller-level helper methods, perhaps the controllers who depend on that helper should be in a &ldquo;part&rdquo; of their own.</li>
</ul>


<p>I hope a pattern like this will give you more freedom &amp; confidence when refactoring important parts of the request-response cycle!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defining mruby Methods with C]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/11/21/defining-mruby-methods-with-c/"/>
    <updated>2014-11-21T10:25:00-05:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/11/21/defining-mruby-methods-with-c</id>
    <content type="html"><![CDATA[<p>You can use C code to prepare methods for <a href="http://www.mruby.org">mruby</a> scripts.</p>

<!-- more -->


<p>The steps are:</p>

<ul>
<li>Defining a method</li>
<li>Getting argument values</li>
<li>Adding the method to the <code>mrb_state</code></li>
</ul>


<h2>Defining a Method</h2>

<p>To define a Ruby function, make a C function that:</p>

<ul>
<li>accepts two arguments, a <code>mrb_state</code> and a <code>mrb_value</code></li>
<li>returns a <code>mrb_value</code>.</li>
</ul>


<p>Here&rsquo;s a minimal method definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">mrb_value</span>
</span><span class='line'><span class="nf">ruby_method</span><span class="p">(</span><span class="n">mrb_state</span> <span class="o">*</span><span class="n">mrb</span><span class="p">,</span> <span class="n">mrb_value</span> <span class="n">self</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mrb_nil_value</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <strong>arguments</strong> are:</p>

<ol>
<li><code>mrb_state</code>, the current mruby VM instance</li>
<li><code>mrb_value</code>, the current <code>self</code> (caller of this method)</li>
</ol>


<p>Notice that you don&rsquo;t define the Ruby arguments here. You&rsquo;ll handle those later by getting them from the <code>mrb_state</code>.</p>

<p>The <strong>return type</strong> must be <code>mrb_value</code>. If it&rsquo;s not, your program will crash (<code>Segmentation Fault</code> :( ) when the return value is accessed (no compile-time error). If your method shouldn&rsquo;t return anything, use <code>return mrb_nil_value();</code></p>

<p>mruby implements a lot of the built-in classes&#8217; instance methods this way, for example: <code>String#capitalize!</code>(<a href="https://github.com/mruby/mruby/blob/e77ea4e5f2b823181020bb3a337509ba028b6dc4/src/string.c#L855">src</a>).</p>

<h2>Getting Arguments</h2>

<p>You might have noticed that your C function definition <em>didn&rsquo;t</em> define any arguments. Instead, you get your arguments by extracting them from <code>mrb_state</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">mrb_value</span>
</span><span class='line'><span class="nf">ruby_method</span><span class="p">(</span><span class="n">mrb_state</span> <span class="o">*</span><span class="n">mrb</span><span class="p">,</span> <span class="n">mrb_value</span> <span class="n">self</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Initialize a variable</span>
</span><span class='line'>  <span class="n">mrb_int</span> <span class="n">some_integer</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Extract a value</span>
</span><span class='line'>  <span class="n">mrb_get_args</span><span class="p">(</span><span class="n">mrb</span><span class="p">,</span> <span class="s">&quot;i&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mrb_int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">mrb_nil_value</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>mrb_get_args</code> takes a string whose letters say what kind of arguments and how many arguments to extract. The <a href="https://github.com/mruby/mruby/blob/5c6d6309b6b5e01ef3ff38f772e0fdd3fc5dd372/src/class.c#L437"><code>mrb_get_args</code> source</a> documents the different possibilities.</p>

<p>Notably, anything after a <code>|</code> is <strong>optional</strong>.</p>

<p>For a <strong>default value</strong>, assign a value to the variable and make the argument optional. In this example, <code>inherit</code> defaults to <code>TRUE</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="n">mrb_bool</span> <span class="n">inherit</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mrb_get_args</span><span class="p">(</span><span class="n">mrb</span><span class="p">,</span> <span class="s">&quot;|b&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">inherit</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s from <a href="https://github.com/mruby/mruby/blob/b28ec1bc88d29d8e7205401a6e323f20581d642f/src/variable.c#L988">C implementation of <code>Module#constants</code></a>. Another nice example is <a href="https://github.com/mruby/mruby/blob/e77ea4e5f2b823181020bb3a337509ba028b6dc4/src/string.c#L831">the <code>String#[]</code> source</a>.</p>

<h2>Adding Methods to mruby State</h2>

<p>To add a method to the mruby state, you must attach it to some object. To make a method global, you can define it on <code>Object</code>. Let&rsquo;s do that.</p>

<p>We&rsquo;ll use <code>mrb_define_method</code>, which accepts five arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">mrb_define_method</span><span class="p">(</span><span class="n">mrb_state</span> <span class="o">*</span><span class="n">mrb</span><span class="p">,</span> <span class="k">struct</span> <span class="n">RClass</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="n">mrb_func_t</span> <span class="n">func</span><span class="p">,</span> <span class="n">mrb_aspec</span> <span class="n">aspec</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>mrb_state *mrb</code>: the open mruby VM instance</li>
<li><code>struct RClass *c</code>: the mruby class to attach the method to</li>
<li><code>const char *name</code>: the Ruby name for this method</li>
<li><code>mrb_func_t func</code>: the C function to execute for this Ruby method</li>
<li><code>mrb_aspec aspec</code>: the number &amp; types of arguments for this method</li>
</ul>


<p>In fact, <strong>specifying arguments</strong> is not currently used (<a href="https://github.com/mruby/mruby/issues/791">github issue</a>). To pass some value here, you can use some <a href="https://github.com/mruby/mruby/blob/5c6d6309b6b5e01ef3ff38f772e0fdd3fc5dd372/include/mruby.h#L232-L251">convenient macros from <code>mruby.h</code></a>.</p>

<p>So, let&rsquo;s add a global method, <code>greet!</code>. Here&rsquo;s the method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="n">mrb_value</span>
</span><span class='line'><span class="nf">mrb_greet</span><span class="p">(</span><span class="n">mrb_state</span> <span class="o">*</span><span class="n">mrb</span><span class="p">,</span> <span class="n">mrb_value</span> <span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, mruby!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mrb_nil_value</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, attach it to <code>Object</code>, which will make it global:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">mrb_define_method</span><span class="p">(</span><span class="n">mrb</span><span class="p">,</span> <span class="n">mrb</span><span class="o">-&gt;</span><span class="n">object_class</span><span class="p">,</span> <span class="s">&quot;greet!&quot;</span><span class="p">,</span> <span class="n">mrb_greet</span><span class="p">,</span> <span class="n">MRB_ARGS_NONE</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, you can run in your Ruby script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">greet!</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Response to "Why Kids Sext"]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/11/18/response-to-why-kids-sext/"/>
    <updated>2014-11-18T21:15:00-05:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/11/18/response-to-why-kids-sext</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.theatlantic.com/magazine/archive/2014/11/why-kids-sext/380798/">cover article</a> of the November 2014 <a href="http://www.theatlantic.com/">Atlantic Monthly</a> told the story of sexting and police involvement in Louisa County, VA.</p>

<!-- more -->


<p>Sexting is not part of my life, but it&rsquo;s part of our culture (if Snapchat&rsquo;s $2 billion valuation shows anything). When we have kids of our own, I&rsquo;d like to do a good job preparing them for the world they&rsquo;re born into. If I&rsquo;ve learned anything from my own life, that means instructing them regarding technology-powered sexual perils.</p>

<p>When I consider sexting, I have a few questions:</p>

<ul>
<li><strong>Why does it happen?</strong> Is it a new phenomenon or simply a new face for an old one?</li>
<li><strong>Who is responsible?</strong> Who is involved and why do they do what they do?</li>
<li><strong>What should we do?</strong> Is it bad? Should American adults take any action?</li>
</ul>


<p>I thought I&rsquo;d share some of my thoughts on those questions after reading The Atlantic&rsquo;s <a href="http://www.theatlantic.com/magazine/archive/2014/11/why-kids-sext/380798/">&ldquo;Why Kids Sext&rdquo;</a> (by <a href="http://hannarosin.com/">Hanna Rosin</a>).</p>

<h2>Why does it happen?</h2>

<p>The author provides several explanations:</p>

<h4>Kids pressure one another.</h4>

<blockquote><p>When surveyed, by far the most common reason kids give for sexting is that their boyfriend or girlfriend wanted the picture&hellip; Englander singles out a distinct minority (12 percent) she calls the “pressured sexters,” who say they sexted only because they felt pressure. These girls are more vulnerable. They tend to &hellip; sext because they think they can get a boyfriend&hellip;</p></blockquote>

<p>A sad part for me is the role of the boys/young men:</p>

<blockquote><p> This is how one of them described his game to me: “A lot of girls, they stubborn, so you gotta work on them. You say, ‘I’m trying to get serious with you.’ You call them beautiful. You say, ‘You know I love you.’ You think about it at night, and then you wake up in the morning and you got a picture in your phone.”</p></blockquote>

<p>People want to be loved and they want to have intimate relationships. It&rsquo;s very sad when that desire is exploited!</p>

<h4>Sexting is their only option for intimacy.</h4>

<p>I actually beleive that all humans (even mean ones) desire to be known deeply and loved by other humans.</p>

<blockquote><p>“I live literally in the middle of nowhere, &hellip;  parents weren’t going to drop me off &hellip; Our only way of being alone was to do it over the phone. It was a way of kind of dating without getting in trouble. A way of being sexual without being sexual, you know? And it was his way of showing he liked me a lot and my way of saying I trusted him.”</p></blockquote>

<p>Again, you can hear the desire for intimacy (people equate sex with intimacy).</p>

<blockquote><p>The kids in Louisa County, like kids everywhere, are chronically overscheduled&hellip; Nighttime is the only time teens get to have intimate conversations and freely navigate their social world&hellip; [T]hat means checking up on the latest drama on Twitter&hellip;, filling up their Instagram accounts, or asking a girl for a pic.</p></blockquote>

<p>Sometimes you hear the joke about hobbies &ldquo;keeping {someone} off the street.&rdquo; Apparently you can&rsquo;t steamroll the desire for for social interaction out of a child!</p>

<h2>Who is responsible?</h2>

<p>I see a few different players in this scene:</p>

<ul>
<li>askers: those who request sexts</li>
<li>senders: those who comply with requests (or send unsolicited)</li>
<li>&ldquo;The system&rdquo;: schools, goverments, technology, etc</li>
<li>parents</li>
</ul>


<h4>Is it the askers?</h4>

<p>Writ large, there are two kinds of &ldquo;asks&rdquo;: those from uninvolved parties and those from &ldquo;committed&rdquo; parters.</p>

<blockquote><p>“Guys would pile them up,” one girl who had graduated a year earlier told me&hellip;. “It was more of a baseball-card, showing-off kind of thing&hellip; like when they were little boys, playing with Pokémon cards.”</p></blockquote>

<p>In the first case, it&rsquo;s (apparently) a matter of dominion &mdash; another manifestation of treating females objects to obtain. Nothing new, but shows how far we&rsquo;ve come. (Which is: nowhere).</p>

<blockquote><p>In the vast majority of cases, the picture lands only where it was meant to&hellip; “The only reason to regret it is if you get caught,” one girl told me.</p></blockquote>

<p>This article assumes that sexting a &ldquo;committed partner&rdquo; is OK. Protip: you&rsquo;ll probably break up with high-school boyfriend.</p>

<p>When people are seen naked, they feel ashamed. When you ask for a naked picture, you&rsquo;re now toying with that person&rsquo;s dignity. Not OK. (But to be fair, most people don&rsquo;t know that.)</p>

<h4>Is it the senders?</h4>

<p>This article doesn&rsquo;t paint the senders as passive victims. It uses phrases like &ldquo;sexual experimenters.&rdquo;</p>

<p>Seems to me that the senders are pursuing intimacy in an unproductive way. They long to be known and accepted, but they&rsquo;re left with regret. Whether external (exposé) or internal (guilt &amp; shame), they might feel repercussions of their actions, which is always sad.</p>

<h4>Is it &ldquo;the system?&rdquo;</h4>

<p>I believe that the system is the sum of its parts. If society members behaved, the system would function. If the system is broken, look to the society members. So, the answer to this question is just the sum of the other answers. Moving on.</p>

<h4>Is it the parents?</h4>

<p>Parents are notably absent in this article. They appear a few times:</p>

<ul>
<li>shaming a child caught sexting</li>
<li>one bit of advice for parents understanding social media</li>
</ul>


<p>That&rsquo;s pretty much it.</p>

<p>It&rsquo;s ironic that we pair the &ldquo;cult of parenthood&rdquo; with a growing distaste for instructing children (or rather, relegating instruction to non-parents).</p>

<p>This article describes in detail how lawyers, police officers, researchers and children cope with sexting, but makes very little mention of parents. I don&rsquo;t think it&rsquo;s a lack of focus in this article; I think it&rsquo;s a lack of focus in our culture. In fact, the article describes a sexting education meeting in Louisa County. Only &ldquo;about a dozen&rdquo; people attended.</p>

<h2>What should we do?</h2>

<blockquote><p>Teens in Louisa County, like teens everywhere, hear a lot about sex, but really know only a little about it.</p></blockquote>

<p>My instinct for solving this problem (like my instinct for solving all problems :S ) is to create &amp; disseminate knowledge. Obviously, I can&rsquo;t say &ldquo;Why don&rsquo;t you people teach your kids right about sex?&rdquo; becuase I haven&rsquo;t done it. But I hope to get up the nerve by the time my turn comes:</p>

<ul>
<li>We all want to be known and loved by others; it&rsquo;s a very powerful desire.</li>
<li>To be seen naked is to be known. I can&rsquo;t explain it, but it&rsquo;s an old truth. It&rsquo;s why we wear clothes even when it&rsquo;s hot outside. It&rsquo;s why certain combinations of attire (or lack thereof) are inappropriate in public. It&rsquo;s why you have bad dreams of leaving your pants at home.</li>
<li>To be known but not loved is brutal: you&rsquo;re stripped bare but not embraced. I imagine that&rsquo;s the feeling when naked pictures become public (cf. &ldquo;L&#8217;enfer, c&#8217;est les autres&rdquo;, <a href="http://en.wikipedia.org/wiki/Gaze">&ldquo;Gaze&rdquo;</a>).</li>
<li>Similarly, to be loved but not known is hollow: a relationship based on mutual pride-appeasing may provide tastes of intimacy but it is not intimacy. Eyelash-batting will wear off and you&rsquo;re realize you never actually <em>loved</em> the other. You loved <em>being admired by the other.</em></li>
<li>When you&rsquo;re married, you&rsquo;re known by your spouse. If your spouse keeps his or her vows, you&rsquo;ll also be loved. Marriage is a place where humans can be fully known and fully loved without fear of abandonment. Certainly loving the &ldquo;stranger you&rsquo;re married to&rdquo; is hard, but you&rsquo;re not likely count your spouse like a baseball card.</li>
</ul>


<p>I appreciated the advice included in this article:</p>

<blockquote><p>Boyd advises parents not to, for example, shut down accounts&hellip;Instead, parents should take a deep breath—even in the most uncomfortable scenarios—and ask questions.</p></blockquote>

<p>I guess this is it: in my youth, internet pornography was the new menace that nobody warned us about &amp; we all fell prey to (indirectly, if not directly). What will it be for my children?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Hello World" with mruby]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/11/15/hello-world-with-mruby/"/>
    <updated>2014-11-15T19:38:00-05:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/11/15/hello-world-with-mruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.mruby.com">mruby</a> is an implementation of Ruby that&rsquo;s designed to be lightweight &amp; integrated with C. To get started, you can run a bit of Ruby code from <em>inside</em> C code.</p>

<!-- more -->


<p>&ldquo;Hello World&rdquo; with mruby looks like this:</p>

<ul>
<li>Set up a new project and include mruby as a submodule</li>
<li>Write some C code that loads mruby and executes some Ruby code</li>
<li>Compile the C code &amp; run the resulting binary</li>
</ul>


<p>You can find an example similar to this one <a href="https://github.com/rmosolgo/mruby-examples/tree/master/01_hello_world">on GitHub</a>.</p>

<h2>Start a project</h2>

<p>Make a directory for your new project and enter it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir ~/hello-mruby
</span><span class='line'>$ cd ~/hello-mruby</span></code></pre></td></tr></table></div></figure>


<p>Clone mruby source and compile mruby:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:mruby/mruby.git
</span><span class='line'>$ cd mruby
</span><span class='line'>$ make
</span><span class='line'>$ cd ..</span></code></pre></td></tr></table></div></figure>


<p>(You need bison and Ruby to compile mruby, see the <a href="https://github.com/mruby/mruby/blob/master/INSTALL">install guide</a> for more information.)</p>

<p>You can check if compilation was successful by running <code>mirb</code> (interactive mruby):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mruby/bin/mirb
</span><span class='line'>mirb - Embeddable Interactive Ruby Shell
</span><span class='line'>
</span><span class='line'>&gt; 1 + 1
</span><span class='line'> =&gt; 2</span></code></pre></td></tr></table></div></figure>


<h2>Write the program</h2>

<p>Here&rsquo;s the whole of <code>hello_world.c</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* include mruby VM &amp; compiler */</span>
</span><span class='line'><span class="cp">#include &quot;mruby.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;mruby/compile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="cm">/* make a mruby instance */</span>
</span><span class='line'>  <span class="n">mrb_state</span> <span class="o">*</span><span class="n">mrb</span> <span class="o">=</span> <span class="n">mrb_open</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* write some code */</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">code</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;p &#39;Hello world!&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* use mruby to execute code from string */</span>
</span><span class='line'>  <span class="n">mrb_load_string</span><span class="p">(</span><span class="n">mrb</span><span class="p">,</span> <span class="n">code</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s break that down:</p>

<ul>
<li><p><strong>Include mruby &amp; compiler</strong>. The mruby VM takes bytecode instructions. The compiler is used to turn a string of Ruby code into mruby bytecode. <code>mrb_load_string</code> handles both steps: Parse &amp; compile Ruby code, then execute with the mruby VM.</p></li>
<li><p><strong>Make a mruby instance</strong>. Create an instance of the mruby VM. This object contains the state of the Ruby evnironment. Besides using it to execute code, you can inject values into the Ruby environment or call Ruby code from C.</p></li>
<li><p><strong>Use mruby to execute code from string</strong>. As described above, in this case, the string will be turned into VM instructions first, then executed by mruby.</p></li>
</ul>


<h2>Compile &amp; run</h2>

<p>Compile your C application, referencing the necessary mruby files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">gcc</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">o</span> <span class="n">hello_world</span> <span class="o">-</span><span class="n">Imruby</span><span class="o">/</span><span class="n">include</span>  <span class="o">-</span><span class="n">lmruby</span>  <span class="o">-</span><span class="n">Lmruby</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">host</span><span class="o">/</span><span class="n">lib</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, execute the resulting binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">hello_world</span>
</span><span class='line'><span class="s">&quot;Hello world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You did it!</p>

<h2>What next?</h2>

<ul>
<li>Use <code>mrbc</code> to precompile <code>.rb</code> into mruby bytecode.</li>
<li>Modify <code>mrb_state</code> from C with things like <code>mrb_define_class</code>, <code>mrb_define_method</code> and <code>mrb_define_const</code>.</li>
<li>Call Ruby methods from C with <code>mrb_funcall</code>.</li>
</ul>


<p>However, I don&rsquo;t know of any English documentation for these things yet!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why (I Think) We're Leaving Batman.js]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/09/07/why-i-think-were-leaving-batman-dot-js/"/>
    <updated>2014-09-07T20:19:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/09/07/why-i-think-were-leaving-batman-dot-js</id>
    <content type="html"><![CDATA[<p>Sadly, <a href="http://get.planningcenteronline.com">PCO</a> is getting out of the batman.js game.</p>

<!-- more -->


<p>From where I sit, I think it boils down to:</p>

<ul>
<li>The framework never hit critical mass (and lost what it had)</li>
<li>The framework&rsquo;s magic made some problems impossible to debug</li>
<li>Client-side apps aren&rsquo;t good for business</li>
<li>Rails, Turbolinks &amp; React will do just fine</li>
</ul>


<p>Batman.js is a great framework with some amazing, well-tested features and I&rsquo;m sorry to see it go this way for us!</p>

<h2>No Critical Mass</h2>

<p>Batman.js was an early entrant to the &ldquo;Framework Wars&rdquo;. It was production-ready by early 2013, which made it appealing at that point. However,</p>

<ul>
<li>there was very little &ldquo;evangelism&rdquo; by its creators (almost no talks, very little documentation, no &ldquo;media presence&rdquo;)</li>
<li>early adopters were not &ldquo;invited in&rdquo; (unanswered github issues, for example)</li>
</ul>


<p>When Shopify pulled out (around <a href="https://github.com/batmanjs/batman/graphs/contributors">fall 2013</a>?), a ton of knowledge and resources were removed with no viable replacement.</p>

<h2>Magic Problems</h2>

<p>Batman.js is loaded with awesome APIs that were fun to use and satisfying when they worked. However, when it <em>didn&rsquo;t work</em>, you were up a creek without a paddle. There was:</p>

<ul>
<li>no helpful error messages</li>
<li>no support on github, stack overflow or IRC</li>
<li>no documentation or information of any kind about the inner workings</li>
<li>no debugging tools</li>
</ul>


<p>I&rsquo;ve seen a lot of batman.js users pull their hair out yelling, &ldquo;Why doesn&rsquo;t this <em>work</em>?!&rdquo; Indeed, that&rsquo;s what drove me to learn it from the source.</p>

<h2>Client-Side Issues</h2>

<p>Making a whole app in JavaScript has a lot of sex appeal, but several things make it bad for real-life business:</p>

<ul>
<li>Bug-tracking tools (namely Bugsnag for JS) are not as good (especially when you throw CoffeeScript &amp; minification in the mix)</li>
<li>Browser environments are outside your control (I got a lot of bugsnags for peoples&#8217; browser extensions)</li>
<li>State can get weird &mdash; after having the app open for an hour, data can just get messed up! (Maybe this doesn&rsquo;t happen for better programmers.)</li>
</ul>


<p><em>Not my problem:</em></p>

<p><img src="http://rmosolgo.github.io/images/extension_errors.png" width="500"></p>

<p><em>No es mi problema:</em></p>

<p><img src="http://rmosolgo.github.io/images/extension_errors2.png" width="900"></p>

<p>You just don&rsquo;t realize the luxury of reliable bugsnags until they&rsquo;re gone! So many Check-Ins bugsnags leave no trace of what actually went wrong.</p>

<h2>Other Options are OK, too</h2>

<p>We have a solid data model, HTML templates and CSS to boot. It stinks to throw away all that code, but I forgot how amazingly fast it is to code Ruby on Rails.</p>

<p>JS MVC types will look down their noses at Turbolinks, but it <em>works</em> and it has a lot of eyes on it. Combined with <code>react-rails</code>, it&rsquo;s a really strong option!</p>

<h2>What Now?</h2>

<p>In short, Rails-rendered HTML, Turbolinks &amp; <code>form_for ... remote: true</code>, and ReactJS for live-updates. There are a few things I am looking forward to:</p>

<ul>
<li><strong>RUBY BUGSNAGS</strong> with stack traces, request environments and everything!</li>
<li><strong>Less state.</strong> Fewer things that can randomly affect other things in ways I didn&rsquo;t think about.</li>
<li><strong>ReactJS.</strong> <code>Batman.View</code> is an amazing thing, but it makes me appreciate the dead-simple API of a React component. It can only get data from one place, no other objects can mess with it, its lifecycle is <em>very</em> simple (and works as documented), etc etc. I write a lot more code to do a lot less with React, but I think it&rsquo;s going to be a lot more stable, and that&rsquo;s worth it.</li>
</ul>


<p>We held on to Batman.js for a long time because it lended itself to <em>live-updating everything</em>. I think React is going to cover the a few key things there, and just <em>changing pages</em> will do the rest. So far I&rsquo;ve hooked up Pusher to Flux-style stores, then wrapped anything live-updating in a React component that observes that store. It&rsquo;s a lot more hands-on than Batman.js updates, but it has other advantages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Render Scope in AngularJS and Batman.js]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/08/10/render-scope-in-angular-dot-js-and-batman-dot-js/"/>
    <updated>2014-08-10T18:45:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/08/10/render-scope-in-angular-dot-js-and-batman-dot-js</id>
    <content type="html"><![CDATA[<p><a href="http://batmanjs.org">Batman.js</a> and <a href="http://angularjs.org">AngularJS</a> both create hierarchical view scopes, but their implementations are very different.</p>

<!-- more -->


<p><em>(please forgive my inconsistent rendering of AngularJS/Angular/Angular.js/angular, I don&rsquo;t know which one is right!)</em></p>

<p>In batman.js and Angular, there is a view scope <em>hierarchy</em> which mirrors the DOM. In this heirarchy, objects may:</p>

<ul>
<li>add values into the render scope</li>
<li>access <em>their own</em> values</li>
<li>belong to a <em>parent object</em></li>
<li>access values from <em>their parents</em></li>
<li>have <em>child objects</em> of their own</li>
</ul>


<p>Consider a page like this:</p>

<p><a href="http://rmosolgo.github.io/images/batmanjs_nested_views.png"><img src="http://rmosolgo.github.io/images/batmanjs_nested_views.png" alt="Batman.js view hierarchy" /></a></p>

<p>The <code>HouseholdView</code> has many child views. The <code>PersonView</code>s belong to their parent, <code>HouseholdView</code>. They may access values from <code>HouseholdView</code> (such as the shared <code>householdName</code>).</p>

<p><em>Note: The batman.js view hierarchy includes a few other objects as well &mdash; see below.</em></p>

<h1>Finding Values in the Hierarchy</h1>

<p>To answer the question &ldquo;how can child views access data from their parents&rdquo;, Batman.js and Angular take different approaches.</p>

<h3>$scope &amp; Prototypal Inheritance</h3>

<p>In Angular, data bindings are evaluated against a <strong>magical <code>$scope</code> object</strong>. The scope object has key-value pairs which correspond to values in the data bindings. When <code>$scope</code>s are created, Angular massages (tampers with?) the prototypal inheritance chain so that a child scope&rsquo;s prototype <em>is</em> its parent scope.</p>

<p>(Usually, an object&rsquo;s prototype is another &ldquo;pristine&rdquo; object of its same type. It&rsquo;s generally treated as the &ldquo;perfect instance&rdquo; of the type. Other instances delegate to the prototype for properties that aren&rsquo;t defined explicitly on themselves.)</p>

<p>In this case, a child <code>$scope</code>&rsquo;s prototype is not a &ldquo;pristine instance&rdquo;, but instead it&rsquo;s the parent <code>$scope</code> object. That way, if a value isn&rsquo;t found in a child scope, it is looked up in the prototype chain. This is <strong>brilliant</strong>. Angular delegates value lookup to built-in JavaScript features. (There is one gotcha described below.)</p>

<p>When a parent <code>$scope</code> has many children, all children have the same parent <code>$scope</code> object as their prototype.</p>

<h3>Batman.View &amp; View::lookupKeypath</h3>

<p>Batman.js builds a <strong>tree of <code>Batman.View</code> objects</strong>. The root of the tree is called the <code>LayoutView</code> and it is created automatically by batman.js. Each view keeps track of its children in its <code>subviews</code>, which is a <code>Batman.Set</code> containing views that are rendered inside it. Each view also keeps track of its <code>superview</code>, which is its parent <code>Batman.View</code>.</p>

<p>To evaluate data bindings, batman.js uses <code>lookupKeypath</code> on the view in question. This function climbs the &ldquo;view hierarchy&rdquo;, which actually includes a few extra objects:</p>

<ul>
<li>The <code>Batman.Controller</code> instance which rendered the view</li>
<li><code>Batman.currentApp</code>, which is the <code>Batman.App</code> subclass that you defined (the clas, not an instance)</li>
<li><code>Batman.container</code>, which is usually <code>window</code></li>
</ul>


<p>Here&rsquo;s the whole view hierarchy from the previous example:</p>

<p><a href="http://rmosolgo.github.io/images/batmanjs_nested_views_whole_tree.png"><img src="http://rmosolgo.github.io/images/batmanjs_nested_views_whole_tree.png" alt="The whole batman.js view hierarchy" /></a></p>

<p>Since <code>Batman.currentApp</code> is in the view hierarchy, any <code>@classAccessor</code>s you define there are accessible in view bindings, akin to global scope in JavaScript.</p>

<h1>Automatically-Created Scopes</h1>

<p>In batman.js and Angular, there are data bindings that create child scopes of their own. For example, <code>ng-repeat</code> and <code>data-foreach</code> both create a collection of child scopes with the same parent.</p>

<p>Angular does this by creating many child <code>$scopes</code> with the same parent <code>$scope</code> as their prototype.</p>

<p>Batman.js does this by automatically adding nodes to the view hierarchy. One downside of batman.js is that creating lots and lots of new views is CPU-intensive. I don&rsquo;t know whether the same is true for creating <code>$scope</code>s.</p>

<h1>How Does It Know Which Scope to Bind To?</h1>

<p>When I was reading about <code>$scope</code>, I learned that some new Angular users hit a snag when they try to set values on a <em>parent scope</em> from within a <em>child scope</em>. As JavaScript should, it updates the child <code>$scope</code> with the new value, not the parent <code>$scope</code>, which is the child&rsquo;s prototype.</p>

<p>That&rsquo;s how prototypal inheritance works: It looks up missing values on the prototype, but it sets <em>new</em> values on the instance. Then, it stops &ldquo;falling back&rdquo; to the prototype for the property that was set on the instance.</p>

<p>To work around this, it&rsquo;s recommended to &ldquo;always use a <code>.</code> in your <code>ng-model</code>s&rdquo;. (<code>ng-model</code> is a binding that creates a child scope.)</p>

<p>Batman.js doesn&rsquo;t have this problem because, when uses <code>lookupKeypath</code>, it remembers which <code>View</code> object was the target for that keypath, then updates <em>that object</em> whenever the keypath changes.</p>

<p>However, Batman.js is prone to a different gotcha. If you leave an accessor unset (ie, returns <code>undefined</code>), then set it <em>after</em> a view has rendered, it&rsquo;s possible that <code>View::lookupKeypath</code> won&rsquo;t find it correctly. To avoid this, set defaults (or <code>null</code>) before bindings are evaluated:</p>

<ul>
<li>before <code>@render</code> in controller actions</li>
<li>in the <code>constructor</code> for view instances</li>
</ul>


<p>Or, make sure <code>@accessor</code>s return <code>null</code> instead of <code>undefined</code>.</p>

<p>Batman.js treats <code>undefined</code> as the signal that an object doesn&rsquo;t have an accessor for a keypath, so be careful when setting keys <code>undefined</code>!</p>

<h1>How Does It Know When to Update the DOM?</h1>

<p>When these scope objects (<code>View</code> or <code>$scope</code>) change, the framework must update the DOM accordingly.</p>

<p>Angular has a &ldquo;digest cycle&rdquo; where it checks for changes in the <code>$scope</code> since last run, then updates the DOM if necessary. It automatically tracks any values that are put into templates. You can also watch other keys on <code>$scope</code> with <code>$scope.$watch</code>. If you modify <code>$scope</code> from <em>outside</em> Angular.js code, you must manually trigger the digest cycle with <code>$scope.$apply</code>.</p>

<p><code>Batman.View</code> uses the <a href="http://rmosolgo.github.io/blog/2014/04/20/automatic-source-tracking-in-batman-dot-js/"><code>Batman.Property</code></a> system to automatically track dependencies and changes. Any keypath that is passed to a <code>data-</code> binding is automatically observed. DOM updates are triggered when:</p>

<ul>
<li>A keypath is updated with <code>set</code>. Doesn&rsquo;t matter whether it&rsquo;s inside batman.js code or inside an AJAX callback &mdash; batman.js will recognize the update either way.</li>
<li>A property&rsquo;s dependencies change. When you declare a computed property with <code>@accessor</code> and bind it to a view, the view will update the DOM whenever that property&rsquo;s dependencies cause it to change.</li>
</ul>


<p>(In fact, those two cases are the heart of observability in batman.js: assign a value with <code>set</code> or delegate to batman.js&rsquo;s source tracking.)</p>

<p>To force an update, use <code>set</code> to update a bound property or one of its dependencies.</p>

<h1>Other Random Points</h1>

<ul>
<li>Angular&rsquo;s &ldquo;evalute an expression&rdquo; is like batman.js&rsquo;s &ldquo;lookup a keypath&rdquo;</li>
<li><code>Batman.View::propagateToSubviews</code> is like <code>$scope.$broadcast</code>: it sends messages down the view tree.</li>
<li>As of batman.js almost-v0.17, there is no analog for <code>$scope.$emit</code> (which sends events <em>up</em> the view chain)</li>
<li>batman.js exports global function <code>$context($0)</code> which is just like <code>angular.element($0).scope()</code> (where <code>$0</code> is the highlighted element in the Chrome inspector).</li>
</ul>


<h1>My Opinion</h1>

<p>I think Angular&rsquo;s <code>$scope</code> is brilliant. I imagine it&rsquo;s performant as well, although I don&rsquo;t know (and I&rsquo;m currently writing without internet access). It introduces few gotchas. In general, it seems like it Just Works<sup>TM</sup>.</p>

<p>I&rsquo;m in the market to improve the performance of <code>Batman.View</code>, but I&rsquo;m not sure I can take anything from <code>$scope</code>. All of batman.js depends on playing by the observability rules. I don&rsquo;t see any way I can get native JS prototypal inheritance to participate in that.</p>

<p>I also like sticking with the &ldquo;It&rsquo;s just batman.js&rdquo; in the view layer. If you can write good <code>@accessor</code>s, then you&rsquo;ve mastered <code>Batman.View</code>, too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being the Judge]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/08/02/being-the-judge/"/>
    <updated>2014-08-02T22:08:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/08/02/being-the-judge</id>
    <content type="html"><![CDATA[<p>I was just pondering whether a person ought to have children or not. It&rsquo;s funny when I try to be the judge.</p>

<!-- more -->


<p>Propagation of the human race is a funny business. There&rsquo;s no test for it. You don&rsquo;t even have to get a license, like you do for driving or for getting married. You just &hellip; <em>do</em> it. Even if you think about it carefully and make the decision with solemnity, that&rsquo;s no guarantee of the outcome. You might just get a rascal and there&rsquo;s nothing to be done about it.</p>

<h3>Judging</h3>

<p>I often find myself assessing whether something is good or bad, right or wrong, whether its something in my life, or something out in the world, or just an idea of this or that. In the end, I don&rsquo;t believe that I make a great judge: I don&rsquo;t have all the information, I&rsquo;m short-sighted and I&rsquo;m lacking in perception and wisdom.</p>

<p>I realized just now that in a way, it&rsquo;s just <em>not my role</em> to judge. I think that&rsquo;s the meaning of &ldquo;<a href="http://www.esvbible.org/Matthew+13:24/">Don&rsquo;t separate the wheat from the weeds, I&rsquo;ll do that at harvest time</a>&rdquo;. A person&rsquo;s job is to live a human life according to God&rsquo;s call. Generally, this means extending patience, forgiveness &amp; guidance in deference to God&rsquo;s judgements on his appointed day.</p>

<h3>It&rsquo;s like&hellip;</h3>

<p>It&rsquo;s like in a movie when a boy finds that the CEO&rsquo;s office is unlocked. He tiptoes to the tall, wide desk. He climbs into the big leather chair and gives it a swing to the right and left. He helps himself to a pen and practices his signature on the company letterhead. &ldquo;Very nice!&rdquo;</p>

<p>Of course, the door clicks again. It&rsquo;s the boss. With a downward flick of his finger, he signals for the boy to get down. Although the boy likes the feeling of the big chair, he&rsquo;s not fit for the duties of CEO.</p>

<h3>My Role</h3>

<p>This is freeing. I&rsquo;m prone to getting caught up in matters of judgement that are, in fact, beyond me. I would do well to determine the way that the Lord has put before me and walk it, leaving executive decisions to the executive. Throughout history and in my experience, he has proven worthy of that trust.</p>

<p>Certainly it&rsquo;s good to try to understand the world, but when you come up short, that&rsquo;s OK. The boss has the whole plan in mind and he&rsquo;s checked the accounts twice. It&rsquo;s going to add up! Fulfill your duties to the utmost!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Computed Properties: Batman.js and Ember.js]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/08/02/computed-properties-batman-dot-js-and-ember-dot-js/"/>
    <updated>2014-08-02T09:38:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/08/02/computed-properties-batman-dot-js-and-ember-dot-js</id>
    <content type="html"><![CDATA[<p><a href="http://batmanjs.org">Batman.js</a> is a front-end MVC framework with an unrivaled implementation of key-value observing. I will explore computed properties in batman.js by contrasting them with Ember.js&rsquo;s computed properties.</p>

<!-- more -->


<p>First, disclaimers!</p>

<ul>
<li>I didn&rsquo;t write any of the <code>Batman.Property</code> code that makes this feature possible. I&rsquo;m only a fanboy!</li>
<li>I don&rsquo;t know Ember.js. I&rsquo;ve just gathered examples from the <a href="http://emberjs.com/guides">Ember Guides</a>.</li>
</ul>


<p>To explore computed properties, let&rsquo;s take the <strong>canonical <code>fullName</code> example</strong>. It:</p>

<ul>
<li>depends on two other properties, <code>firstName</code> and <code>lastName</code></li>
<li>returns a string that joins <code>firstName</code> and <code>lastName</code> with a space</li>
<li>can be set</li>
<li>sets <code>firstName</code> and <code>lastName</code> by splitting on whitespace</li>
</ul>


<p>We&rsquo;ll also explore an <strong>aggregrated <code>roster</code> property</strong> which:</p>

<ul>
<li>depends on <code>fullName</code> for each person</li>
<li>joins <code>fullName</code> with <code>,</code></li>
</ul>


<h2>fullName in Ember.js</h2>

<p>(This is yanked wholesale from the <a href="http://emberjs.com/guides/object-model/computed-properties/">Computed Properties Guide</a>.)</p>

<p>A couple of things to notice:</p>

<ul>
<li><code>fullName</code> is defined as <em>one function</em> which handles <code>get</code> and <code>set</code> operations.</li>
<li><code>fullName</code> must be told what properties it depends on.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Person</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">firstName</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="c1">// These aren&#39;t necessary, they&#39;re</span>
</span><span class='line'>  <span class="nx">lastName</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>  <span class="c1">// just for clarity.</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fullName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">previousValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// setter</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">nameParts</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">,</span> <span class="nx">nameParts</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">,</span>  <span class="nx">nameParts</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// getter, also the return value is cached</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">,</span> <span class="s1">&#39;lastName&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage is pretty standard: use <code>get</code> and <code>set</code> to access properties.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">captainAmerica</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="nx">captainAmerica</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;fullName&#39;</span><span class="p">,</span> <span class="s2">&quot;William Burnside&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">captainAmerica</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">);</span> <span class="c1">// William</span>
</span><span class='line'><span class="nx">captainAmerica</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">);</span>  <span class="c1">// Burnside</span>
</span></code></pre></td></tr></table></div></figure>


<h2>fullName in Batman.js</h2>

<p>Two things to notice:</p>

<ul>
<li><code>get</code> and <code>set</code> operations are defined <em>separately</em>.</li>
<li><code>fullName</code> doesn&rsquo;t have to be told what its dependencies are.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nb">Object</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;firstName&#39;</span> <span class="c1"># not necessary,</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;lastName&#39;</span>  <span class="c1"># just here for clarity</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;fullName&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">get: </span><span class="nf">(key) -&gt;</span> <span class="s">&quot;</span><span class="si">#{</span><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;firstName&#39;</span><span class="p">)</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;lastName&#39;</span><span class="p">)</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class='line'>    <span class="nv">set: </span><span class="nf">(key, value) -&gt;</span>
</span><span class='line'>      <span class="nv">nameParts = </span><span class="nx">value</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">@set</span><span class="p">(</span><span class="s">&#39;firstName&#39;</span><span class="p">,</span> <span class="nx">nameParts</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>      <span class="nx">@set</span><span class="p">(</span><span class="s">&#39;lastName&#39;</span><span class="p">,</span> <span class="nx">nameParts</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">value</span> <span class="c1"># should return newly-set value, although the `get` function will be used for caching.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The usage is almost identical:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">captainAmerica = </span><span class="k">new</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span>
</span><span class='line'><span class="nx">captainAmerica</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s">&#39;fullName&#39;</span><span class="p">,</span> <span class="s">&#39;William Burnside&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">captainAmerica</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;firstName&#39;</span><span class="p">)</span> <span class="c1"># William</span>
</span><span class='line'><span class="nx">captainAmerica</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;lastName&#39;</span><span class="p">)</span>  <span class="c1"># Burnside</span>
</span></code></pre></td></tr></table></div></figure>


<h2>roster in Ember.js</h2>

<p>(This was adapted from the <a href="http://emberjs.com/guides/object-model/computed-properties-and-aggregate-data/">Computed Properties and Aggregate Data Guide</a>.)</p>

<p>Some things stood out to me:</p>

<ul>
<li><code>roster</code>&rsquo;s properties are declared with a DSL. Array dependencies are limited to one layer deep (ie, you can&rsquo;t use <code>@each</code> twice).</li>
<li><code>mapBy</code> is provided by <code>Ember.Enumerable</code> to handle arrays of objects. Nice!</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">PeopleController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">people</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span><span class="nx">firstName</span><span class="o">:</span> <span class="s2">&quot;Tom&quot;</span><span class="p">,</span> <span class="nx">lastName</span><span class="o">:</span> <span class="s2">&quot;Dale&quot;</span><span class="p">}),</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span><span class="nx">firstName</span><span class="o">:</span> <span class="s2">&quot;Yehuda&quot;</span><span class="p">,</span> <span class="nx">lastName</span><span class="o">:</span> <span class="s2">&quot;Katz&quot;</span><span class="p">})</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">roster</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">people</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;people&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">people</span><span class="p">.</span><span class="nx">mapBy</span><span class="p">(</span><span class="s1">&#39;fullName&#39;</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;people.@each.fullName&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>roster in Batman.js</h2>

<p>Here&rsquo;s the analogous construction in batman.js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">PeopleController</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Controller</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;people&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Set</span><span class="p">([</span> <span class="c1"># this is future-code: constructor will take an array in v0.17.0</span>
</span><span class='line'>      <span class="k">new</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span><span class="p">(</span><span class="nv">firstName: </span><span class="s">&quot;Tom&quot;</span><span class="p">,</span> <span class="nv">lastName: </span><span class="s">&quot;Dale&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">new</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span><span class="p">(</span><span class="nv">firstName: </span><span class="s">&quot;Yehuda&quot;</span><span class="p">,</span> <span class="nv">lastName: </span><span class="s">&quot;Katz&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;roster&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;people&#39;</span><span class="p">).</span><span class="nx">mapToProperty</span><span class="p">(</span><span class="s">&#39;fullName&#39;</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s">&#39;, &#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing is the same:</p>

<ul>
<li><code>mapToProperty</code> works like <code>mapBy</code></li>
</ul>


<p>You might notice two big differences:</p>

<ul>
<li><code>people</code> is a <code>Batman.Set</code> instead of a native Array.</li>
<li><code>roster</code> didn&rsquo;t have to be told what its dependencies are</li>
</ul>


<p>By using batman.js data structures inside <code>@accessor</code> functions, we benefit from batman.js&rsquo;s <a href="http://rmosolgo.github.io/blog/2014/04/20/automatic-source-tracking-in-batman-dot-js/">automatic source tracking</a>. It looks like automatic source tracking was considered by the Ember core team, but deemed <a href="https://github.com/emberjs/ember.js/issues/269#issuecomment-3178319">impossible</a> or <a href="https://github.com/emberjs/ember.js/issues/386#issuecomment-3523589">prohibitively expensive</a>.</p>

<p>I recently saw a quote in a <a href="https://www.youtube.com/watch?v=-DX3vJiqxm4">React.js talk</a>:</p>

<blockquote><p>Intellectuals solve probelms. Geniuses prevent them. &ndash; Albert Einstein</p></blockquote>

<p>I think that&rsquo;s just what the Shopify team did when they implemented <code>Batman.Observable</code>! The API is very simple and it Just Works<sup>TM</sup>.</p>

<h2>My Opinion</h2>

<p><strong>Pros of batman.js:</strong></p>

<ul>
<li>Elegant <code>@accessor</code> API for getters and setters: define <code>get</code> and <code>set</code> separately instead of testing for arguments.</li>
<li>Automatic dependency tracking: batman.js knows what objects &amp; properties were accessed during computation and observes accordingly.</li>
<li>There&rsquo;s no limit to the depth of enumerable dependencies. Any property of a <code>Batman.Object</code> that&rsquo;s accessed will be tracked, no matter where it exists in the app.</li>
</ul>


<p>In fact, <code>@accessor</code> is the heart and soul of a batman.js app. You&rsquo;re basically declaring a system of computed properties, then updating that system from user input. Batman.js propagates information to wherever it needs to be.</p>

<p><strong>Cons of batman.js:</strong></p>

<ul>
<li>&ldquo;It&rsquo;s just not Ember.&rdquo; You miss out on huge user base, corporate support, and everything that goes with that.</li>
<li>Beyond that, batman.js resources are sparse. The <a href="http://batmanjs.org/docs/index.html">new guides</a>, <a href="https://www.softcover.io/read/b5c051f3/batmanjs_mvc_cookbook">cookbook</a> and <a href="http://batmanjs.org/docs/index.html">API docs</a> are improving every week, but for advanced usage you still have to sourcedive sometimes.</li>
<li>There <strong>is</strong> a performance hit for global observability. The only place I&rsquo;ve noticed it is with complex iteration views (<a href="https://github.com/batmanjs/batman/issues/1086">batmanjs/batman#1086</a>). I&rsquo;m hoping to tackle this soon since it&rsquo;s becoming an issue in <a href="http://get.planningcenteronline.com/check-ins">PCO Check-ins</a>.</li>
</ul>


<p>I&rsquo;m not aware of any features missing from batman.js, but I do miss the &ldquo;googleability&rdquo; of a well-traveled path. Batman.js also lacks some of the dev tools like a decent Chrome extension and a command-line client.</p>

<p>I always want to know <em>how</em> things works, so getting in the source is actually a benefit for me.</p>

<p><strong>Six of one, half-dozen of the other:</strong></p>

<ul>
<li>Dependency DSL vs <code>Batman.{DataStructure}</code></li>
<li>Calling super: <code>this._super</code> vs. <code>@wrapAccessor</code></li>
<li>External API with <code>get</code> and <code>set</code></li>
<li>Cached values in computed properties</li>
<li>In batman.js, you can opt out of tracking with <code>Batman.Property.withoutTracking</code>. It&rsquo;s obscure, but I think it&rsquo;s ok because batman.js always covers the more common case.</li>
</ul>


<p>One thing that I found in neither framework was rate-limited properties, a la Knockout. I&rsquo;d love to have a built-in option for this in batman.js.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Event Handlers in Batman.js]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/07/28/event-handlers-in-batman-dot-js/"/>
    <updated>2014-07-28T13:23:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/07/28/event-handlers-in-batman-dot-js</id>
    <content type="html"><![CDATA[<p>In <a href="http://batmanjs.org">batman.js</a>, event handlers respond to user interactions like &ldquo;click&rdquo; and &ldquo;submit&rdquo;. You can use them to modify application state in response to those interactions.</p>

<!-- more -->


<p>Let&rsquo;s look at:</p>

<ul>
<li>What event handlers are and where they&rsquo;re defined</li>
<li>How you can connect handlers to DOM events</li>
<li>How you can pass arguments to event handlers</li>
<li>What <code>@</code> refers to inside event handlers</li>
</ul>


<h2>What Are Event Handlers?</h2>

<p>In short, an <em>event handler</em> can be <em>any function inside the render context</em>.</p>

<p>Usually, this means it&rsquo;s a prototype function on a view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ItemsIndexView</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">View</span>
</span><span class='line'>  <span class="nv">myEventHandler: </span><span class="nf">-&gt;</span> <span class="c1"># handle some event</span>
</span></code></pre></td></tr></table></div></figure>


<p>or, it&rsquo;s a prototype function on a controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ItemsController</span> <span class="k">extends</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ApplicationController</span>
</span><span class='line'>  <span class="nv">myEventHandler: </span><span class="nf">-&gt;</span> <span class="c1"># handle some event</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the main <code>MyApp</code> is also inside the render context, you can also use class functions on the app as event handlers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nb">window</span><span class="p">.</span><span class="nx">MyApp</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">App</span>
</span><span class='line'>  <span class="vi">@myEventHandler: </span><span class="nf">-&gt;</span> <span class="c1"># handle some event</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>All</strong> of those functions are fair game to be wired up as event handlers.</p>

<h2>Hooking up Event Handlers</h2>

<p>To connect a function to a DOM event, use the <code>data-event</code> binding. You can bind to pretty much any event (I don&rsquo;t know of one that you <em>can&rsquo;t</em> bind to).</p>

<p>The binding takes the form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="s">&quot;data-bind-</span><span class="si">#{</span><span class="nx">eventName</span><span class="si">}</span><span class="s">=&#39;</span><span class="si">#{</span><span class="nx">handlerName</span><span class="si">}</span><span class="s">&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For example, to bind a <code>click</code> event to <code>myEventHandler</code> on this <code>&lt;button&gt;</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;myEventHandler&#39;</span><span class="nt">&gt;</span>Click Me<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also bind to the <code>submit</code> event of a <code>&lt;form&gt;</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">data-event-submit=</span><span class="s">&#39;saveData&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;submit&#39;</span><span class="nt">&gt;</span>Save<span class="nt">&lt;/input&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Arguments in Event Handlers</h2>

<p>Event handlers have two sets of arguments:</p>

<ul>
<li>arguments that you pass in via <code>withArguments</code> filters</li>
<li>arguments that are automatically passed in by batman.js</li>
</ul>


<h3>Custom Arguments with &ldquo;withArguments&rdquo;</h3>

<p>You can choose some values to pass in with a <code>withArguments</code> filter in your binding.</p>

<p>Consider this event handler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ItemsController</span> <span class="k">extends</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ApplicationContorller</span>
</span><span class='line'>  <span class="nv">alertItemName: </span><span class="nf">(item) -&gt;</span>
</span><span class='line'>    <span class="nv">itemName = </span><span class="nx">item</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="nx">itemName</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I could call this with an <code>item</code> by using a <code>withArguments</code> filter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1</span> <span class="na">data-bind=</span><span class="s">&#39;item.name&#39;</span><span class="nt">&gt;&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;alertItemName | withArguments item&#39;</span><span class="nt">&gt;</span>Alert!<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can pass multiple arguments with <code>withArgument</code> by separating them with commas.</p>

<p>For example, if I want more flexible alerts, I could redefine the event handler to take <em>two</em> arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ItemsController</span> <span class="k">extends</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ApplicationContorller</span>
</span><span class='line'>  <span class="nv">alertItemName: </span><span class="nf">(item, punctuation) -&gt;</span>
</span><span class='line'>    <span class="nv">itemName = </span><span class="nx">item</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="nx">itemName</span> <span class="o">+</span> <span class="nx">punctuation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, pass <em>two</em> arguments into it, separated with <code>,</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1</span> <span class="na">data-bind=</span><span class="s">&#39;item.name&#39;</span><span class="nt">&gt;&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;alertItemName | withArguments item, &quot;!&quot; &#39;</span><span class="nt">&gt;</span>Alert!<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;alertItemName | withArguments item, &quot;?&quot; &#39;</span><span class="nt">&gt;</span>Alert?<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;alertItemName | withArguments item, &quot;.&quot; &#39;</span><span class="nt">&gt;</span>Alert.<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong> that you <strong>must</strong> provide both arguments to the handler. If you don&rsquo;t, batman.js&rsquo;s automatic arguments will take the place of the missing argument!</p>

<h3>Automatic Arguments</h3>

<p>When batman.js invokes an event handler, it <strong>automatically passes in</strong> a few arguments. Here&rsquo;s a handler that uses the automatic arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ItemsController</span> <span class="k">extends</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ApplicationContorller</span>
</span><span class='line'>  <span class="nv">myEventHandler: </span><span class="nf">(node, event, view) -&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s invoked with:</p>

<ul>
<li><code>node</code>: the DOM node where the event was triggered. For example, a <code>&lt;button&gt;</code>. If you use the same event handler on different nodes, this value will be different.</li>
<li><code>event</code>: The event object for the event.  If you&rsquo;re using <code>batman.jquery</code>, it&rsquo;s the jQuery event object. It contains meta-information about the event.</li>
<li><code>view</code>: The nearest <code>Batman.View</code> instance to <code>node</code>.</li>
</ul>


<h3>Combining Custom and Automatic Arguments</h3>

<p>You can combine custom and automatic arguments. Simply define a handler whose <strong>last three</strong> arguments are the batman.js automatic arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ItemsController</span> <span class="k">extends</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ApplicationContorller</span>
</span><span class='line'>  <span class="nv">alertItemName: </span><span class="nf">(item, punctuation, node, event, view) -&gt;</span>
</span><span class='line'>    <span class="nv">itemName = </span><span class="nx">item</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="nx">itemName</span> <span class="o">+</span> <span class="nx">punctuation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And use <code>withArguments</code> to pass arguments to the function. You <strong>must</strong> pass the <strong>same number</strong> of arguments. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1</span> <span class="na">data-bind=</span><span class="s">&#39;item.name&#39;</span><span class="nt">&gt;&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;alertItemName | withArguments item, &quot;!&quot;&#39;</span><span class="nt">&gt;</span>Alert!<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="c">&lt;!-- note the empty string, &quot;&quot; --&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;alertItemName | withArguments item, &quot;&quot;&#39;</span><span class="nt">&gt;</span>Alert<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When batman.js passes arguments to the function, it simply merges the <code>withArguments</code> array with its automatic array. So, if your <code>withArguments</code> array is too short, you won&rsquo;t get the same results.</p>

<h2><code>@</code> in Event Handlers</h2>

<p>When batman.js dispatches an event handler, it looks up the base object <em>where that handler is defined</em>. Then, it uses that object as <code>@</code> inside the handler.</p>

<p>For example, consider two event handlers. One is defined on a view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ItemsIndexView</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">View</span>
</span><span class='line'>  <span class="nv">eventHandlerOne: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">@</span><span class="p">)</span> <span class="c1"># =&gt; will be the ItemsIndexView instance</span>
</span></code></pre></td></tr></table></div></figure>


<p>The other is defined on a controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ItemsController</span> <span class="k">extends</span> <span class="nx">App</span><span class="p">.</span><span class="nx">ApplicationController</span>
</span><span class='line'>  <span class="nv">eventHandlerTwo: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">@</span><span class="p">)</span> <span class="c1"># =&gt; will be the ItemsController instance</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you were to hook up those event handlers to buttons:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;eventHandlerOne&#39;</span><span class="nt">&gt;&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;eventHandlerTwo&#39;</span><span class="nt">&gt;&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>then click the buttons, you would see the <code>ItemsIndexView</code> object and the <code>ItemsController</code> object in your console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ItemsIndexView</span> <span class="p">{</span><span class="nx">bindings</span><span class="o">:</span> <span class="nb">Array</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span> <span class="nx">subviews</span><span class="o">:</span> <span class="nx">Set</span><span class="p">,</span> <span class="nx">_batman</span><span class="o">:</span> <span class="nx">_Batman</span><span class="p">,</span> <span class="nx">viewClass</span><span class="o">:</span> <span class="kd">function</span><span class="p">,</span> <span class="nx">source</span><span class="o">:</span> <span class="s2">&quot;events/index&quot;</span><span class="err">…</span><span class="p">}</span>
</span><span class='line'><span class="nx">ItemsController</span> <span class="p">{</span><span class="nx">redirect</span><span class="o">:</span> <span class="kd">function</span><span class="p">,</span> <span class="nx">handleError</span><span class="o">:</span> <span class="kd">function</span><span class="p">,</span> <span class="nx">errorHandler</span><span class="o">:</span> <span class="kd">function</span><span class="p">,</span> <span class="nx">_batman</span><span class="o">:</span> <span class="nx">_Batman</span><span class="p">,</span> <span class="nx">_actionFrames</span><span class="o">:</span> <span class="nb">Array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="err">…</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since batman.js looks up the base object, event handlers behave just like normal functions in the place you define them.</p>
]]></content>
  </entry>
  
</feed>
