<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Robert Mosolgo]]></title>
  <link href="http://rmosolgo.github.io/atom.xml" rel="self"/>
  <link href="http://rmosolgo.github.io/"/>
  <updated>2014-11-15T22:04:21-08:00</updated>
  <id>http://rmosolgo.github.io/</id>
  <author>
    <name><![CDATA[Robert Mosolgo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA["Hello World" with mruby]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/11/15/hello-world-with-mruby/"/>
    <updated>2014-11-15T19:38:00-08:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/11/15/hello-world-with-mruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.mruby.com">mruby</a> is an implementation of Ruby that&rsquo;s designed to be lightweight &amp; integrated with C. To get started, you can run a bit of Ruby code from <em>inside</em> C code.</p>

<!-- more -->


<p>&ldquo;Hello World&rdquo; with mruby looks like this:</p>

<ul>
<li>Set up a new project and include mruby as a submodule</li>
<li>Write some C code that loads mruby and executes some Ruby code</li>
<li>Compile the C code &amp; run the resulting binary</li>
</ul>


<p>You can find an example similar to this one <a href="https://github.com/rmosolgo/mruby-examples/tree/master/01_hello_world">on GitHub</a>.</p>

<h2>Start a project</h2>

<p>Make a directory for your new project and enter it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir ~/hello-mruby
</span><span class='line'>$ cd ~/hello-mruby</span></code></pre></td></tr></table></div></figure>


<p>Clone mruby source and compile mruby:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:mruby/mruby.git
</span><span class='line'>$ cd mruby
</span><span class='line'>$ make
</span><span class='line'>$ cd ..</span></code></pre></td></tr></table></div></figure>


<p>(You need bison and Ruby to compile mruby, see the <a href="https://github.com/mruby/mruby/blob/master/INSTALL">install guide</a> for more information.)</p>

<p>You can check if compilation was successful by running <code>mirb</code> (interactive mruby):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mruby/bin/mirb
</span><span class='line'>mirb - Embeddable Interactive Ruby Shell
</span><span class='line'>
</span><span class='line'>&gt; 1 + 1
</span><span class='line'> =&gt; 2</span></code></pre></td></tr></table></div></figure>


<h2>Write the program</h2>

<p>Here&rsquo;s the whole of <code>hello_world.c</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* include mruby VM &amp; compiler */</span>
</span><span class='line'><span class="cp">#include &quot;mruby.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;mruby/compile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="cm">/* make a mruby instance */</span>
</span><span class='line'>  <span class="n">mrb_state</span> <span class="o">*</span><span class="n">mrb</span> <span class="o">=</span> <span class="n">mrb_open</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* write some code */</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">code</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;p &#39;Hello world!&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* use mruby to execute code from string */</span>
</span><span class='line'>  <span class="n">mrb_load_string</span><span class="p">(</span><span class="n">mrb</span><span class="p">,</span> <span class="n">code</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s break that down:</p>

<ul>
<li><p><strong>Include mruby &amp; compiler</strong>. The mruby VM takes bytecode instructions. The compiler is used to turn a string of Ruby code into mruby bytecode. <code>mrb_load_string</code> handles both steps: Parse &amp; compile Ruby code, then execute with the mruby VM.</p></li>
<li><p><strong>Make a mruby instance</strong>. Create an instance of the mruby VM. This object contains the state of the Ruby evnironment. Besides using it to execute code, you can inject values into the Ruby environment or call Ruby code from C.</p></li>
<li><p><strong>Use mruby to execute code from string</strong>. As described above, in this case, the string will be turned into VM instructions first, then executed by mruby.</p></li>
</ul>


<h2>Compile &amp; run</h2>

<p>Compile your C application, referencing the necessary mruby files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">gcc</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">o</span> <span class="n">hello_world</span> <span class="o">-</span><span class="n">Imruby</span><span class="o">/</span><span class="n">include</span>  <span class="o">-</span><span class="n">lmruby</span>  <span class="o">-</span><span class="n">Lmruby</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">host</span><span class="o">/</span><span class="n">lib</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, execute the resulting binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">hello_world</span>
</span><span class='line'><span class="s">&quot;Hello world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You did it!</p>

<h2>What next?</h2>

<ul>
<li>Use <code>mrbc</code> to precompile <code>.rb</code> into mruby bytecode.</li>
<li>Modify <code>mrb_state</code> from C with things like <code>mrb_define_class</code>, <code>mrb_define_method</code> and <code>mrb_define_const</code>.</li>
<li>Call Ruby methods from C with <code>mrb_funcall</code>.</li>
</ul>


<p>However, I don&rsquo;t know of any English documentation for these things yet!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why (I Think) We're Leaving Batman.js]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/09/07/why-i-think-were-leaving-batman-dot-js/"/>
    <updated>2014-09-07T20:19:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/09/07/why-i-think-were-leaving-batman-dot-js</id>
    <content type="html"><![CDATA[<p>Sadly, <a href="http://get.planningcenteronline.com">PCO</a> is getting out of the batman.js game.</p>

<!-- more -->


<p>From where I sit, I think it boils down to:</p>

<ul>
<li>The framework never hit critical mass (and lost what it had)</li>
<li>The framework&rsquo;s magic made some problems impossible to debug</li>
<li>Client-side apps aren&rsquo;t good for business</li>
<li>Rails, Turbolinks &amp; React will do just fine</li>
</ul>


<p>Batman.js is a great framework with some amazing, well-tested features and I&rsquo;m sorry to see it go this way for us!</p>

<h2>No Critical Mass</h2>

<p>Batman.js was an early entrant to the &ldquo;Framework Wars&rdquo;. It was production-ready by early 2013, which made it appealing at that point. However,</p>

<ul>
<li>there was very little &ldquo;evangelism&rdquo; by its creators (almost no talks, very little documentation, no &ldquo;media presence&rdquo;)</li>
<li>early adopters were not &ldquo;invited in&rdquo; (unanswered github issues, for example)</li>
</ul>


<p>When Shopify pulled out (around <a href="https://github.com/batmanjs/batman/graphs/contributors">fall 2013</a>?), a ton of knowledge and resources were removed with no viable replacement.</p>

<h2>Magic Problems</h2>

<p>Batman.js is loaded with awesome APIs that were fun to use and satisfying when they worked. However, when it <em>didn&rsquo;t work</em>, you were up a creek without a paddle. There was:</p>

<ul>
<li>no helpful error messages</li>
<li>no support on github, stack overflow or IRC</li>
<li>no documentation or information of any kind about the inner workings</li>
<li>no debugging tools</li>
</ul>


<p>I&rsquo;ve seen a lot of batman.js users pull their hair out yelling, &ldquo;Why doesn&rsquo;t this <em>work</em>?!&rdquo; Indeed, that&rsquo;s what drove me to learn it from the source.</p>

<h2>Client-Side Issues</h2>

<p>Making a whole app in JavaScript has a lot of sex appeal, but several things make it bad for real-life business:</p>

<ul>
<li>Bug-tracking tools (namely Bugsnag for JS) are not as good (especially when you throw CoffeeScript &amp; minification in the mix)</li>
<li>Browser environments are outside your control (I got a lot of bugsnags for peoples&#8217; browser extensions)</li>
<li>State can get weird &mdash; after having the app open for an hour, data can just get messed up! (Maybe this doesn&rsquo;t happen for better programmers.)</li>
</ul>


<p><em>Not my problem:</em></p>

<p><img src="http://rmosolgo.github.io/images/extension_errors.png" width="500"></p>

<p><em>No es mi problema:</em></p>

<p><img src="http://rmosolgo.github.io/images/extension_errors2.png" width="900"></p>

<p>You just don&rsquo;t realize the luxury of reliable bugsnags until they&rsquo;re gone! So many Check-Ins bugsnags leave no trace of what actually went wrong.</p>

<h2>Other Options are OK, too</h2>

<p>We have a solid data model, HTML templates and CSS to boot. It stinks to throw away all that code, but I forgot how amazingly fast it is to code Ruby on Rails.</p>

<p>JS MVC types will look down their noses at Turbolinks, but it <em>works</em> and it has a lot of eyes on it. Combined with <code>react-rails</code>, it&rsquo;s a really strong option!</p>

<h2>What Now?</h2>

<p>In short, Rails-rendered HTML, Turbolinks &amp; <code>form_for ... remote: true</code>, and ReactJS for live-updates. There are a few things I am looking forward to:</p>

<ul>
<li><strong>RUBY BUGSNAGS</strong> with stack traces, request environments and everything!</li>
<li><strong>Less state.</strong> Fewer things that can randomly affect other things in ways I didn&rsquo;t think about.</li>
<li><strong>ReactJS.</strong> <code>Batman.View</code> is an amazing thing, but it makes me appreciate the dead-simple API of a React component. It can only get data from one place, no other objects can mess with it, its lifecycle is <em>very</em> simple (and works as documented), etc etc. I write a lot more code to do a lot less with React, but I think it&rsquo;s going to be a lot more stable, and that&rsquo;s worth it.</li>
</ul>


<p>We held on to Batman.js for a long time because it lended itself to <em>live-updating everything</em>. I think React is going to cover the a few key things there, and just <em>changing pages</em> will do the rest. So far I&rsquo;ve hooked up Pusher to Flux-style stores, then wrapped anything live-updating in a React component that observes that store. It&rsquo;s a lot more hands-on than Batman.js updates, but it has other advantages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Render Scope in AngularJS and Batman.js]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/08/10/render-scope-in-angular-dot-js-and-batman-dot-js/"/>
    <updated>2014-08-10T18:45:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/08/10/render-scope-in-angular-dot-js-and-batman-dot-js</id>
    <content type="html"><![CDATA[<p><a href="http://batmanjs.org">Batman.js</a> and <a href="http://angularjs.org">AngularJS</a> both create hierarchical view scopes, but their implementations are very different.</p>

<!-- more -->


<p><em>(please forgive my inconsistent rendering of AngularJS/Angular/Angular.js/angular, I don&rsquo;t know which one is right!)</em></p>

<p>In batman.js and Angular, there is a view scope <em>hierarchy</em> which mirrors the DOM. In this heirarchy, objects may:</p>

<ul>
<li>add values into the render scope</li>
<li>access <em>their own</em> values</li>
<li>belong to a <em>parent object</em></li>
<li>access values from <em>their parents</em></li>
<li>have <em>child objects</em> of their own</li>
</ul>


<p>Consider a page like this:</p>

<p><a href="http://rmosolgo.github.io/images/batmanjs_nested_views.png"><img src="http://rmosolgo.github.io/images/batmanjs_nested_views.png" alt="Batman.js view hierarchy" /></a></p>

<p>The <code>HouseholdView</code> has many child views. The <code>PersonView</code>s belong to their parent, <code>HouseholdView</code>. They may access values from <code>HouseholdView</code> (such as the shared <code>householdName</code>).</p>

<p><em>Note: The batman.js view hierarchy includes a few other objects as well &mdash; see below.</em></p>

<h1>Finding Values in the Hierarchy</h1>

<p>To answer the question &ldquo;how can child views access data from their parents&rdquo;, Batman.js and Angular take different approaches.</p>

<h3>$scope &amp; Prototypal Inheritance</h3>

<p>In Angular, data bindings are evaluated against a <strong>magical <code>$scope</code> object</strong>. The scope object has key-value pairs which correspond to values in the data bindings. When <code>$scope</code>s are created, Angular massages (tampers with?) the prototypal inheritance chain so that a child scope&rsquo;s prototype <em>is</em> its parent scope.</p>

<p>(Usually, an object&rsquo;s prototype is another &ldquo;pristine&rdquo; object of its same type. It&rsquo;s generally treated as the &ldquo;perfect instance&rdquo; of the type. Other instances delegate to the prototype for properties that aren&rsquo;t defined explicitly on themselves.)</p>

<p>In this case, a child <code>$scope</code>&rsquo;s prototype is not a &ldquo;pristine instance&rdquo;, but instead it&rsquo;s the parent <code>$scope</code> object. That way, if a value isn&rsquo;t found in a child scope, it is looked up in the prototype chain. This is <strong>brilliant</strong>. Angular delegates value lookup to built-in JavaScript features. (There is one gotcha described below.)</p>

<p>When a parent <code>$scope</code> has many children, all children have the same parent <code>$scope</code> object as their prototype.</p>

<h3>Batman.View &amp; View::lookupKeypath</h3>

<p>Batman.js builds a <strong>tree of <code>Batman.View</code> objects</strong>. The root of the tree is called the <code>LayoutView</code> and it is created automatically by batman.js. Each view keeps track of its children in its <code>subviews</code>, which is a <code>Batman.Set</code> containing views that are rendered inside it. Each view also keeps track of its <code>superview</code>, which is its parent <code>Batman.View</code>.</p>

<p>To evaluate data bindings, batman.js uses <code>lookupKeypath</code> on the view in question. This function climbs the &ldquo;view hierarchy&rdquo;, which actually includes a few extra objects:</p>

<ul>
<li>The <code>Batman.Controller</code> instance which rendered the view</li>
<li><code>Batman.currentApp</code>, which is the <code>Batman.App</code> subclass that you defined (the clas, not an instance)</li>
<li><code>Batman.container</code>, which is usually <code>window</code></li>
</ul>


<p>Here&rsquo;s the whole view hierarchy from the previous example:</p>

<p><a href="http://rmosolgo.github.io/images/batmanjs_nested_views_whole_tree.png"><img src="http://rmosolgo.github.io/images/batmanjs_nested_views_whole_tree.png" alt="The whole batman.js view hierarchy" /></a></p>

<p>Since <code>Batman.currentApp</code> is in the view hierarchy, any <code>@classAccessor</code>s you define there are accessible in view bindings, akin to global scope in JavaScript.</p>

<h1>Automatically-Created Scopes</h1>

<p>In batman.js and Angular, there are data bindings that create child scopes of their own. For example, <code>ng-repeat</code> and <code>data-foreach</code> both create a collection of child scopes with the same parent.</p>

<p>Angular does this by creating many child <code>$scopes</code> with the same parent <code>$scope</code> as their prototype.</p>

<p>Batman.js does this by automatically adding nodes to the view hierarchy. One downside of batman.js is that creating lots and lots of new views is CPU-intensive. I don&rsquo;t know whether the same is true for creating <code>$scope</code>s.</p>

<h1>How Does It Know Which Scope to Bind To?</h1>

<p>When I was reading about <code>$scope</code>, I learned that some new Angular users hit a snag when they try to set values on a <em>parent scope</em> from within a <em>child scope</em>. As JavaScript should, it updates the child <code>$scope</code> with the new value, not the parent <code>$scope</code>, which is the child&rsquo;s prototype.</p>

<p>That&rsquo;s how prototypal inheritance works: It looks up missing values on the prototype, but it sets <em>new</em> values on the instance. Then, it stops &ldquo;falling back&rdquo; to the prototype for the property that was set on the instance.</p>

<p>To work around this, it&rsquo;s recommended to &ldquo;always use a <code>.</code> in your <code>ng-model</code>s&rdquo;. (<code>ng-model</code> is a binding that creates a child scope.)</p>

<p>Batman.js doesn&rsquo;t have this problem because, when uses <code>lookupKeypath</code>, it remembers which <code>View</code> object was the target for that keypath, then updates <em>that object</em> whenever the keypath changes.</p>

<p>However, Batman.js is prone to a different gotcha. If you leave an accessor unset (ie, returns <code>undefined</code>), then set it <em>after</em> a view has rendered, it&rsquo;s possible that <code>View::lookupKeypath</code> won&rsquo;t find it correctly. To avoid this, set defaults (or <code>null</code>) before bindings are evaluated:</p>

<ul>
<li>before <code>@render</code> in controller actions</li>
<li>in the <code>constructor</code> for view instances</li>
</ul>


<p>Or, make sure <code>@accessor</code>s return <code>null</code> instead of <code>undefined</code>.</p>

<p>Batman.js treats <code>undefined</code> as the signal that an object doesn&rsquo;t have an accessor for a keypath, so be careful when setting keys <code>undefined</code>!</p>

<h1>How Does It Know When to Update the DOM?</h1>

<p>When these scope objects (<code>View</code> or <code>$scope</code>) change, the framework must update the DOM accordingly.</p>

<p>Angular has a &ldquo;digest cycle&rdquo; where it checks for changes in the <code>$scope</code> since last run, then updates the DOM if necessary. It automatically tracks any values that are put into templates. You can also watch other keys on <code>$scope</code> with <code>$scope.$watch</code>. If you modify <code>$scope</code> from <em>outside</em> Angular.js code, you must manually trigger the digest cycle with <code>$scope.$apply</code>.</p>

<p><code>Batman.View</code> uses the <a href="http://rmosolgo.github.io/blog/2014/04/20/automatic-source-tracking-in-batman-dot-js/"><code>Batman.Property</code></a> system to automatically track dependencies and changes. Any keypath that is passed to a <code>data-</code> binding is automatically observed. DOM updates are triggered when:</p>

<ul>
<li>A keypath is updated with <code>set</code>. Doesn&rsquo;t matter whether it&rsquo;s inside batman.js code or inside an AJAX callback &mdash; batman.js will recognize the update either way.</li>
<li>A property&rsquo;s dependencies change. When you declare a computed property with <code>@accessor</code> and bind it to a view, the view will update the DOM whenever that property&rsquo;s dependencies cause it to change.</li>
</ul>


<p>(In fact, those two cases are the heart of observability in batman.js: assign a value with <code>set</code> or delegate to batman.js&rsquo;s source tracking.)</p>

<p>To force an update, use <code>set</code> to update a bound property or one of its dependencies.</p>

<h1>Other Random Points</h1>

<ul>
<li>Angular&rsquo;s &ldquo;evalute an expression&rdquo; is like batman.js&rsquo;s &ldquo;lookup a keypath&rdquo;</li>
<li><code>Batman.View::propagateToSubviews</code> is like <code>$scope.$broadcast</code>: it sends messages down the view tree.</li>
<li>As of batman.js almost-v0.17, there is no analog for <code>$scope.$emit</code> (which sends events <em>up</em> the view chain)</li>
<li>batman.js exports global function <code>$context($0)</code> which is just like <code>angular.element($0).scope()</code> (where <code>$0</code> is the highlighted element in the Chrome inspector).</li>
</ul>


<h1>My Opinion</h1>

<p>I think Angular&rsquo;s <code>$scope</code> is brilliant. I imagine it&rsquo;s performant as well, although I don&rsquo;t know (and I&rsquo;m currently writing without internet access). It introduces few gotchas. In general, it seems like it Just Works<sup>TM</sup>.</p>

<p>I&rsquo;m in the market to improve the performance of <code>Batman.View</code>, but I&rsquo;m not sure I can take anything from <code>$scope</code>. All of batman.js depends on playing by the observability rules. I don&rsquo;t see any way I can get native JS prototypal inheritance to participate in that.</p>

<p>I also like sticking with the &ldquo;It&rsquo;s just batman.js&rdquo; in the view layer. If you can write good <code>@accessor</code>s, then you&rsquo;ve mastered <code>Batman.View</code>, too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being the Judge]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/08/02/being-the-judge/"/>
    <updated>2014-08-02T22:08:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/08/02/being-the-judge</id>
    <content type="html"><![CDATA[<p>I was just pondering whether a person ought to have children or not. It&rsquo;s funny when I try to be the judge.</p>

<!-- more -->


<p>Propagation of the human race is a funny business. There&rsquo;s no test for it. You don&rsquo;t even have to get a license, like you do for driving or for getting married. You just &hellip; <em>do</em> it. Even if you think about it carefully and make the decision with solemnity, that&rsquo;s no guarantee of the outcome. You might just get a rascal and there&rsquo;s nothing to be done about it.</p>

<h3>Judging</h3>

<p>I often find myself assessing whether something is good or bad, right or wrong, whether its something in my life, or something out in the world, or just an idea of this or that. In the end, I don&rsquo;t believe that I make a great judge: I don&rsquo;t have all the information, I&rsquo;m short-sighted and I&rsquo;m lacking in perception and wisdom.</p>

<p>I realized just now that in a way, it&rsquo;s just <em>not my role</em> to judge. I think that&rsquo;s the meaning of &ldquo;<a href="http://www.esvbible.org/Matthew+13:24/">Don&rsquo;t separate the wheat from the weeds, I&rsquo;ll do that at harvest time</a>&rdquo;. A person&rsquo;s job is to live a human life according to God&rsquo;s call. Generally, this means extending patience, forgiveness &amp; guidance in deference to God&rsquo;s judgements on his appointed day.</p>

<h3>It&rsquo;s like&hellip;</h3>

<p>It&rsquo;s like in a movie when a boy finds that the CEO&rsquo;s office is unlocked. He tiptoes to the tall, wide desk. He climbs into the big leather chair and gives it a swing to the right and left. He helps himself to a pen and practices his signature on the company letterhead. &ldquo;Very nice!&rdquo;</p>

<p>Of course, the door clicks again. It&rsquo;s the boss. With a downward flick of his finger, he signals for the boy to get down. Although the boy likes the feeling of the big chair, he&rsquo;s not fit for the duties of CEO.</p>

<h3>My Role</h3>

<p>This is freeing. I&rsquo;m prone to getting caught up in matters of judgement that are, in fact, beyond me. I would do well to determine the way that the Lord has put before me and walk it, leaving executive decisions to the executive. Throughout history and in my experience, he has proven worthy of that trust.</p>

<p>Certainly it&rsquo;s good to try to understand the world, but when you come up short, that&rsquo;s OK. The boss has the whole plan in mind and he&rsquo;s checked the accounts twice. It&rsquo;s going to add up! Fulfill your duties to the utmost!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Computed Properties: Batman.js and Ember.js]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/08/02/computed-properties-batman-dot-js-and-ember-dot-js/"/>
    <updated>2014-08-02T09:38:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/08/02/computed-properties-batman-dot-js-and-ember-dot-js</id>
    <content type="html"><![CDATA[<p><a href="http://batmanjs.org">Batman.js</a> is a front-end MVC framework with an unrivaled implementation of key-value observing. I will explore computed properties in batman.js by contrasting them with Ember.js&rsquo;s computed properties.</p>

<!-- more -->


<p>First, disclaimers!</p>

<ul>
<li>I didn&rsquo;t write any of the <code>Batman.Property</code> code that makes this feature possible. I&rsquo;m only a fanboy!</li>
<li>I don&rsquo;t know Ember.js. I&rsquo;ve just gathered examples from the <a href="http://emberjs.com/guides">Ember Guides</a>.</li>
</ul>


<p>To explore computed properties, let&rsquo;s take the <strong>canonical <code>fullName</code> example</strong>. It:</p>

<ul>
<li>depends on two other properties, <code>firstName</code> and <code>lastName</code></li>
<li>returns a string that joins <code>firstName</code> and <code>lastName</code> with a space</li>
<li>can be set</li>
<li>sets <code>firstName</code> and <code>lastName</code> by splitting on whitespace</li>
</ul>


<p>We&rsquo;ll also explore an <strong>aggregrated <code>roster</code> property</strong> which:</p>

<ul>
<li>depends on <code>fullName</code> for each person</li>
<li>joins <code>fullName</code> with <code>,</code></li>
</ul>


<h2>fullName in Ember.js</h2>

<p>(This is yanked wholesale from the <a href="http://emberjs.com/guides/object-model/computed-properties/">Computed Properties Guide</a>.)</p>

<p>A couple of things to notice:</p>

<ul>
<li><code>fullName</code> is defined as <em>one function</em> which handles <code>get</code> and <code>set</code> operations.</li>
<li><code>fullName</code> must be told what properties it depends on.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Person</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">firstName</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="c1">// These aren&#39;t necessary, they&#39;re</span>
</span><span class='line'>  <span class="nx">lastName</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>  <span class="c1">// just for clarity.</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fullName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">previousValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// setter</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">nameParts</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">,</span> <span class="nx">nameParts</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">,</span>  <span class="nx">nameParts</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// getter, also the return value is cached</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">,</span> <span class="s1">&#39;lastName&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage is pretty standard: use <code>get</code> and <code>set</code> to access properties.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">captainAmerica</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="nx">captainAmerica</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;fullName&#39;</span><span class="p">,</span> <span class="s2">&quot;William Burnside&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">captainAmerica</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">);</span> <span class="c1">// William</span>
</span><span class='line'><span class="nx">captainAmerica</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">);</span>  <span class="c1">// Burnside</span>
</span></code></pre></td></tr></table></div></figure>


<h2>fullName in Batman.js</h2>

<p>Two things to notice:</p>

<ul>
<li><code>get</code> and <code>set</code> operations are defined <em>separately</em>.</li>
<li><code>fullName</code> doesn&rsquo;t have to be told what its dependencies are.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nb">Object</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;firstName&#39;</span> <span class="c1"># not necessary,</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;lastName&#39;</span>  <span class="c1"># just here for clarity</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;fullName&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">get: </span><span class="nf">(key) -&gt;</span> <span class="s">&quot;</span><span class="si">#{</span><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;firstName&#39;</span><span class="p">)</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;lastName&#39;</span><span class="p">)</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class='line'>    <span class="nv">set: </span><span class="nf">(key, value) -&gt;</span>
</span><span class='line'>      <span class="nv">nameParts = </span><span class="nx">value</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">@set</span><span class="p">(</span><span class="s">&#39;firstName&#39;</span><span class="p">,</span> <span class="nx">nameParts</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>      <span class="nx">@set</span><span class="p">(</span><span class="s">&#39;lastName&#39;</span><span class="p">,</span> <span class="nx">nameParts</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">value</span> <span class="c1"># should return newly-set value, although the `get` function will be used for caching.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The usage is almost identical:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">captainAmerica = </span><span class="k">new</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span>
</span><span class='line'><span class="nx">captainAmerica</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s">&#39;fullName&#39;</span><span class="p">,</span> <span class="s">&#39;William Burnside&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">captainAmerica</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;firstName&#39;</span><span class="p">)</span> <span class="c1"># William</span>
</span><span class='line'><span class="nx">captainAmerica</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;lastName&#39;</span><span class="p">)</span>  <span class="c1"># Burnside</span>
</span></code></pre></td></tr></table></div></figure>


<h2>roster in Ember.js</h2>

<p>(This was adapted from the <a href="http://emberjs.com/guides/object-model/computed-properties-and-aggregate-data/">Computed Properties and Aggregate Data Guide</a>.)</p>

<p>Some things stood out to me:</p>

<ul>
<li><code>roster</code>&rsquo;s properties are declared with a DSL. Array dependencies are limited to one layer deep (ie, you can&rsquo;t use <code>@each</code> twice).</li>
<li><code>mapBy</code> is provided by <code>Ember.Enumerable</code> to handle arrays of objects. Nice!</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">PeopleController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">people</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span><span class="nx">firstName</span><span class="o">:</span> <span class="s2">&quot;Tom&quot;</span><span class="p">,</span> <span class="nx">lastName</span><span class="o">:</span> <span class="s2">&quot;Dale&quot;</span><span class="p">}),</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span><span class="nx">firstName</span><span class="o">:</span> <span class="s2">&quot;Yehuda&quot;</span><span class="p">,</span> <span class="nx">lastName</span><span class="o">:</span> <span class="s2">&quot;Katz&quot;</span><span class="p">})</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">roster</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">people</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;people&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">people</span><span class="p">.</span><span class="nx">mapBy</span><span class="p">(</span><span class="s1">&#39;fullName&#39;</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;people.@each.fullName&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>roster in Batman.js</h2>

<p>Here&rsquo;s the analogous construction in batman.js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">PeopleController</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Controller</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;people&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Set</span><span class="p">([</span> <span class="c1"># this is future-code: constructor will take an array in v0.17.0</span>
</span><span class='line'>      <span class="k">new</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span><span class="p">(</span><span class="nv">firstName: </span><span class="s">&quot;Tom&quot;</span><span class="p">,</span> <span class="nv">lastName: </span><span class="s">&quot;Dale&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">new</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span><span class="p">(</span><span class="nv">firstName: </span><span class="s">&quot;Yehuda&quot;</span><span class="p">,</span> <span class="nv">lastName: </span><span class="s">&quot;Katz&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;roster&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;people&#39;</span><span class="p">).</span><span class="nx">mapToProperty</span><span class="p">(</span><span class="s">&#39;fullName&#39;</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s">&#39;, &#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing is the same:</p>

<ul>
<li><code>mapToProperty</code> works like <code>mapBy</code></li>
</ul>


<p>You might notice two big differences:</p>

<ul>
<li><code>people</code> is a <code>Batman.Set</code> instead of a native Array.</li>
<li><code>roster</code> didn&rsquo;t have to be told what its dependencies are</li>
</ul>


<p>By using batman.js data structures inside <code>@accessor</code> functions, we benefit from batman.js&rsquo;s <a href="http://rmosolgo.github.io/blog/2014/04/20/automatic-source-tracking-in-batman-dot-js/">automatic source tracking</a>. It looks like automatic source tracking was considered by the Ember core team, but deemed <a href="https://github.com/emberjs/ember.js/issues/269#issuecomment-3178319">impossible</a> or <a href="https://github.com/emberjs/ember.js/issues/386#issuecomment-3523589">prohibitively expensive</a>.</p>

<p>I recently saw a quote in a <a href="https://www.youtube.com/watch?v=-DX3vJiqxm4">React.js talk</a>:</p>

<blockquote><p>Intellectuals solve probelms. Geniuses prevent them. &ndash; Albert Einstein</p></blockquote>

<p>I think that&rsquo;s just what the Shopify team did when they implemented <code>Batman.Observable</code>! The API is very simple and it Just Works<sup>TM</sup>.</p>

<h2>My Opinion</h2>

<p><strong>Pros of batman.js:</strong></p>

<ul>
<li>Elegant <code>@accessor</code> API for getters and setters: define <code>get</code> and <code>set</code> separately instead of testing for arguments.</li>
<li>Automatic dependency tracking: batman.js knows what objects &amp; properties were accessed during computation and observes accordingly.</li>
<li>There&rsquo;s no limit to the depth of enumerable dependencies. Any property of a <code>Batman.Object</code> that&rsquo;s accessed will be tracked, no matter where it exists in the app.</li>
</ul>


<p>In fact, <code>@accessor</code> is the heart and soul of a batman.js app. You&rsquo;re basically declaring a system of computed properties, then updating that system from user input. Batman.js propagates information to wherever it needs to be.</p>

<p><strong>Cons of batman.js:</strong></p>

<ul>
<li>&ldquo;It&rsquo;s just not Ember.&rdquo; You miss out on huge user base, corporate support, and everything that goes with that.</li>
<li>Beyond that, batman.js resources are sparse. The <a href="http://batmanjs.org/docs/index.html">new guides</a>, <a href="https://www.softcover.io/read/b5c051f3/batmanjs_mvc_cookbook">cookbook</a> and <a href="http://batmanjs.org/docs/index.html">API docs</a> are improving every week, but for advanced usage you still have to sourcedive sometimes.</li>
<li>There <strong>is</strong> a performance hit for global observability. The only place I&rsquo;ve noticed it is with complex iteration views (<a href="https://github.com/batmanjs/batman/issues/1086">batmanjs/batman#1086</a>). I&rsquo;m hoping to tackle this soon since it&rsquo;s becoming an issue in <a href="http://get.planningcenteronline.com/check-ins">PCO Check-ins</a>.</li>
</ul>


<p>I&rsquo;m not aware of any features missing from batman.js, but I do miss the &ldquo;googleability&rdquo; of a well-traveled path. Batman.js also lacks some of the dev tools like a decent Chrome extension and a command-line client.</p>

<p>I always want to know <em>how</em> things works, so getting in the source is actually a benefit for me.</p>

<p><strong>Six of one, half-dozen of the other:</strong></p>

<ul>
<li>Dependency DSL vs <code>Batman.{DataStructure}</code></li>
<li>Calling super: <code>this._super</code> vs. <code>@wrapAccessor</code></li>
<li>External API with <code>get</code> and <code>set</code></li>
<li>Cached values in computed properties</li>
<li>In batman.js, you can opt out of tracking with <code>Batman.Property.withoutTracking</code>. It&rsquo;s obscure, but I think it&rsquo;s ok because batman.js always covers the more common case.</li>
</ul>


<p>One thing that I found in neither framework was rate-limited properties, a la Knockout. I&rsquo;d love to have a built-in option for this in batman.js.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Event Handlers in Batman.js]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/07/28/event-handlers-in-batman-dot-js/"/>
    <updated>2014-07-28T13:23:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/07/28/event-handlers-in-batman-dot-js</id>
    <content type="html"><![CDATA[<p>In <a href="http://batmanjs.org">batman.js</a>, event handlers respond to user interactions like &ldquo;click&rdquo; and &ldquo;submit&rdquo;. You can use them to modify application state in response to those interactions.</p>

<!-- more -->


<p>Let&rsquo;s look at:</p>

<ul>
<li>What event handlers are and where they&rsquo;re defined</li>
<li>How you can connect handlers to DOM events</li>
<li>How you can pass arguments to event handlers</li>
<li>What <code>@</code> refers to inside event handlers</li>
</ul>


<h2>What Are Event Handlers?</h2>

<p>In short, an <em>event handler</em> can be <em>any function inside the render context</em>.</p>

<p>Usually, this means it&rsquo;s a prototype function on a view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ItemsIndexView</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">View</span>
</span><span class='line'>  <span class="nv">myEventHandler: </span><span class="nf">-&gt;</span> <span class="c1"># handle some event</span>
</span></code></pre></td></tr></table></div></figure>


<p>or, it&rsquo;s a prototype function on a controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ItemsController</span> <span class="k">extends</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ApplicationController</span>
</span><span class='line'>  <span class="nv">myEventHandler: </span><span class="nf">-&gt;</span> <span class="c1"># handle some event</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the main <code>MyApp</code> is also inside the render context, you can also use class functions on the app as event handlers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nb">window</span><span class="p">.</span><span class="nx">MyApp</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">App</span>
</span><span class='line'>  <span class="vi">@myEventHandler: </span><span class="nf">-&gt;</span> <span class="c1"># handle some event</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>All</strong> of those functions are fair game to be wired up as event handlers.</p>

<h2>Hooking up Event Handlers</h2>

<p>To connect a function to a DOM event, use the <code>data-event</code> binding. You can bind to pretty much any event (I don&rsquo;t know of one that you <em>can&rsquo;t</em> bind to).</p>

<p>The binding takes the form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="s">&quot;data-bind-</span><span class="si">#{</span><span class="nx">eventName</span><span class="si">}</span><span class="s">=&#39;</span><span class="si">#{</span><span class="nx">handlerName</span><span class="si">}</span><span class="s">&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For example, to bind a <code>click</code> event to <code>myEventHandler</code> on this <code>&lt;button&gt;</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;myEventHandler&#39;</span><span class="nt">&gt;</span>Click Me<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also bind to the <code>submit</code> event of a <code>&lt;form&gt;</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">data-event-submit=</span><span class="s">&#39;saveData&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;submit&#39;</span><span class="nt">&gt;</span>Save<span class="nt">&lt;/input&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Arguments in Event Handlers</h2>

<p>Event handlers have two sets of arguments:</p>

<ul>
<li>arguments that you pass in via <code>withArguments</code> filters</li>
<li>arguments that are automatically passed in by batman.js</li>
</ul>


<h3>Custom Arguments with &ldquo;withArguments&rdquo;</h3>

<p>You can choose some values to pass in with a <code>withArguments</code> filter in your binding.</p>

<p>Consider this event handler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ItemsController</span> <span class="k">extends</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ApplicationContorller</span>
</span><span class='line'>  <span class="nv">alertItemName: </span><span class="nf">(item) -&gt;</span>
</span><span class='line'>    <span class="nv">itemName = </span><span class="nx">item</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="nx">itemName</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I could call this with an <code>item</code> by using a <code>withArguments</code> filter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1</span> <span class="na">data-bind=</span><span class="s">&#39;item.name&#39;</span><span class="nt">&gt;&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;alertItemName | withArguments item&#39;</span><span class="nt">&gt;</span>Alert!<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can pass multiple arguments with <code>withArgument</code> by separating them with commas.</p>

<p>For example, if I want more flexible alerts, I could redefine the event handler to take <em>two</em> arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ItemsController</span> <span class="k">extends</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ApplicationContorller</span>
</span><span class='line'>  <span class="nv">alertItemName: </span><span class="nf">(item, punctuation) -&gt;</span>
</span><span class='line'>    <span class="nv">itemName = </span><span class="nx">item</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="nx">itemName</span> <span class="o">+</span> <span class="nx">punctuation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, pass <em>two</em> arguments into it, separated with <code>,</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1</span> <span class="na">data-bind=</span><span class="s">&#39;item.name&#39;</span><span class="nt">&gt;&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;alertItemName | withArguments item, &quot;!&quot; &#39;</span><span class="nt">&gt;</span>Alert!<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;alertItemName | withArguments item, &quot;?&quot; &#39;</span><span class="nt">&gt;</span>Alert?<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;alertItemName | withArguments item, &quot;.&quot; &#39;</span><span class="nt">&gt;</span>Alert.<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong> that you <strong>must</strong> provide both arguments to the handler. If you don&rsquo;t, batman.js&rsquo;s automatic arguments will take the place of the missing argument!</p>

<h3>Automatic Arguments</h3>

<p>When batman.js invokes an event handler, it <strong>automatically passes in</strong> a few arguments. Here&rsquo;s a handler that uses the automatic arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ItemsController</span> <span class="k">extends</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ApplicationContorller</span>
</span><span class='line'>  <span class="nv">myEventHandler: </span><span class="nf">(node, event, view) -&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s invoked with:</p>

<ul>
<li><code>node</code>: the DOM node where the event was triggered. For example, a <code>&lt;button&gt;</code>. If you use the same event handler on different nodes, this value will be different.</li>
<li><code>event</code>: The event object for the event.  If you&rsquo;re using <code>batman.jquery</code>, it&rsquo;s the jQuery event object. It contains meta-information about the event.</li>
<li><code>view</code>: The nearest <code>Batman.View</code> instance to <code>node</code>.</li>
</ul>


<h3>Combining Custom and Automatic Arguments</h3>

<p>You can combine custom and automatic arguments. Simply define a handler whose <strong>last three</strong> arguments are the batman.js automatic arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ItemsController</span> <span class="k">extends</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ApplicationContorller</span>
</span><span class='line'>  <span class="nv">alertItemName: </span><span class="nf">(item, punctuation, node, event, view) -&gt;</span>
</span><span class='line'>    <span class="nv">itemName = </span><span class="nx">item</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="nx">itemName</span> <span class="o">+</span> <span class="nx">punctuation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And use <code>withArguments</code> to pass arguments to the function. You <strong>must</strong> pass the <strong>same number</strong> of arguments. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1</span> <span class="na">data-bind=</span><span class="s">&#39;item.name&#39;</span><span class="nt">&gt;&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;alertItemName | withArguments item, &quot;!&quot;&#39;</span><span class="nt">&gt;</span>Alert!<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="c">&lt;!-- note the empty string, &quot;&quot; --&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;alertItemName | withArguments item, &quot;&quot;&#39;</span><span class="nt">&gt;</span>Alert<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When batman.js passes arguments to the function, it simply merges the <code>withArguments</code> array with its automatic array. So, if your <code>withArguments</code> array is too short, you won&rsquo;t get the same results.</p>

<h2><code>@</code> in Event Handlers</h2>

<p>When batman.js dispatches an event handler, it looks up the base object <em>where that handler is defined</em>. Then, it uses that object as <code>@</code> inside the handler.</p>

<p>For example, consider two event handlers. One is defined on a view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ItemsIndexView</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">View</span>
</span><span class='line'>  <span class="nv">eventHandlerOne: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">@</span><span class="p">)</span> <span class="c1"># =&gt; will be the ItemsIndexView instance</span>
</span></code></pre></td></tr></table></div></figure>


<p>The other is defined on a controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ItemsController</span> <span class="k">extends</span> <span class="nx">App</span><span class="p">.</span><span class="nx">ApplicationController</span>
</span><span class='line'>  <span class="nv">eventHandlerTwo: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">@</span><span class="p">)</span> <span class="c1"># =&gt; will be the ItemsController instance</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you were to hook up those event handlers to buttons:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;eventHandlerOne&#39;</span><span class="nt">&gt;&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">data-event-click=</span><span class="s">&#39;eventHandlerTwo&#39;</span><span class="nt">&gt;&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>then click the buttons, you would see the <code>ItemsIndexView</code> object and the <code>ItemsController</code> object in your console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ItemsIndexView</span> <span class="p">{</span><span class="nx">bindings</span><span class="o">:</span> <span class="nb">Array</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span> <span class="nx">subviews</span><span class="o">:</span> <span class="nx">Set</span><span class="p">,</span> <span class="nx">_batman</span><span class="o">:</span> <span class="nx">_Batman</span><span class="p">,</span> <span class="nx">viewClass</span><span class="o">:</span> <span class="kd">function</span><span class="p">,</span> <span class="nx">source</span><span class="o">:</span> <span class="s2">&quot;events/index&quot;</span><span class="err">…</span><span class="p">}</span>
</span><span class='line'><span class="nx">ItemsController</span> <span class="p">{</span><span class="nx">redirect</span><span class="o">:</span> <span class="kd">function</span><span class="p">,</span> <span class="nx">handleError</span><span class="o">:</span> <span class="kd">function</span><span class="p">,</span> <span class="nx">errorHandler</span><span class="o">:</span> <span class="kd">function</span><span class="p">,</span> <span class="nx">_batman</span><span class="o">:</span> <span class="nx">_Batman</span><span class="p">,</span> <span class="nx">_actionFrames</span><span class="o">:</span> <span class="nb">Array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="err">…</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since batman.js looks up the base object, event handlers behave just like normal functions in the place you define them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Batman.js and Devise]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/07/21/batman-dot-js-and-devise/"/>
    <updated>2014-07-21T09:08:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/07/21/batman-dot-js-and-devise</id>
    <content type="html"><![CDATA[<p>Using <a href="http://batmanjs.org">batman.js</a> with <a href="https://github.com/plataformatec/devise">Devise</a> is pretty straightforward.</p>

<!-- more -->


<p>It&rsquo;s also pretty cool-looking, because when you define <code>App.User.current</code>, all your view bindings are instantly updated to reflect the user&rsquo;s signed-in status!</p>

<p>You just have to consider three things:</p>

<ul>
<li>Make Devise communicate in JSON</li>
<li>Make batman.js send Devise-friendly requests</li>
<li>Keep your CSRF token up-to-date</li>
</ul>


<h2>Make Devise Communicate in JSON</h2>

<p>To make your Devise controllers accept and send JSON, register <code>:json</code> as a valid format. Do this by adding to <code>app/config/application.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">to_prepare</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">DeviseController</span><span class="o">.</span><span class="n">respond_to</span> <span class="ss">:html</span><span class="p">,</span> <span class="ss">:json</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>(From a <a href="https://github.com/plataformatec/devise/issues/2209#issuecomment-12150223">comment on plataformatec/devise</a>)</p>

<p>Now, all the provided Devise controllers will accept the JSON format.</p>

<h2>Make Batman.js Send Devise-friendly Requests</h2>

<p>At time of writing (v0.16), the batman.js rails extra <em>only</em> sends the CSRF token with <code>Batman.RailsStorage</code> storage operations. So, all your requests will be &ldquo;disguised&rdquo; as storage operations.</p>

<p>(These samples include code for updating the CSRF token which is described in detail below)</p>

<h3>Signing In / Signing Up</h3>

<p>I made one form with two states: &ldquo;signing in&rdquo; or &ldquo;signing up&rdquo;. I initialized a User to bind to the form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Funzies</span><span class="p">.</span><span class="nx">SessionsController</span> <span class="k">extends</span> <span class="nx">Funzies</span><span class="p">.</span><span class="nx">ApplicationController</span>
</span><span class='line'>  <span class="k">new</span><span class="o">:</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@set</span> <span class="s">&#39;user&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Funzies</span><span class="p">.</span><span class="nx">User</span>
</span><span class='line'>    <span class="nx">@dialog</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the form, <code>actionName</code> was either &ldquo;Sign In&rdquo; or &ldquo;Create an Account&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nc">.row</span>
</span><span class='line'>  <span class="nc">.col-xs-12</span>
</span><span class='line'>    <span class="nt">form</span> data-event-submit=&#39;signIn&#39;
</span><span class='line'>      <span class="nt">div</span><span class="nc">.alert.alert-danger</span> data-showif=&#39;user.errors.length&#39;
</span><span class='line'>        <span class="nt">ul</span>
</span><span class='line'>          <span class="nt">li</span> data-foreach-e=&#39;user.errors&#39; data-bind=&#39;e.fullMessage&#39;
</span><span class='line'>      <span class="nc">.form-group</span>
</span><span class='line'>        <span class="nt">label</span> Email
</span><span class='line'>        <span class="nt">input</span><span class="nc">.form-control</span> type=&#39;text&#39; data-bind=&#39;user.email&#39;
</span><span class='line'>      <span class="nc">.form-group</span>
</span><span class='line'>        <span class="nt">label</span> Password
</span><span class='line'>        <span class="nt">input</span><span class="nc">.form-control</span> type=&#39;password&#39; data-bind=&#39;user.password&#39;
</span><span class='line'>      <span class="nc">.form-group</span> data-showif=&#39;signingUp&#39;
</span><span class='line'>        <span class="nt">label</span> Password Confirmation
</span><span class='line'>        <span class="nt">input</span><span class="nc">.form-control</span> type=&#39;password&#39; data-bind=&#39;user.password_confirmation&#39;
</span><span class='line'>      <span class="nc">.form-group</span>
</span><span class='line'>        <span class="nc">.row</span>
</span><span class='line'>          <span class="nc">.col-sm-4</span>
</span><span class='line'>            <span class="nt">input</span><span class="nc">.btn.btn-primary</span> type=&#39;submit&#39; data-bind-value=&#39;actionName | append &quot;!&quot;&#39;
</span><span class='line'>          <span class="nc">.col-sm-8</span>
</span><span class='line'>            <span class="nt">a</span><span class="nc">.pull-right</span> data-event-click=&#39;signingUp | toggle&#39; data-bind=&#39;otherActionName&#39;
</span></code></pre></td></tr></table></div></figure>


<p><em>(the <code>toggle</code> filter will be released in Batman.js 0.17)</em></p>

<p>It turned out looking like this:</p>

<p><img src="http://rmosolgo.github.io/images/sign_in_form.png" width="500"> <img src="http://rmosolgo.github.io/images/sign_up_form.png" width="500"></p>

<p>Here&rsquo;s the handler for submitting that form. Notice that it handles <em>creating an account</em> and <em>signing up</em>. This might have been stupid of me.</p>

<p>Notice the bit about initializing a new User &mdash; it&rsquo;s because the <code>401</code> puts the user in &ldquo;error&rdquo; state (even with <code>@catchError</code>), which can&rsquo;t be cleared. This stinks and should be fixed in batman.js.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nv">signIn: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nv">url = </span><span class="k">if</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;signingUp&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="s">&quot;/users.json&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="s">&quot;/users/sign_in.json&quot;</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;user&#39;</span><span class="p">).</span><span class="nx">save</span> <span class="p">{</span><span class="nx">url</span><span class="p">},</span> <span class="nf">(err, record, env) =&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="nv">newToken = </span><span class="nx">env</span><span class="o">?</span><span class="p">.</span><span class="nx">data</span><span class="o">?</span><span class="p">.</span><span class="nx">csrf_token</span>
</span><span class='line'>        <span class="nx">@updateCSRFToken</span><span class="p">(</span><span class="nx">newToken</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span><span class="o">?</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">err</span> <span class="k">instanceof</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">StorageAdapter</span><span class="p">.</span><span class="nx">UnauthorizedError</span>
</span><span class='line'>          <span class="nx">@set</span> <span class="s">&#39;user&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Funzies</span><span class="p">.</span><span class="nx">User</span><span class="p">(</span><span class="nx">record</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">())</span>
</span><span class='line'>          <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;user.errors&#39;</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="s">&quot;base&quot;</span><span class="p">,</span> <span class="s">&quot;Email/password don&#39;t match our records!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nx">record</span><span class="p">.</span><span class="nx">unset</span><span class="p">(</span><span class="s">&#39;password&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">record</span><span class="p">.</span><span class="nx">unset</span><span class="p">(</span><span class="s">&#39;password_confirmation&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">Funzies</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s">&#39;current&#39;</span><span class="p">,</span> <span class="nx">record</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">@closeDialog</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Signing Out</h3>

<p>To send a <code>DELETE</code> request, we&rsquo;ll make a new user, then &ldquo;destroy&rdquo; it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nv">signOut: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nv">user = </span><span class="k">new</span> <span class="nx">Funzies</span><span class="p">.</span><span class="nx">User</span>
</span><span class='line'>    <span class="nv">user.url = </span><span class="s">&quot;/users/sign_out.json&quot;</span>
</span><span class='line'>    <span class="nx">user</span><span class="p">.</span><span class="nx">destroy</span> <span class="nf">(err, record, env) =&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="nv">newToken = </span><span class="nx">env</span><span class="o">?</span><span class="p">.</span><span class="nx">data</span><span class="o">?</span><span class="p">.</span><span class="nx">csrf_token</span>
</span><span class='line'>        <span class="nx">@updateCSRFToken</span><span class="p">(</span><span class="nx">newToken</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">Funzies</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">unset</span><span class="p">(</span><span class="s">&#39;current&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Normally, destroying a not-yet-saved record throws an error. It doesn&rsquo;t throw an error in this case because the storage adapter doesn&rsquo;t check for presence of an ID. (Since we provide a URL, it doesn&rsquo;t need the ID for anything.)</p>

<h2>Keeping the CSRF Token Up-To-Date</h2>

<p>When Rails changes the session, it also provides a new CSRF token for that session. This means that when your user signs in our out, Rails will expect a new CSRF token in the requests from that user. So, make devise send <code>csrf_token</code> when a user signs in or out.</p>

<p>Add to your Devise routes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">devise_for</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">controllers</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">sessions</span><span class="p">:</span> <span class="s2">&quot;users/sessions&quot;</span><span class="p">,</span> <span class="c1"># for sending CSRF tokens</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then define the <code>users/sessions</code> controller. Put this in <code>app/controllers/users/sessions_controller.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Users</span><span class="o">::</span><span class="no">SessionsController</span> <span class="o">&lt;</span> <span class="ss">Devise</span><span class="p">:</span><span class="ss">:SessionsController</span>
</span><span class='line'>  <span class="n">respond_to</span> <span class="ss">:json</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">resource</span> <span class="o">=</span> <span class="n">warden</span><span class="o">.</span><span class="n">authenticate!</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">:scope</span> <span class="o">=&gt;</span> <span class="n">resource_name</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:recall</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">controller_path</span><span class="si">}</span><span class="s2">#failure&quot;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="n">sign_in_and_redirect</span><span class="p">(</span><span class="n">resource_name</span><span class="p">,</span> <span class="n">resource</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="n">sign_out</span><span class="p">(</span><span class="n">resource_name</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># on sign-out, send back the CSRF token</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="p">{</span><span class="n">csrf_token</span><span class="p">:</span> <span class="n">form_authenticity_token</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sign_in_and_redirect</span><span class="p">(</span><span class="n">resource_or_scope</span><span class="p">,</span> <span class="n">resource</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">scope</span> <span class="o">=</span> <span class="ss">Devise</span><span class="p">:</span><span class="ss">:Mapping</span><span class="o">.</span><span class="n">find_scope!</span><span class="p">(</span><span class="n">resource_or_scope</span><span class="p">)</span>
</span><span class='line'>    <span class="n">resource</span> <span class="o">||=</span> <span class="n">resource_or_scope</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">warden</span><span class="o">.</span><span class="n">user</span><span class="p">(</span><span class="n">scope</span><span class="p">)</span> <span class="o">!=</span> <span class="n">resource</span>
</span><span class='line'>      <span class="n">sign_in</span><span class="p">(</span><span class="n">scope</span><span class="p">,</span> <span class="n">resource</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1"># on sign-in, put the CSRF token in the JSON!</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="n">current_user</span><span class="o">.</span><span class="n">as_json</span><span class="o">.</span><span class="n">merge</span><span class="p">({</span><span class="n">csrf_token</span><span class="p">:</span> <span class="n">form_authenticity_token</span><span class="p">})</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">failure</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:success</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:errors</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Login failed.&quot;</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, add a way for batman.js to update its <code>Batman.config.CSRF_TOKEN</code>. I put a function on my <code>SessionsController</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Funzies</span><span class="p">.</span><span class="nx">SessionsController</span>
</span><span class='line'>  <span class="nv">updateCSRFToken: </span><span class="nf">(token) -&gt;</span>
</span><span class='line'>    <span class="nv">Batman.config.CSRF_TOKEN = </span><span class="nx">token</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s what I use in <code>signIn</code> and <code>signOut</code> above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Model Transactions in Batman.js]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/07/19/model-transactions-in-batman-dot-js/"/>
    <updated>2014-07-19T09:15:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/07/19/model-transactions-in-batman-dot-js</id>
    <content type="html"><![CDATA[<p><code>Model::transaction</code> provides a deep-copied, &ldquo;shadow-realm&rdquo; version of a record which is great for rendering into edit forms. Any changes made to it can be saved (which updates the original record too), or just forgotten.</p>

<!-- more -->


<p>Here&rsquo;s the problem transactions exist to solve:</p>

<ul>
<li>You want your user to edit something</li>
<li>You render a record into an edit form</li>
<li>User edits the form</li>
<li>User clicks back button</li>
<li>User is surprised to see that the record&rsquo;s changes were &ldquo;saved&rdquo; (In fact, only the in-memory record was changed &mdash; the change wasn&rsquo;t sent to the server)</li>
</ul>


<p><code>Model::transaction</code> solves this problem by returning a <em>deep copy</em> of the record at hand which can be:</p>

<ul>
<li><strong>saved</strong>, just like a normal record, in which case changes are applied to the original</li>
<li><strong>forgotten</strong>, by simply navigating away</li>
<li><strong>applied</strong>, which applies changes to the original, but doesn&rsquo;t update the server.</li>
</ul>


<p><em>The name &ldquo;transaction&rdquo; hearkens back to database transactions where changes aren&rsquo;t applied unless they&rsquo;re all successful. In the same way, changes to a <code>Batman.Transaction</code> aren&rsquo;t applied unless you explicitly <code>save</code> or <code>applyChanges</code>.</em></p>

<h2>Setting up a Transaction</h2>

<p>To set up a transaction, call <code>transaction</code> on the record at hand:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">RaceHorsesController</span> <span class="k">extends</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">ApplicationController</span>
</span><span class='line'>  <span class="nv">edit: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>    <span class="nx">MyApp</span><span class="p">.</span><span class="nx">RaceHorse</span><span class="p">.</span><span class="nx">find</span> <span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nf">(err, record) -&gt;</span>
</span><span class='line'>      <span class="nv">deepCopy = </span><span class="nx">record</span><span class="p">.</span><span class="nx">transaction</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">@set</span> <span class="s">&#39;raceHorse&#39;</span><span class="p">,</span> <span class="nx">deepCopy</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Transaction&rsquo;s Deep Copy</h2>

<p>A transaction is actually an instance of the original model. It differs in 2 ways:</p>

<ul>
<li>It isn&rsquo;t added to the <code>loaded</code> set (aka &ldquo;the memory map&rdquo;)</li>
<li>It has <code>Batman.Transaction</code> mixed in, which defines some new functions and overrides <code>Model::save</code></li>
</ul>


<p><code>Model::transaction</code> peforms a deep copy of a <code>Batman.Model</code> by
 iterating over the model&rsquo;s <code>attributes</code> hash. The <code>attributes</code> hash is where encoded properties are stored (and other properties, unless you define an accessor that says otherwise).</p>

<p>Batman.js copies the attributes hash into the transaction by handling each value:</p>

<ul>
<li>If the value is a <code>Batman.Model</code>, it&rsquo;s also copied with <code>Model::transaction</code></li>
<li>If the value is a <code>Batman.AssociationSet</code>, it&rsquo;s cloned into a <code>Batman.TransactionAssociationSet</code> and its members are copied with <code>Model::transaction</code></li>
<li>Otherwise, the value is set into the transaction&rsquo;s attributes.</li>
</ul>


<p>Under the hood, batman.js tracks which objects it has already cloned. That way, it doesn&rsquo;t get thrown into an infinite loop.</p>

<p>If a mutable object is copied from the original to the transaction, batman.js issues a warning. This is because it can&rsquo;t isolate changes. The transaction and the original are both refering to the <em>same object</em>, so changes to one will also affect the other. Mutable objects include:</p>

<ul>
<li>Dates (although mutating dates is such a pain in JS, I doubt this will cause a problem)</li>
<li>Arrays</li>
<li>Batman.Set, Batman.Hash, etc</li>
<li>any JavaScript object</li>
</ul>


<h2>Saving a Transaction</h2>

<p>To save a transaction, call <code>save</code> on it. This will:</p>

<ul>
<li>validate the transaction (with client-side validations)</li>
<li>apply changes to the original model</li>
<li>save the transaction (ie, the storage operation will be performed with the transaction, not the original)</li>
<li>pass the original to the <code>save</code> callback</li>
</ul>


<p>This means a transaction behaves just like a normal model. You can save it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nv">saveRaceHorse: </span><span class="nf">(raceHorse) -&gt;</span>
</span><span class='line'>    <span class="nx">raceHorse</span><span class="p">.</span><span class="nx">isTransaction</span> <span class="c1"># =&gt; true, just checking</span>
</span><span class='line'>    <span class="nx">raceHorse</span><span class="p">.</span><span class="nx">save</span> <span class="nf">(err, record) -&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">!</span><span class="nx">err</span>
</span><span class='line'>        <span class="nx">Batman</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s">&quot;/race_horses&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> at time of writing, transaction <strong>does not account for server-side validations</strong>. There is an open issue for this <a href="https://github.com/batmanjs/batman/issues/1049">on github</a>.</p>

<h2>Forgetting a Transaction</h2>

<p>If you don&rsquo;t want changes on transaction to be applied, just leave it alone.</p>

<ul>
<li>It&rsquo;s not in the <code>loaded</code> set, so it won&rsquo;t intefere with your app&rsquo;s other data.</li>
<li>The original record has no references to it.</li>
<li>It&rsquo;s still set on your controller (probably), but it will get overrided next time your user edits something.</li>
</ul>


<p>Once it&rsquo;s released from the controller, it will probably just be garbage-collected when the browser gets a chance.</p>

<h2>Applying Changes without Saving</h2>

<p>Transactions have an <code>applyChanges</code> function that updates the original record without performing any storage operations.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">transaction</span><span class="p">.</span><span class="nx">applyChanges</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might use this if your save operation is really complicated and you need to control it by hand.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Batman.js Accessors as Methods]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/06/27/batman-dot-js-accessors-as-methods/"/>
    <updated>2014-06-27T08:10:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/06/27/batman-dot-js-accessors-as-methods</id>
    <content type="html"><![CDATA[<p><a href="http://batmanjs.org">Batman.js</a> is a CoffeeScript front-end MVC framework. One of its core features is <em>accessors</em>, which can be used like properties or methods of a <code>Batman.Object</code>. They can even take arguments!</p>

<!-- more -->


<p><code>Batman.Object</code> has properties defined with <code>@accessor</code> in the class definition. Examples of <code>@accessor</code> as accessible properties and computed properties are bountiful. However, I recently learned that accessors can also be made to take arguments, too!</p>

<p><em>(You can see this example live on at <a href="http://jsbin.com/dalodifo/3/edit">http://jsbin.com/dalodifo/3/edit</a> .)</em></p>

<h2>Definining Accessors with Arguments</h2>

<p>To make an accessor that takes arguments, use <code>Batman.TerminalAccessible</code>. Let&rsquo;s say I have a <code>MathObject</code> which stores a <code>value</code> and allows you to perform calculations on it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MathObject</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nb">Object</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;value&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;times&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">TerminalAccessible</span> <span class="nf">(multiplier) =&gt;</span>
</span><span class='line'>      <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;value&#39;</span><span class="p">)</span> <span class="o">*</span> <span class="nx">multiplier</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, my <code>times</code> accessor takes an argument (<code>multiplier</code>) and returns the multiplied value. I pass the argument with <code>get</code>, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">fiveObject = </span><span class="k">new</span> <span class="nx">MathObject</span><span class="p">(</span><span class="nv">value: </span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="nx">fiveObject</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;time&#39;</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c1"># =&gt; 50</span>
</span><span class='line'><span class="nx">fiveObject</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;time&#39;</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>  <span class="c1"># =&gt; 15</span>
</span></code></pre></td></tr></table></div></figure>


<p>Under the hood, <code>fiveObject.get('time')</code> returns a <code>Batman.TerminalAccessible</code>. This object provides <a href="http://rmosolgo.github.io/blog/2014/04/20/automatic-source-tracking-in-batman-dot-js/">source tracking</a> for the function that it calls.</p>

<h2>Objects as Arguments</h2>

<p>You can also have <code>Batman.Objects</code> as arguments. For example, if we wanted to multiply two <code>MathObject</code>s:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MathObject</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nb">Object</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;value&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;timesMathObject&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">TerminalAccessible</span> <span class="nf">(mathObj) =&gt;</span>
</span><span class='line'>      <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;times&#39;</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="nx">mathObj</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;value&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, the other <code>mathObj</code> will be included in the source tracking. If <code>mathObj.value</code> changes, the value will be recalculated.  This is <strong>essential</strong> for values computed from two <code>Batman.Object</code>s!</p>

<h2>What&rsquo;s the point?</h2>

<p>This allows <strong>observable</strong> &ldquo;method calls&rdquo;. It&rsquo;s wrapped in batman.js <a href="http://rmosolgo.github.io/blog/2014/04/20/automatic-source-tracking-in-batman-dot-js/">source tracking</a>, so whenever the object or the arguments change, the value will be recalculated.</p>

<p>For example, I use it for checking whether a room is at maximum occupancy for certain events:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">location</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;isFullFor&#39;</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="nx">earlyEvent</span><span class="p">)</span> <span class="c1"># =&gt; false</span>
</span><span class='line'><span class="nx">location</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;isFullFor&#39;</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="nx">lateEvent</span><span class="p">)</span>  <span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>When people attend the event (or the location max occupancy is changed), these values are automatically recalculated!</p>

<p>This is the same approach used in batman.js internals for accessing SetIndexes (<a href="https://github.com/batmanjs/batman/blob/master/src/set/set.coffee#L19">source</a>).</p>

<h2>Accessor Arguments in View Bindings</h2>

<p>To pass arguments to accessors in view bindings, you can use the <code>[...]</code> or <code>withArguments</code> filters. Let&rsquo;s say I want to put this operation in a view binding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">location</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;isFullFor&#39;</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="nx">earlyEvent</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>[...]</code> is shorthand for calling <code>get</code> with the given argument. I can use it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&#39;location.isFullFor[earlyEvent]&#39;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>earlyEvent</code> will be looked up in context and the value will be passed to <code>get</code>, as in the CoffeeScript above.</p>

<p>You can also use the <code>withArguments</code> filter (as of 0.16, <a href="https://github.com/batmanjs/batman/pull/923">PR</a>) like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&#39;location.isFullFor | withArguments earlyEvent&#39;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>withArguments</code> recognizes that it should use <code>get</code> in this case.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Blog with Batman.js]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/06/06/build-a-blog-with-batman-dot-js/"/>
    <updated>2014-06-06T08:38:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/06/06/build-a-blog-with-batman-dot-js</id>
    <content type="html"><![CDATA[<p>In this whirlwind tutorial, we&rsquo;ll build a blog with <a href="http://batmanjs.org">batman.js</a> and <a href="http://firebase.com">Firebase</a>.</p>

<!-- more -->


<p>To get a feel for batman.js, let&rsquo;s build an blog where:</p>

<ul>
<li>People may sign in (with Github)</li>
<li>The owner may create, edit and destroy posts</li>
<li>Other signed-in users may leave comments and delete their own comments</li>
<li>The owner may destroy comments</li>
</ul>


<p>If you run into any problems on the way, just let me know in the comments section at the bottom of this page! Also, the <a href="https://github.com/rmosolgo/batmanjs-blog">completed source of this tutorial is available on Github</a>.</p>

<h1>Preface: Batman.js Objects and Properties</h1>

<p>If you&rsquo;re brand new to batman.js, here&rsquo;s the quick-and-dirty:</p>

<p><code>Batman.Object</code> is the superclass of (almost) all objects in batman.js. Properties of <code>Batman.Object</code>s are also called <a href="http://batmanjs.org/docs/api/batman.object_accessors.html"><strong>accessors</strong></a>, becuase they&rsquo;re <em>always</em> defined with <code>@accessor</code> in the class definition.</p>

<p>There are 2 possible syntaxes:</p>

<ul>
<li><strong>Read and write</strong> accessors:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Comment</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;mood&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">get: </span><span class="nf">(key)        -&gt;</span> <span class="c1"># getter function</span>
</span><span class='line'>    <span class="nv">set: </span><span class="nf">(key, value) -&gt;</span> <span class="c1"># setter function</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Read-only</strong> accessors:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;isPositive&#39;</span><span class="p">,</span> <span class="nf">(key) -&gt;</span> <span class="c1"># getter function only</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>@accessor</code> is your friend. Use <code>@accessor</code> whenever you can (it can often replace functions, too). Accessors are <a href="http://rmosolgo.github.io/blog/2014/04/20/automatic-source-tracking-in-batman-dot-js/">automatically tracked</a> by batman.js, so view bindings and other accessors are automatically updated. You can defined accessors in your <code>Batman.Model</code>, <code>Batman.Controller</code> and <code>Batman.View</code> subclasses.</p>

<p>Accessors are <em>always</em> <strong>accessed via <code>get</code> and <code>set</code></strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">myComment</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s">&quot;mood&quot;</span><span class="p">,</span> <span class="s">&quot;pensive&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">myComment</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&quot;mood&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>These property names are also called <em>keypaths</em> and maybe be &ldquo;deep&rdquo;, chained with <code>.</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">myComment</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;post.name&#39;</span><span class="p">)</span> <span class="c1"># equivalent to myComment.get(&#39;post&#39;).get(&#39;name&#39;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Under the hood, accessors power batman.js&rsquo;s <a href="http://rmosolgo.github.io/blog/2014/04/20/automatic-source-tracking-in-batman-dot-js/">automatic source tracking</a> and view bindings. Now, back to your regularly scheduled programming!</p>

<h1>Setup</h1>

<p>To build this blog, you&rsquo;ll need:</p>

<ul>
<li>A <a href="http://github.com">Github account</a></li>
<li><a href="http://nodejs.org/">node.js</a></li>
<li>A <a href="http://firebase.com">Firebase account</a></li>
</ul>


<p>Also, you&rsquo;ll need a copy of <a href="http://github.com/rmosolgo/batmanjs-starter">rmosolgo/batmanjs-starter</a>, which can be installed with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/code <span class="c"># or wherever you keep it</span>
</span><span class='line'>git clone git@github.com:rmosolgo/batman-starter.git batmanjs_blog
</span><span class='line'><span class="nb">cd </span>batmanjs_blog
</span><span class='line'>npm install
</span></code></pre></td></tr></table></div></figure>


<p>You can make sure it&rsquo;s all ready-to-go with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install -g gulp
</span><span class='line'>gulp
</span></code></pre></td></tr></table></div></figure>


<p>Then visit <a href="http://localhost:9000">localhost:9000</a>. If you see <code>Welcome to batman.js!</code>, then you&rsquo;re all set!</p>

<h1>Storage and Authentication</h1>

<p>We don&rsquo;t have a server for this app, but we do have to set up Firebase!</p>

<h3>Set Up Firebase</h3>

<p>First, open <a href="http://firebase.com">Firebase</a> and click <code>Login</code> and click the Github logo. Then, create a new app. Any name will work, for example <code>rm-batmanjs-blog</code>. Ok, you have a firebase!</p>

<h3>Register Your App with Github</h3>

<p>Then, in another tab, sign into <a href="http://github.com">Github</a>, and click: <code>Account Settings</code> (top right) > <code>Applications</code> (in the sidebar) > <code>Register New Application</code>. Add this information:</p>

<ul>
<li>Application name: firebase name (eg, <code>rm-batmanjs-blog</code>)</li>
<li>Application URL: <code>http://#{firebase name}.firebaseapp.com</code> (eg, <code>http://rm-batmanjs-blog.firebaseapp.com</code>)</li>
<li>Callback URL: <code>https://auth.firebase.com/auth/github/callback</code> (<a href="https://www.firebase.com/docs/security/simple-login-github.html">provided by Firebase</a>)</li>
</ul>


<p>Click <code>Register Application</code>. Ok, you have your Client ID and Client Secret!</p>

<p>Now, provide the Client ID and Client Secret to Firebase. In your Firebase app manangement tab, click <code>Manage App</code> > <code>Simple Login</code> > <code>Github</code>:</p>

<ul>
<li>Check <code>Enabled</code></li>
<li>Paste in Client ID and Client Secret</li>
</ul>


<p>(Firebase automatically saves your input.)</p>

<h3>Configure Your Batman.js App</h3>

<p>Now, configure your app to use your firebase. Open <code>app.coffee</code>, then replace the <code>@syncsWithFirebase</code> name and add <code>@authorizesWithFirebase()</code>. For example, it should look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nx">@syncsWithFirebase</span> <span class="s">&quot;rm-batmanjs-blog&quot;</span>
</span><span class='line'>  <span class="nx">@authorizesWithFirebase</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also in <code>app.coffee</code>, make a app accessor <code>isAdmin</code>, looking up your github ID from <code>https://api.github.com/users/#{yourUserId}</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nx">@classAccessor</span> <span class="s">&#39;isAdmin&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;currentUser.uid&#39;</span><span class="p">)</span> <span class="o">is</span> <span class="s">&quot;github:{yourGitHubId}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To show the <code>Log In</code>/<code>Log Out</code> buttons, remove the <code>&lt;!-- requires @authorizesWithFirebase</code> / <code>--&gt;</code> comment wrapper in <code>index.html</code>.</p>

<p>Now, you will see the <code>Log In</code> button, and it will log you in with Github!</p>

<p><em>At the end of this post, we&rsquo;ll use Firebase Security Rules to provide &ldquo;server-side&rdquo; authentication, which is a must-have!</em></p>

<h1>Posts</h1>

<p>To add posts to our blog, we will:</p>

<ul>
<li>define the <code>App.Post</code> model</li>
<li>define <code>App.PostsController</code> and make routes to it</li>
<li>write some HTML for the controller to render</li>
</ul>


<h2>Post Model</h2>

<p>In a batman.js project, models go in the <code>models/</code> directory. In the starter package, you&rsquo;ll find the <code>App.Greeting</code> model in <code>greeting.coffee</code>. Remove it. Then, add <code>post.coffee</code>. Here&rsquo;s the <code>Post</code> model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>  <span class="vi">@resourceName: </span><span class="s">&#39;post&#39;</span>
</span><span class='line'>  <span class="nx">@persist</span> <span class="nx">BatFire</span><span class="p">.</span><span class="nx">Storage</span>
</span><span class='line'>  <span class="nx">@encode</span> <span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="s">&#39;content&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@validate</span> <span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="nv">presence: </span><span class="kc">true</span>
</span><span class='line'>  <span class="nx">@validate</span> <span class="s">&#39;content&#39;</span><span class="p">,</span> <span class="nv">minLength: </span><span class="mi">25</span>
</span><span class='line'>  <span class="nx">@belongsToCurrentUser</span><span class="p">(</span><span class="nv">ownership: </span><span class="kc">true</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">@encodesTimestamps</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;createdAtFormatted&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;created_at&#39;</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="nx">toDateString</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s break that down:</p>

<h3>Class Definition</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Model</span>
</span></code></pre></td></tr></table></div></figure>


<p>In a batman.js app, all models are children of <a href="http://batmanjs.org/docs/api/batman.model.html"><code>Batman.Model</code></a>. Since we&rsquo;re using CoffeeScript&rsquo;s <code>extend</code>, you can extend your own models, too &mdash; the inheritance hierarchy will be maintained.</p>

<h3>Persistence</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="vi">@resourceName: </span><span class="s">&#39;post&#39;</span>
</span><span class='line'>  <span class="nx">@persist</span> <span class="nx">BatFire</span><span class="p">.</span><span class="nx">Storage</span>
</span><span class='line'>  <span class="nx">@encode</span> <span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="s">&#39;content&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>These define how the model is persisted:</p>

<ul>
<li><code>@resourceName</code> is a minification-safe model name. It may also define &ldquo;where&rdquo; to save the model (for example, a URL segment).</li>
<li><code>@persist</code> says which <a href="http://batmanjs.org/docs/api/batman.storageadapter.html"><code>Batman.StorageAdapter</code></a> will connect this model to a storage backend. We&rsquo;re using a Firebase adapter, but batman.js also ships with <code>Batman.LocalStorage</code> and <code>Batman.RestStorage</code>. <code>Batman.RailsStorage</code> is in the <code>batman.rails</code> extra.</li>
<li><code>@encode</code> tells batman.js which attributes will be persisted with the storage adapter.</li>
</ul>


<h3>Validations</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nx">@validate</span> <span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="nv">presence: </span><span class="kc">true</span>
</span><span class='line'>  <span class="nx">@validate</span> <span class="s">&#39;content&#39;</span><span class="p">,</span> <span class="nv">minLength: </span><span class="mi">25</span>
</span></code></pre></td></tr></table></div></figure>


<p>Batman.js models may validate their attributes. See the docs for <a href="http://batmanjs.org/docs/api/batman.model_validations.html">all supported validators</a> and the custom validation API.</p>

<h3>Special BatFire.Storage Functions</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nx">@belongsToCurrentUser</span><span class="p">(</span><span class="nv">ownership: </span><span class="kc">true</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">@encodesTimestamps</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>These are provided by <a href="http://github.com/rmosolgo/batfire"><code>BatFire.Storage</code></a> as conveniences.</p>

<ul>
<li><code>@belongsToCurrentUser(ownership: true)</code> adds <code>created_by_uid</code> to our model and provides client-side validation that only the creator may alter any persisted records</li>
<li><code>@encodesTimestamps()</code> defines and encodes <code>created_at</code> and <code>updated_at</code> attributues.</li>
</ul>


<h3>Accessors</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;createdAtFormatted&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;created_at&#39;</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="nx">toDateString</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This shows how you can define properties on your models. Now, <code>post.get('createdAtFormatted')</code> will return a (slightly) prettier version of the <code>created_at</code> date string. Since it&rsquo;s a <a href="http://batmanjs.org/docs/api/batman.object_accessors.html"><code>Batman.Object</code> accessor</a>, if <code>created_at</code> somehow changed, <code>createdAtFormatted</code> would also be updated.</p>

<h2>PostsController</h2>

<p><code>Batman.Controller</code> is modeled after Rails controllers. It has actions that are invoked by routes and are responsible for rendering views. They belong in <code>controllers/</code>, so create <code>controllers/posts_controller.coffee</code>. Let&rsquo;s define a controller to render our posts:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">PostsController</span> <span class="k">extends</span> <span class="nx">App</span><span class="p">.</span><span class="nx">ApplicationController</span>
</span><span class='line'>  <span class="nv">routingKey: </span><span class="s">&#39;posts&#39;</span>
</span><span class='line'>  <span class="nv">index: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@set</span> <span class="s">&#39;posts&#39;</span><span class="p">,</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;all.sortedByDescending.created_at&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">new</span><span class="o">:</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@set</span> <span class="s">&#39;post&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">show: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">find</span> <span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nf">(err, record) =&gt;</span>
</span><span class='line'>      <span class="k">throw</span> <span class="nx">err</span> <span class="k">if</span> <span class="nx">err</span><span class="o">?</span>
</span><span class='line'>      <span class="nx">@set</span> <span class="s">&#39;post&#39;</span><span class="p">,</span> <span class="nx">record</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">edit: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">find</span> <span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nf">(err, record) =&gt;</span>
</span><span class='line'>      <span class="k">throw</span> <span class="nx">err</span> <span class="k">if</span> <span class="nx">err</span><span class="o">?</span>
</span><span class='line'>      <span class="nx">@set</span> <span class="s">&#39;post&#39;</span><span class="p">,</span> <span class="nx">record</span><span class="p">.</span><span class="nx">transaction</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">savePost: </span><span class="nf">(post) -&gt;</span>
</span><span class='line'>    <span class="nx">post</span><span class="p">.</span><span class="nx">save</span> <span class="nf">(err, record) =&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="p">(</span><span class="nx">err</span> <span class="k">instanceof</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">ErrorsSet</span><span class="p">)</span>
</span><span class='line'>          <span class="k">throw</span> <span class="nx">err</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nx">@redirect</span><span class="p">(</span><span class="nv">action: </span><span class="s">&quot;index&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">destroyPost: </span><span class="nf">(post) -&gt;</span>
</span><span class='line'>    <span class="nx">post</span><span class="p">.</span><span class="nx">destroy</span> <span class="nf">(err, record) =&gt;</span>
</span><span class='line'>      <span class="nx">@redirect</span><span class="p">(</span><span class="nv">action: </span><span class="s">&quot;index&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, you can see:</p>

<ul>
<li><code>App.PostsController extends App.ApplicationController</code>: all controllers extends a base controller. In big apps, <code>ApplicationController</code> is home to things like <a href="http://batmanjs.org/docs/api/batman.controller.html#error_handling">error handling</a> and <a href="https://www.softcover.io/read/b5c051f3/batmanjs_mvc_cookbook/controller#sec-render_into_modal">dialog render helpers</a>.</li>
<li>Controllers must have a <code>routingKey</code>. This is a <a href="http://batmanjs.org/docs/api/batman.controller.html#routingkey_and_minification">minification-safe name</a> which is used by the router.</li>
<li>Controllers have <a href="http://batmanjs.org/docs/api/batman.controller.html#actions"><strong>actions</strong></a> which fetch data and render views. In <code>PostsController</code>, the <em>actions</em> are <code>index</code>, <code>new</code>, <code>show</code>, and <code>edit</code>.</li>
<li><code>savePost</code> and <code>destroyPost</code> will be invoked by user input (described in the HTML section, next)</li>
</ul>


<p>Let&rsquo;s also add routes for this controller. In <code>app.coffee</code>, remove any <code>@root</code> or <code>@resources</code> declarations and add:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nx">@root</span> <span class="s">&#39;posts#index&#39;</span>
</span><span class='line'>  <span class="nx">@resources</span> <span class="s">&#39;posts&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sets up <code>/</code> to dispatch <code>PostsController</code>&rsquo;s <code>index</code> action and sets up <a href="http://batmanjs.org/docs/api/batman.app_routing.html#class_function_resources">resource-based routes</a> for <code>PostsController</code>.</p>

<p>There are a few other things to point out:</p>

<ul>
<li>We didn&rsquo;t call <code>@render</code> in any of our actions. This is because batman.js <em>automatically renders</em> after any controller actions that didn&rsquo;t explicitly render. This is called the <em>implicit render</em> and may be overriden, for example, if you want to <a href="https://www.softcover.io/read/b5c051f3/batmanjs_mvc_cookbook/controller#sec-defer_render">wait for data to load before rendering views</a>.</li>
<li><em>Actions</em> and <em>event handlers</em> are both functions on the controller. This is possible because the controller is in the binding context of the view (see &ldquo;Render Context&rdquo; in the <a href="http://batmanjs.org/docs/bindings.html">bindings guide</a>).</li>
</ul>


<p>Also, since we have routes, let&rsquo;s update the navbar <code>&lt;ul&gt;</code> in <code>index.html</code> to look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;nav navbar-nav&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">data-route=</span><span class="s">&#39;routes.posts&#39;</span><span class="nt">&gt;</span>Blog Posts<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">data-showif=</span><span class="s">&#39;isAdmin&#39;</span><span class="nt">&gt;&lt;a</span> <span class="na">data-route=</span><span class="s">&#39;routes.posts.new&#39;</span><span class="nt">&gt;</span>New Post<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(More about those <code>data-</code> attributes to follow&hellip;)</p>

<h2>Posts HTML</h2>

<p>We need HTML to be rendered in by our controller. <em>HTML templates</em> are distinct from <em>views</em>, but may be used together. This is described in detail below. For now, let&rsquo;s add some HTML. In a batman.js project, HTML for a controller action belongs in <code>html/#{routingKey}/#{action}.html</code>.</p>

<h3>show.html</h3>

<p>Let&rsquo;s define <code>html/posts/show.html</code>. It will be loaded by <code>posts#show</code> to display a post instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;row&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;col-sm-12&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&#39;page-header&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&#39;post.title&#39;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>      <span class="nt">&lt;small</span> <span class="na">data-bind=</span><span class="s">&#39;post.createdAtFormatted&#39;</span><span class="nt">&gt;&lt;/small&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;row&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&#39;col-sm-12&#39;</span> <span class="na">data-bind=</span><span class="s">&#39;post.content&#39;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Besides the <a href="http://getbootstrap.com">bootstrap boilerplate</a>, you might notice <code>data-bind</code> on some of these HTML tags. <code>data-*</code> attributes is how batman.js binds data to the DOM. Those attributes are called <strong><a href="http://batmanjs.org/docs/bindings.html">data bindings</a></strong>.</p>

<p>The <a href="http://batmanjs.org/docs/api/batman.view_bindings.html#data-bind"><code>data-bind</code> binding</a> is the simplest data binding: it simply connects the node to the property which is passed to it.</p>

<p>When combining data and text, it&rsquo;s common to use <code>&lt;span data-bind="..."&gt;&lt;/span&gt;</code>, as in the <code>&lt;h1/&gt;</code> above.</p>

<h3>index.html</h3>

<p>Let&rsquo;s define <code>html/posts/index.html</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;row&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&#39;col-sm-12&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&#39;&quot;Post&quot; | pluralize posts.length&#39;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&#39;list-unstyled&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">data-foreach-post=</span><span class="s">&#39;posts&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;row&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;a</span> <span class="na">data-route=</span><span class="s">&#39;routes.posts[post]&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&#39;lead col-sm-4&#39;</span> <span class="na">data-bind=</span><span class="s">&#39;post.title&#39;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;col-sm-2&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">data-showif=</span><span class="s">&#39;post.isOwnedByCurrentUser&#39;</span> <span class="na">class=</span><span class="s">&#39;btn btn-warning pull-right&#39;</span> <span class="na">data-route=</span><span class="s">&#39;routes.posts[post].edit&#39;</span><span class="nt">&gt;</span>Edit<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;col-sm-2&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">data-showif=</span><span class="s">&#39;post.isOwnedByCurrentUser&#39;</span> <span class="na">class=</span><span class="s">&#39;btn btn-danger pull-right&#39;</span> <span class="na">data-event-click=</span><span class="s">&#39;destroyPost | withArguments post&#39;</span><span class="nt">&gt;</span>Delete<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&#39;text-muted col-sm-4&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        Posted on
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&quot;post.createdAtFormatted&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;row&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&#39;col-sm-12&#39;</span> <span class="na">data-bind=</span><span class="s">&#39;post.content | truncate 100&#39;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;row&#39;</span> <span class="na">data-showif=</span><span class="s">&#39;isAdmin&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;col-sm-2&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&#39;btn btn-default&#39;</span> <span class="na">data-route=</span><span class="s">&#39;routes.posts.new&#39;</span><span class="nt">&gt;</span>New Post<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s look at some interesting parts:</p>

<h4>View Filters</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&#39;&quot;Post&quot; | pluralize posts.length&#39;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will output things like <code>3 Posts</code>. It takes a plain string, then passes it to the <a href="http://batmanjs.org/docs/api/batman.view_filters.html#pluralize(value%2C_count)_%3A_string">pluralize view filter</a>, with <code>posts.length</code> as an argument. Since it&rsquo;s bound to <code>posts.length</code>, it will automatically update whenever the number of <code>Post</code>s change.</p>

<p>There are quite a lot of batman.js view filters, be sure to <a href="http://batmanjs.org/docs/api/batman.view_filters.html">check out the documentation</a>.</p>

<h4>Iterator Binding</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&#39;list-unstyled&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">data-foreach-post=</span><span class="s">&#39;posts&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="http://batmanjs.org/docs/api/batman.view_bindings.html#data-foreach"><code>data-foreach-#{item}="collection"</code> binding</a> is how you bind to a collection. The <code>&lt;li /&gt;</code> is called the &ldquo;prototype node&rdquo;, and one will be rendered for each item in the collection. As long as <code>"collection"</code> is a batman.js data structure (ie, not a plain JS array), the binding will be automatically updated when items are added and removed. (Unless you explicitly make arrays yourself, you don&rsquo;t have to worry; batman.js always uses observable data structures like <a href="http://batmanjs.org/docs/api/batman.set.html">Batman.Set</a> and <a href="http://batmanjs.org/docs/api/batman.hash.html">Batman.Hash</a>.)</p>

<h4>Named Routes</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">data-route=</span><span class="s">&#39;routes.posts[post]&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'><span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="http://batmanjs.org/docs/api/batman.view_bindings.html#data-route"><code>data-route</code> binding</a> is how you link to other routes in your app. The &ldquo;route query&rdquo; passed to the binding is based on your declared routes. Here are a few other valid routes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>data-route=&quot;routes.posts&quot;               # =&gt; goes to `posts#index`
</span><span class='line'>data-route=&quot;routes.posts.new&quot;           # =&gt; goes to `posts#new`
</span><span class='line'>data-route=&quot;routes.posts[myPost]&quot;       # =&gt; goes to `posts#show` for a post instance `myPost`
</span><span class='line'>data-route=&quot;routes.posts[myPost].edit&quot;  # =&gt; goes to `posts#edit` for a post instance `myPost`
</span></code></pre></td></tr></table></div></figure>


<p>In the binding above, <code>post</code> refers to a post instance, so the <code>&lt;a/&gt;</code> will point to that post&rsquo;s <code>show</code> page.</p>

<h4>Showif / Event</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">data-showif=</span><span class="s">&#39;post.isOwnedByCurrentUser&#39;</span> <span class="na">class=</span><span class="s">&#39;btn btn-danger pull-right&#39;</span> <span class="na">data-event-click=</span><span class="s">&#39;destroyPost | withArguments post&#39;</span><span class="nt">&gt;</span>Delete<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This has two bindings:</p>

<ul>
<li><code>data-showif</code> shows the node if the keypath returns truthy. <code>isOwnedByCurrentUser</code> is provided by <code>BatFire.Storage</code>.</li>
<li><code>data-event-click</code> points to a function to call when the node is clicked, in this case <code>AppPostsController::destroyPost</code>, which we defined above</li>
</ul>


<h3>new.html</h3>

<p>For <code>new.html</code>, let&rsquo;s plan ahead: we&rsquo;ll make <code>new.html</code> include a reusable form, <code>form.html</code>. So, <code>new.html</code> is very simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;row&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&#39;col-sm-12&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    New Post
</span><span class='line'>  <span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">data-partial=</span><span class="s">&#39;posts/form&#39;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Partial</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">data-partial=</span><span class="s">&#39;posts/form&#39;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will render <code>html/posts/form.html</code> inside that node.</p>

<p>Let&rsquo;s add <code>form.html</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">data-formfor-post=</span><span class="s">&#39;post&#39;</span> <span class="na">data-event-submit=</span><span class="s">&#39;savePost | withArguments post&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;errors alert alert-warning&#39;</span> <span class="na">data-showif=</span><span class="s">&#39;post.errors.length&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;form-group&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label&gt;</span>Title<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;text&#39;</span> <span class="na">class=</span><span class="s">&#39;form-control&#39;</span> <span class="na">data-bind=</span><span class="s">&#39;post.title&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;form-group&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label&gt;</span>Content<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;textarea</span> <span class="na">class=</span><span class="s">&#39;form-control&#39;</span> <span class="na">data-bind=</span><span class="s">&#39;post.content&#39;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;form-group&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;submit&#39;</span> <span class="na">class=</span><span class="s">&#39;btn btn-primary&#39;</span> <span class="na">value=</span><span class="s">&#39;Save&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&#39;btn btn-danger&#39;</span> <span class="na">data-route=</span><span class="s">&#39;routes.posts&#39;</span><span class="nt">&gt;</span>Cancel<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s examine some of the details:</p>

<h4>Form Binding</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">data-formfor-post=</span><span class="s">&#39;post&#39;</span> <span class="na">data-event-submit=</span><span class="s">&#39;savePost | withArguments post&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="http://batmanjs.org/docs/api/batman.view_bindings.html#data-formfor"><code>data-formfor-#{formName}="item"</code> binding</a> will automatically bind validation errors to the element matching <code>.errors</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;errors alert alert-warning&#39;</span> <span class="na">data-showif=</span><span class="s">&#39;post.errors.length&#39;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, the <code>data-event-submit</code> will invoke <code>App.PostsController::savePost</code> when the form is submitted.</p>

<h4>Input Bindings</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;text&#39;</span> <span class="na">class=</span><span class="s">&#39;form-control&#39;</span> <span class="na">data-bind=</span><span class="s">&#39;post.title&#39;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you use <code>data-bind</code> on an <code>&lt;input /&gt;</code> (or <code>&lt;select /&gt;</code>, etc), you create a two-way binding. Any changes to the input will change the attribute of the model.
You can <a href="https://www.softcover.io/read/b5c051f3/batmanjs_mvc_cookbook/html#sec-input_bindings">bind to all different kinds of inputs</a>.</p>

<h3>edit.html</h3>

<p>In <code>edit.html</code>, let&rsquo;s reuse our <code>form.html</code> partial:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;row&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&#39;col-sm-12&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    Edit Post
</span><span class='line'>  <span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">data-partial=</span><span class="s">&#39;posts/form&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Where were the views?</h2>

<p>In batman.js, <em>views</em> are CoffeeScript classes that render templates and maintain bindings. They&rsquo;re intantiated and destroyed when controller actions are rendered. It&rsquo;s a bit like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>ROUTER                      --&gt;  CONTROLLER        --&gt;  VIEW                      --&gt;  HTML TEMPLATE
</span><span class='line'>- responds to URL change         - executes action      - parses bindings from HTML    - copied into views
</span><span class='line'>- dispatches controller action   - renders view         - inserts HTML into DOM        - just sits there
</span><span class='line'>                                                        - maintains bindings
</span></code></pre></td></tr></table></div></figure>


<p>You might have noticed that we made a <em>controller</em> and a <em>template</em>, but no <code>Batman.View</code>. Why not?</p>

<p>This is because <code>Batman.Controller</code> will use a vanilla <code>Batman.View</code> to render your HTML unless you define one by hand. Custom views a great for a ton of things:</p>

<ul>
<li>Rendering <a href="http://rmosolgo.github.io/blog/2013/11/23/dynamic-navigation-view-with-batman-dot-js/">specialized UI components</a></li>
<li>Integrating other librarires, like <a href="https://www.softcover.io/read/b5c051f3/batmanjs_mvc_cookbook/view#sec-jquery_initialization">jQuery plugins</a> or <a href="http://rmosolgo.github.io/blog/2014/04/30/integrate-batman-dot-js-and-leaflet-with-a-custom-view/">leaflet.js</a></li>
<li><a href="https://www.softcover.io/read/b5c051f3/batmanjs_mvc_cookbook/view#sec-view_transitions">Animating page changes</a></li>
</ul>


<p>But we didn&rsquo;t need one, so we didn&rsquo;t make one!</p>

<p>(PS: Learn more about <a href="https://www.softcover.io/read/b5c051f3/batmanjs_mvc_cookbook/controller#sec-default_views">controllers&#8217; default views</a> or <a href="http://batmanjs.org/docs/views.html">custom views</a>.)</p>

<h1>Comments</h1>

<p>Let&rsquo;s allow other signed-in users to comment on our blog posts. We&rsquo;ll need to:</p>

<ul>
<li>define the model, <code>App.Comment</code></li>
<li>associate it to <code>App.Post</code></li>
<li>add a comment form to <code>posts/show</code></li>
</ul>


<h2>App.Comment</h2>

<p>Open up <code>models/comment.coffee</code> and define <code>App.Comment</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Comment</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>  <span class="vi">@resourceName: </span><span class="s">&#39;comment&#39;</span>
</span><span class='line'>  <span class="nx">@persist</span> <span class="nx">BatFire</span><span class="p">.</span><span class="nx">Storage</span>
</span><span class='line'>  <span class="nx">@encode</span> <span class="s">&#39;content&#39;</span>
</span><span class='line'>  <span class="nx">@belongsTo</span> <span class="s">&#39;post&#39;</span>
</span><span class='line'>  <span class="nx">@validate</span> <span class="s">&#39;content&#39;</span><span class="p">,</span> <span class="nv">presence: </span><span class="kc">true</span>
</span><span class='line'>  <span class="nx">@belongsToCurrentUser</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">@encodesTimestamps</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;createdAtFormatted&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;created_at&#39;</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="nx">toDateString</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;canBeDeleted&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;isOwnedByCurrentUser&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="nx">App</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;isAdmin&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Most of this looks familiar: persistence, encoding, validations, accessors. There is one new thing:</p>

<h3>Model Association</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">@belongsTo</span> <span class="s">&#39;post&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This defines a <a href="http://batmanjs.org/docs/api/batman.model_associations.html">model association</a> between <code>Comment</code> and <code>Post</code>. In this case, we defined a <code>belongsTo</code> association, so:</p>

<ul>
<li>A <code>Comment</code> has a <code>post</code> attribute:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nx">myComment</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;post&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &lt;Post instance&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>A <code>Comment</code> will encode <code>post_id</code>, which is the <code>id</code> of its associated <code>Post</code>.</li>
</ul>


<p>We also need to add this concern to our <code>Post</code>-related code. Open <code>models/post.coffee</code>, and after your <code>@encode</code> call, add:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="nx">@hasMany</span> <span class="s">&#39;comments&#39;</span><span class="p">,</span> <span class="nv">inverseOf: </span><span class="s">&#39;post&#39;</span><span class="o">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have defined a <code>hasMany</code> relation from Post to Comment. So, a Post has a <code>comments</code> attribute, which returns a <code>Batman.Set</code> full of Comments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">myPost</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;comments&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &lt;Batman.Set [Comment, Comment...]&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since <code>Post</code> and <code>Comment</code> are associated, we have to make sure that a <code>Post</code>&rsquo;s <code>Comment</code>s are destroyed when the <code>Post</code> is destroyed. So, update <code>App.PostsController::destroyPost</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nv">destroyPost: </span><span class="nf">(post) -&gt;</span>
</span><span class='line'>    <span class="nx">post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;comments&#39;</span><span class="p">).</span><span class="nx">forEach</span> <span class="nf">(c) -&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">destroy</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">post</span><span class="p">.</span><span class="nx">destroy</span> <span class="nf">(err, record) =&gt;</span>
</span><span class='line'>      <span class="nx">@redirect</span><span class="p">(</span><span class="nv">action: </span><span class="s">&quot;index&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, whenever you destroy a <code>Post</code>, you&rsquo;ll also destroy its comments, so you don&rsquo;t end up with orphaned comments. We used <code>Batman.Set::forEach</code> &mdash; see <a href="http://rmosolgo.github.io/blog/2014/04/30/getting-to-know-batman-dot-set/">this blog post</a> for an introduction to <code>Batman.Set</code>!</p>

<h2>Comment Form</h2>

<p>Let&rsquo;s add comment form to <code>posts/show</code> so that users can log in. Append each of these blocks of HTML to the bottom of <code>html/posts/show.html</code>.</p>

<h3>Heading</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;row&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;col-sm-12&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h3&gt;</span> Comments <span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing to see here, move along &hellip;</p>

<h3>List of Comments</h3>

<p>This will render existing comments for a post:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;row&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&#39;list-unstyled&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- render comments: --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">data-foreach-comment=</span><span class="s">&#39;post.comments&#39;</span> <span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&#39;col-sm-4&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;strong</span> <span class="na">class=</span><span class="s">&#39;pull-right&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>          On <span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&#39;comment.createdAtFormatted&#39;</span><span class="nt">&gt;&lt;/span&gt;</span>, <span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&#39;comment.created_by_username&#39;</span><span class="nt">&gt;&lt;/span&gt;</span> said:
</span><span class='line'>        <span class="nt">&lt;/strong&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&#39;col-sm-6&#39;</span> <span class="na">data-bind=</span><span class="s">&#39;comment.content&#39;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;col-sm-2&#39;</span> <span class="na">data-showif=</span><span class="s">&#39;comment.canBeDeleted&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&#39;btn btn-danger btn-xs&#39;</span> <span class="na">data-event-click=</span><span class="s">&#39;destroyComment | withArguments comment&#39;</span><span class="nt">&gt;</span> Delete <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- &quot;design&quot; for empty state --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&#39;col-sm-12&#39;</span> <span class="na">data-showif=</span><span class="s">&#39;post.comments.isEmpty&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&#39;text-muted&#39;</span><span class="nt">&gt;</span>No comments yet!<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few things of note:</p>

<ul>
<li>There&rsquo;s a <code>data-foreach</code> binding with a <code>&lt;li/&gt;</code> prototype node. I included another <code>&lt;li/&gt;</code> with <code>data-showif='post.comments.isEmpty'</code>, just in case there aren&rsquo;t any comments yet.</li>
<li><code>data-showif='comment.canBeDeleted'</code> is using the accessor we defined in the model definition.</li>
<li>We&rsquo;re using <code>data-event-click='destroyComment | withArguments comment'</code> but we haven&rsquo;t defined <code>destroyComment</code> yet. We&rsquo;ll do that next!</li>
</ul>


<h3>Comment Form</h3>

<p>Notice that there are actually two parts of the HTML: one to show if <code>loggedOut</code>, the other to show if <code>loggedIn</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;row&#39;</span> <span class="na">data-showif=</span><span class="s">&#39;loggedOut&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;col-sm-12&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;well&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>You must be <span class="nt">&lt;a</span> <span class="na">data-event-click=</span><span class="s">&#39;login&#39;</span><span class="nt">&gt;</span>logged in<span class="nt">&lt;/a&gt;</span> to leave a comment!<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;row&#39;</span> <span class="na">data-showif=</span><span class="s">&#39;loggedIn&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;col-sm-12&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;form</span> <span class="na">data-formfor-comment=</span><span class="s">&#39;newComment&#39;</span> <span class="na">data-event-submit=</span><span class="s">&#39;saveComment | withArguments newComment&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;form-group&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label&gt;</span>New Comment:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;textarea</span>
</span><span class='line'>          <span class="na">class=</span><span class="s">&#39;form-control&#39;</span>
</span><span class='line'>          <span class="na">data-bind=</span><span class="s">&#39;newComment.content&#39;</span>
</span><span class='line'>          <span class="na">data-bind-placeholder=</span><span class="s">&#39;&quot;Leave a comment as &quot; | append currentUser.username | append &quot;...&quot;&#39;</span>
</span><span class='line'>          <span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/textarea&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;submit&#39;</span> <span class="na">class=</span><span class="s">&#39;btn btn-primary&#39;</span> <span class="na">value=</span><span class="s">&#39;Leave a comment&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Conditionals in HTML</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">data-showif=</span><span class="s">&#39;loggedOut&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- show this to logged-out users --&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">data-showif=</span><span class="s">&#39;loggedIn&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- show this to logged-in users --&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using multiple <code>data-showif</code>/<code>data-hideif</code> bindings is a common way of expressing conditional logic in batman.js templates.</p>

<h4>Binding to Attributes</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;textarea</span> <span class="na">data-bind-placeholder=</span><span class="s">&#39;&quot;Leave a comment as &quot; | append currentUser.username | append &quot;...&quot;&#39;</span> <span class="nt">&gt;&lt;/textarea&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we have bound data to the <code>&lt;textarea /&gt;</code>&rsquo;s <code>placeholder</code> attribute. You can use <code>data-bind-#{attr}</code> to bind to any HTML attribute.</p>

<h2>Use a Custom View</h2>

<p><a href="http://batmanjs.org/docs/views.html">Views</a> inject new accessors and functions into the render context. They also have <a href="http://batmanjs.org/docs/api/batman.view_lifecycle.html">lifecycle hooks</a> that can be used for initialization, etc.</p>

<p>To handle some actions with the comment form, we&rsquo;ll <a href="https://www.softcover.io/read/b5c051f3/batmanjs_mvc_cookbook/controller#sec-default_views">implement the default view</a> for the <code>posts#show</code> action. Open <code>views/posts/posts_show_view.coffee</code> and add:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">PostsShowView</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">View</span>
</span><span class='line'>  <span class="nv">viewWillAppear: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@_resetComment</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">saveComment: </span><span class="nf">(comment) -&gt;</span>
</span><span class='line'>    <span class="c1"># set up the association:</span>
</span><span class='line'>    <span class="nx">comment</span><span class="p">.</span><span class="nx">set</span> <span class="s">&#39;post&#39;</span><span class="p">,</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;controller.post&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">comment</span><span class="p">.</span><span class="nx">save</span> <span class="nf">(err, record) =&gt;</span>
</span><span class='line'>      <span class="k">throw</span> <span class="nx">err</span> <span class="k">if</span> <span class="nx">err</span><span class="o">?</span>
</span><span class='line'>      <span class="nx">@_resetComment</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">_resetComment: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@set</span><span class="p">(</span><span class="s">&#39;newComment&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Comment</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">destroyComment: </span><span class="nf">(comment) -&gt;</span>
</span><span class='line'>    <span class="nx">comment</span><span class="p">.</span><span class="nx">destroy</span> <span class="nf">(err, r) -&gt;</span>
</span><span class='line'>      <span class="k">throw</span> <span class="nx">err</span> <span class="k">if</span> <span class="nx">err</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because our view is named <code>App.PostsShowView</code>, it will automatically be used by the <code>posts#new</code> controller action. It&rsquo;s called the &ldquo;default view&rdquo; of <code>posts#show</code>.</p>

<p>Notably:</p>

<ul>
<li><code>data-event</code> handlers may be on controllers <em>or</em> views; both of them are in the &ldquo;render context&rdquo;.</li>
<li>we used a lifecycle hook, <code>viewWillAppear</code>, to initialize our empty form.</li>
<li>we set the comment&rsquo;s <code>post</code> during <code>saveComment</code> because it might not have loaded yet when the view is rendered. You can also avoid this problem by <a href="https://www.softcover.io/read/b5c051f3/batmanjs_mvc_cookbook/controller#sec-defer_render">waiting until data is loaded to render the view</a>.</li>
</ul>


<h1>Firebase Security Rules</h1>

<p>You <strong>always</strong> need server-side validation to accompany client-side validations. Otherwise, a mean-spirited user could wreck your data from the JS console.</p>

<p>It&rsquo;s beyond the scope of this post to explain <a href="https://www.firebase.com/docs/security/security-rules.html">Firebase security rules</a>, but here are some to go with this app (be sure to insert your Github ID instead of mine!) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/* These rules are provided for imformational purposes only :) */</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;rules&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* All items are namespaced by `BatFire` */</span>
</span><span class='line'>    <span class="s2">&quot;BatFire&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/* Make `@syncs` accessors read-only */</span>
</span><span class='line'>      <span class="s2">&quot;syncs&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;.read&quot;</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;.write&quot;</span> <span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="cm">/* All records namespaced by `records` */</span>
</span><span class='line'>      <span class="s2">&quot;records&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;scoped&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">/* &quot;Server-side&quot; validation for @belongsToCurrentUser(scoped: true) */</span>
</span><span class='line'>          <span class="s2">&quot;$uid&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;.write&quot;</span> <span class="o">:</span> <span class="s2">&quot;$uid == auth.uid&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;.read&quot;</span> <span class="o">:</span> <span class="s2">&quot;$uid == auth.uid&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;posts&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;.read&quot;</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;.write&quot;</span> <span class="o">:</span> <span class="s2">&quot;&#39;github:2231765&#39; == auth.uid &quot;</span> <span class="cm">/* that&#39;s me */</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;comments&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;.read&quot;</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;$recordId&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* can be deleted by creator or by admin ... me */</span>
</span><span class='line'>            <span class="s2">&quot;.write&quot;</span> <span class="o">:</span>  <span class="s2">&quot;!data.exists() || auth.uid == data.child(&#39;created_by_uid&#39;).val() || &#39;github:2231765&#39; == auth.uid&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;$resourceName&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">/* &quot;Server-side&quot; validation for @belongsToCurrentUser(ownership: true) */</span>
</span><span class='line'>          <span class="s2">&quot;$recordId&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* Allows non-belongsToCurrentUser records to be written but protect owned ones */</span>
</span><span class='line'>            <span class="s2">&quot;.write&quot;</span> <span class="o">:</span> <span class="s2">&quot;!data.hasChild(&#39;has_user_ownership&#39;) || data.child(&#39;created_by_uid&#39;).val() == auth.uid&quot;</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="s2">&quot;.read&quot;</span> <span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>          <span class="cm">/* nothing gets written here -- everything gets an ID _before_ create */</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="cm">/* Everything else is fair game */</span>
</span><span class='line'>    <span class="s2">&quot;$other&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;.read&quot;</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;.write&quot;</span> <span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Wrap Up</h1>

<p>Congratulations, you have a beautiful new blog! You can let the whole world see it by deploying it to Firebase:</p>

<ul>
<li>update <code>firebase.json</code> to have your Firebase name (eg, <code>"rm-batmanjs-blog"</code>)</li>
<li><code>npm install -g firebase-tools</code></li>
<li><code>firebase deploy</code></li>
<li><code>firebase open</code></li>
</ul>


<p>And you&rsquo;re live!</p>

<p>I hope you have enjoyed this tour of batman.js! For more information:</p>

<ul>
<li>check out the <a href="http://batmanjs.org">batman.js website</a> or the <a href="https://www.softcover.io/read/b5c051f3/batmanjs_mvc_cookbook">Batman.js MVC Cookbook</a></li>
<li>join the <a href="https://groups.google.com/forum/#!forum/batmanjs">mailing list</a></li>
<li>drop by the IRC channel (#batmanjs)</li>
<li>leave a comment here or open an issue on the <a href="http://github.com/batmanjs/batman">github repo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Client-Side Image Preview with Batman.js]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/06/05/client-side-image-preview-with-batman-dot-js/"/>
    <updated>2014-06-05T07:26:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/06/05/client-side-image-preview-with-batman-dot-js</id>
    <content type="html"><![CDATA[<p>Implementing image preview is breeze thanks to <a href="http://batmanjs.org">batman.js</a> observers and JavaScript APIs.</p>

<!-- more -->


<p><strong>The goal</strong> is to have a user add an image to a file input and <em>immediately</em> preview that image. To accomplish this, we&rsquo;ll turn the uploaded file into a data URI, then set that to the <code>src</code> of our <code>&lt;img/&gt;</code>.</p>

<p>First, set up the observer in the model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">ModelWithImage</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>  <span class="nx">@encode</span> <span class="s">&#39;imageDataURI&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">constructor: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="nx">@observe</span> <span class="s">&#39;imageFile&#39;</span><span class="p">,</span> <span class="nf">(newVal, oldVal) -&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">newVal</span><span class="o">?</span>
</span><span class='line'>        <span class="nx">@_setImageDataURIFromFile</span><span class="p">()</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nx">@set</span> <span class="s">&#39;imageDataURI&#39;</span><span class="p">,</span> <span class="s">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This says: &ldquo;whenever <code>imageFile</code> changes, if there is a new value, use it to set the data URI, otherwise, set the data URI to <code>""</code>.&rdquo;</p>

<p>Now, implement <code>_setImageDataURIFromFile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nv">_setImageDataURIFromFile: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nv">file = </span><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;imageFile&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">reader = </span><span class="k">new</span> <span class="nx">FileReader</span>
</span><span class='line'>    <span class="nv">reader.onload = </span><span class="nf">(e) =&gt;</span>
</span><span class='line'>      <span class="nv">dataURI = </span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">result</span>
</span><span class='line'>      <span class="nx">@set</span> <span class="s">&#39;imageDataURI&#39;</span><span class="p">,</span> <span class="nx">dataURI</span>
</span><span class='line'>    <span class="nx">reader</span><span class="p">.</span><span class="nx">readAsDataURL</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use it in a template like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;img</span> <span class="na">data-bind-src=</span><span class="s">&#39;component.imageDataURI&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;file&#39;</span> <span class="na">data-bind=</span><span class="s">&#39;component.imageFile&#39;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When a user uploads a file, the <code>&lt;img&gt;</code> will be automatically updated!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Has Many Through in Batman.js]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/05/30/has-many-through-in-batman-dot-js/"/>
    <updated>2014-05-30T15:27:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/05/30/has-many-through-in-batman-dot-js</id>
    <content type="html"><![CDATA[<p><a href="http://batmanjs.org">Batman.js</a> doesn&rsquo;t support <code>hasManyThrough</code> out of the box, but it can be implemented fairly easily with <code>Set::mappedTo</code>.</p>

<!-- more -->


<p><em>This feature was just merged into the master branch &mdash; download the latest batman.js <a href="http://batmanjs.org/download.html">here</a>.</em></p>

<h1>What&rsquo;s a &ldquo;Has-Many-Through&rdquo; Association?</h1>

<p>It&rsquo;s best shown by example. To join <code>Household</code> to <code>Person</code>, you might have a &ldquo;join model&rdquo;, <code>HouseholdMembership</code>. The associations look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Household</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>  <span class="nx">@hasMany</span> <span class="s">&#39;householdMemberships&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nx">HouseholdMembership</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>  <span class="nx">@belongsTo</span> <span class="s">&#39;household&#39;</span>
</span><span class='line'>  <span class="nx">@belongsTo</span> <span class="s">&#39;person&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nx">Person</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>  <span class="nx">@hasMany</span> <span class="s">&#39;householdMemberships&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Household <code>hasMany</code> memberships, each membership <code>belongsTo</code> a person.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>           <span class="nx">__</span> <span class="nx">HouseholdMembership</span> <span class="err">───</span> <span class="nx">Person</span>
</span><span class='line'>         <span class="err">╱</span>
</span><span class='line'><span class="nx">Household</span> <span class="err">───</span> <span class="nx">HouseholdMembership</span> <span class="err">───</span> <span class="nx">Person</span>
</span><span class='line'>         <span class="err">╲</span>
</span><span class='line'>           <span class="err">╲</span><span class="nx">_</span> <span class="nx">HouseholdMembership</span> <span class="err">───</span> <span class="nx">Person</span>
</span></code></pre></td></tr></table></div></figure>


<p>Household has many people <em>through</em> household memberships.</p>

<h1>Has-Many-Through in Batman.js</h1>

<p>Although <code>hasManyThrough</code> isn&rsquo;t part of batman.js, you can implement a <strong>read-only</strong> has-many-through using <a href="http://batmanjs.org/docs/api/batman.set.html#prototype_function_mappedto"><code>Set::mappedTo</code></a>. Given classes as defined above, you could add an accessor for <code>Household::people</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># class Household</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;people&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;householdMemberships&#39;</span><span class="p">).</span><span class="nx">mappedTo</span><span class="p">(</span><span class="s">&#39;person&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This returns a <code>Batman.Set</code> (actually a <code>Batman.SetMapping</code>) containing unique <code>Person</code>s belonging to those <code>householdMemberships</code>. As batman.js does, items added and removed are <a href="rmosolgo.github.io/blog/2014/04/20/automatic-source-tracking-in-batman-dot-js/">automatically tracked</a>, so this is safe to use everywhere.</p>

<p>As for <strong>adding items</strong>, you could do it this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># class Household</span>
</span><span class='line'>  <span class="nv">addPerson: </span><span class="nf">(person) -&gt;</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;householdMemberships&#39;</span><span class="p">).</span><span class="nx">build</span><span class="p">({</span><span class="nx">person</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, the <code>Batman.SetMapping</code> will take care of keeping everything in sync!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasmine-Friendly Batman.js Accessor Stubs]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/05/16/jasmine-friendly-batman-dot-js-accessor-stubs/"/>
    <updated>2014-05-16T12:53:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/05/16/jasmine-friendly-batman-dot-js-accessor-stubs</id>
    <content type="html"><![CDATA[<p><a href="http://batmanjs.org/docs/api/batman.object_accessors.html"><code>Batman.Object</code> accessors</a> are the bread and butter of <a href="http://batmanjs.org">batman.js</a>. Stubbing them can make testing much easier.</p>

<!-- more -->


<p>I haven&rsquo;t figured out <a href="http://batmanjs.org/docs/testing.html"><code>Batman.TestCase</code></a> yet, so I&rsquo;m still using <a href="http://jasmine.github.io/">jasmine</a>. <code>Batman.TestCase</code> <a href="https://github.com/batmanjs/batman/blob/master/src/extras/testing/test_case.coffee#L90">includes <code>stubAccessor</code> out of the box</a>, and I ported it to jasmine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nv">stubAccessor = </span><span class="nf">(object, keypath) -&gt;</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">object</span><span class="p">.</span><span class="nx">prototype</span><span class="o">?</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span> <span class="s">&quot;You&#39;re stubbing an accessor on </span><span class="si">#{</span><span class="nx">object</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="s">,</span>
</span><span class='line'><span class="s">        which won&#39;t be un-stubbed when the example group finishes!</span>
</span><span class='line'><span class="s">        Stub accessors on instances, not classes, if possible!&quot;</span>
</span><span class='line'>  <span class="nv">stub = </span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="nx">keypath</span><span class="p">),</span> <span class="s">&#39;getValue&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">object</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="nx">keypath</span><span class="p">).</span><span class="nx">refresh</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">stub</span><span class="p">.</span><span class="nx">calls</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span> <span class="c1"># ^^ remove call from refresh</span>
</span><span class='line'>  <span class="nx">stub</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way, the <code>stub</code> works just like normal jasmine spies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">record = </span><span class="k">new</span> <span class="nx">App</span><span class="p">.</span><span class="nx">MyModel</span>
</span><span class='line'><span class="nv">stub = </span><span class="nx">stubAccessor</span><span class="p">(</span><span class="nx">record</span><span class="p">,</span> <span class="s">&#39;myProperty&#39;</span><span class="p">).</span><span class="nx">andReturn</span><span class="p">(</span><span class="s">&#39;stubbed!&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">record</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;myProperty&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;stubbed!&quot;</span>
</span><span class='line'><span class="nx">record</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;myProperty&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">stub</span><span class="p">.</span><span class="nx">calls</span><span class="p">.</span><span class="nx">length</span> <span class="c1"># =&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">record = </span><span class="k">new</span> <span class="nx">App</span><span class="p">.</span><span class="nx">MyModel</span>
</span><span class='line'><span class="nv">stub = </span><span class="nx">stubAccessor</span><span class="p">(</span><span class="nx">record</span><span class="p">,</span> <span class="s">&#39;myProperty&#39;</span><span class="p">).</span><span class="nx">andCallThrough</span><span class="p">()</span>
</span><span class='line'><span class="nx">record</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s">&#39;myProperty&#39;</span><span class="p">,</span> <span class="s">&quot;value!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">record</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;myProperty&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;value!&quot;</span>
</span><span class='line'><span class="nx">stub</span><span class="p">.</span><span class="nx">calls</span><span class="p">.</span><span class="nx">length</span> <span class="c1"># =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, this <code>stubAccessor</code> <em>doesn&rsquo;t</em> stub <code>set</code>! Maybe that&rsquo;s a to-do, I haven&rsquo;t needed it yet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrate Batman.js and Leaflet with a Custom View]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/04/30/integrate-batman-dot-js-and-leaflet-with-a-custom-view/"/>
    <updated>2014-04-30T23:33:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/04/30/integrate-batman-dot-js-and-leaflet-with-a-custom-view</id>
    <content type="html"><![CDATA[<p><a href="http://batmanjs.org">batman.js</a> views are one of the best ways to integrate other JS libraries with batman.js data structures like <code>Batman.Object</code> and <code>Batman.Set</code>. For example, you can use a custom view to display <code>Batman.Model</code>s with <a href="http://leafletjs.com">leaflet.js</a></p>

<!-- more -->


<p>I&rsquo;ve always wanted to try batman.js + leaflet. I had to:</p>

<ul>
<li>Use <code>@option</code> to define view APIs</li>
<li>Initialize the custom view, controlling for async loading of data &amp; map</li>
<li>Observe <code>Batman.Object</code>s to keep leaflet up-to-date.</li>
<li>Listen to leaflet to keep batman.js up to date</li>
</ul>


<p>I ended up making an abstract <code>LeafletView</code>, implemented by <code>LeafletPointView</code> and <code>LeafletCollectionPointView</code>.</p>

<p>Be sure to check out the <a href="http://bl.ocks.org/rmosolgo/11443841">live example</a> and source code (<a href="https://github.com/rmosolgo/batmanjs-leaflet-example/blob/master/coffee/leaflet_view.coffee">custom views</a>, <a href="https://github.com/rmosolgo/batmanjs-leaflet-example/blob/master/html/monuments/index.jade#L19">index html</a>, <a href="https://github.com/rmosolgo/batmanjs-leaflet-example/blob/master/html/monuments/edit.jade#L19">edit html</a>)!</p>

<h2><code>@option</code> in Custom Views</h2>

<p><code>@option</code> allows you to pass values explicitly into your custom view. That way, you can eliminate the guesswork of climbing the view tree or looking up to the controller for some value.</p>

<p>It provides a view binding <em>and</em> an accessor for your custom view. In my case, I used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">LeafletView</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">View</span>
</span><span class='line'>  <span class="nx">@option</span> <span class="s">&#39;draggable&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To provide in my HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">data-view=</span><span class="s">&#39;App.LeafletView&#39;</span> <span class="na">data-view-draggable=</span><span class="s">&#39;true&#39;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in my view code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;draggable&#39;</span><span class="p">)</span> <span class="c1"># =&gt; returns the value passed to the binding</span>
</span></code></pre></td></tr></table></div></figure>


<p>This also works for objects, as in <code>@option 'item'</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">data-view=</span><span class="s">&#39;App.LeafletPointView&#39;</span> <span class="na">data-view-item=</span><span class="s">&#39;monument&#39;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I have easy access to my record:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;item&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Initializing Custom Views</h2>

<p>Initializing custom batman.js views is tough because:</p>

<ul>
<li>Views are constructed before they&rsquo;re added to the DOM</li>
<li>Bindings are initialized without values (and their objects may not be loaded from the server yet)</li>
<li>Lifecycle events may fire more than once</li>
</ul>


<p>So, you have to be prepared for undefined values and for <code>viewDidAppear</code> to be fired more than once.</p>

<ul>
<li><a href="https://github.com/rmosolgo/batmanjs-leaflet-example/blob/master/coffee/leaflet_view.coffee#L38"><strong>Use <code>observeOnce</code></strong></a> to fire on change from <code>undefined</code> to some value. My case was different because I had to wait for the binding <em>and</em> for the map to load, hence the <code>leafletReady</code> event.</li>
<li><a href="https://github.com/rmosolgo/batmanjs-leaflet-example/blob/master/coffee/leaflet_view.coffee#L52"><strong>Check for initialization</strong> in <code>viewDidAppear</code> handlers</a></li>
</ul>


<h2>Keeping Other Libraries up to Date</h2>

<p>Integrating batman.js with other JavaScript libraries usually means setting up event handlers so that events pass from an outside proxy of a <code>Batman.Object</code> to the object itself.</p>

<p>For example, to update a leaflet marker when a <code>Batman.Object</code> is changed, you have to observe the <code>Batman.Object</code> so that <a href="https://github.com/rmosolgo/batmanjs-leaflet-example/blob/master/coffee/leaflet_view.coffee#L149">whenever <code>latitude</code> or <code>longitude</code> changes, you update the marker</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># From App.LeafletPointView, @get(&#39;item&#39;) returns the object</span>
</span><span class='line'><span class="nx">@observe</span> <span class="s">&#39;item.latitude&#39;</span><span class="p">,</span> <span class="nf">(nv, ov) -&gt;</span>
</span><span class='line'>  <span class="nx">@updateMarker</span><span class="p">(</span><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;item&#39;</span><span class="p">),</span> <span class="nv">centerOnItem: </span><span class="kc">true</span><span class="p">)</span> <span class="k">if</span> <span class="nx">nv</span><span class="o">?</span>
</span><span class='line'><span class="nx">@observe</span> <span class="s">&#39;item.longitude&#39;</span><span class="p">,</span> <span class="nf">(nv, ov) -&gt;</span>
</span><span class='line'>  <span class="nx">@updateMarker</span><span class="p">(</span><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;item&#39;</span><span class="p">),</span> <span class="nv">centerOnItem: </span><span class="kc">true</span><span class="p">)</span> <span class="k">if</span> <span class="nx">nv</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure>


<p>You have to link the other way too. To update a record when its marker is updated (by dragging), <a href="https://github.com/rmosolgo/batmanjs-leaflet-example/blob/master/coffee/leaflet_view.coffee#L85">create a handler</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># from App.LeafletView</span>
</span><span class='line'><span class="nx">marker</span><span class="p">.</span><span class="nx">on</span> <span class="s">&#39;dragend&#39;</span><span class="p">,</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="c1"># get values from leaflet and update batman.js</span>
</span><span class='line'>  <span class="nv">latLng = </span><span class="nx">marker</span><span class="p">.</span><span class="nx">getLatLng</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">item</span><span class="p">.</span><span class="nx">set</span> <span class="s">&#39;latitude&#39;</span><span class="p">,</span> <span class="nx">latLng</span><span class="p">.</span><span class="nx">lat</span>
</span><span class='line'>  <span class="nx">item</span><span class="p">.</span><span class="nx">set</span> <span class="s">&#39;longitude&#39;</span><span class="p">,</span> <span class="nx">latLng</span><span class="p">.</span><span class="nx">lng</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>App.LeafletCollectionPointView</code> uses <a href="http://batmanjs.org/docs/api/batman.setobserver.html"><code>Batman.SetObserver</code></a> to <a href="https://github.com/rmosolgo/batmanjs-leaflet-example/blob/master/coffee/leaflet_view.coffee#L174">track adding, removing and modifying items</a> (just like <code>Batman.SetSort</code>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting to Know Batman.Set]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/04/30/getting-to-know-batman-dot-set/"/>
    <updated>2014-04-30T07:54:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/04/30/getting-to-know-batman-dot-set</id>
    <content type="html"><![CDATA[<p><a href="http://batmanjs.org/docs/api/batman.set.html"><code>Batman.Set</code></a> is the array-like enumerable of <a href="http://batmanjs.org">batman.js</a>. It offers observable properties (which are automatically tracked by <code>@accessor</code>) and useful change events.</p>

<!-- more -->


<p>In batman.js, you need observable data structures everywhere. <code>Batman.Set</code> is the observable, array-like enumerable that the framework uses internally, and you can use it too! Besides <code>Batman.Set</code>, batman.js provides some other classes to help you get things done:</p>

<ul>
<li><code>Batman.SetIndex</code> (created with <code>indexedBy</code>) groups a Set&rsquo;s items by a property value</li>
<li><code>Batman.UniqueSetIndex</code> (created with <code>indexedByUnique</code>) looks up items by unique value</li>
<li><code>Batman.SetSort</code> (created with <code>sortedBy</code>) returns a sorted proxy of the Set</li>
<li>Binary set operations create unions, intersections and complements of sets.</li>
</ul>


<h2>Batman.Set</h2>

<p><code>Batman.Set</code> implements the <a href="http://en.wikipedia.org/wiki/Mathematical_set">set</a> pattern. It is a <em>collection of distinct objects</em>, meaning that there can be no duplicates (unlike an array). Features of <code>Batman.Set</code> include:</p>

<ul>
<li>Enumeration (<code>Batman.Set</code> mixes in <a href="http://batmanjs.org/docs/api/batman.enumerable.html"><code>Batman.Enumerable</code></a>)</li>
<li>Guaranteed unique contents (a <code>Batman.Set</code> won&rsquo;t allow duplicates, even if you call <code>add</code> twice.)</li>
<li>Observable</li>
<li>Sorting and searching, with internal caching</li>
<li>Extensible with CoffeeScript <code>extend</code> for making custom sets</li>
</ul>


<p>You can <strong>create</strong> a <code>Batman.Set</code> by passing <em>n</em> items to the constructor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">set = </span><span class="k">new</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="nx">set</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;length&#39;</span><span class="p">)</span> <span class="c1"># =&gt; 4</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can <strong>add</strong> and <strong>remove</strong> with the <code>add</code> and <code>remove</code> functions, which also take any number of items:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">addedItems = </span><span class="nx">set</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="nv">removedItems = </span><span class="nx">set</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nx">set</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;length&#39;</span><span class="p">)</span> <span class="c1"># =&gt; 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you try to add the same (<code>===</code>) item twice, it won&rsquo;t be added:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">addedItems = </span><span class="nx">set</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="nx">set</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;length&#39;</span><span class="p">)</span> <span class="c1"># =&gt; 5</span>
</span><span class='line'><span class="nx">addedItems</span>        <span class="c1"># =&gt; []</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you try to remove an item that isn&rsquo;t in the set, nothing will happen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">removedItems = </span><span class="nx">set</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="nx">set</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;length&#39;</span><span class="p">)</span> <span class="c1"># =&gt; 5</span>
</span><span class='line'><span class="nx">removedItems</span>      <span class="c1"># =&gt; []</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Observing Batman.Set</h3>

<p>Calling these functions inside an accessor function will cause the accessor to track the <code>Batman.Set</code>:</p>

<ul>
<li><code>at</code></li>
<li><code>find</code></li>
<li><code>merge</code></li>
<li><code>forEach</code> (and any other <a href="http://batmanjs.org/docs/api/batman.enumerable.html"><code>Batman.Enumable</code> function</a>, since they call <code>forEach</code> under the hood)</li>
<li><code>toArray</code></li>
<li><code>isEmpty</code></li>
<li><code>has</code></li>
</ul>


<p>So will <code>get</code>ting these accessors:</p>

<ul>
<li><code>first</code></li>
<li><code>last</code></li>
<li><code>isEmpty</code></li>
<li><code>toArray</code></li>
<li><code>length</code></li>
</ul>


<p>For example, all these accessors will be recalculated when <code>students</code> changes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Classroom</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nb">Object</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;students&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span> <span class="k">new</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Set</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;size&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;students.length&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;hasStudents&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;students.isEmpty&#39;</span><span class="p">)</span> <span class="c1"># or @get(&#39;students&#39;).isEmpty()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;numberOfPassingStudents&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="c1"># ::count calls forEach in Batman.Enumerable:</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;students&#39;</span><span class="p">).</span><span class="nx">count</span> <span class="nf">(s) -&gt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;grade&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mf">1.0</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>size</code>, <code>hasStudents</code>, and <code>numberOfPassingStudents</code> all register <code>students</code> as a source. (See <a href="http://rmosolgo.github.io/docs/api/batman.object_accessors.html#accessors_as_computed_properties">the docs</a> or <a href="http://rmosolgo.github.io/blog/2014/04/20/automatic-source-tracking-in-batman-dot-js/">this blog post</a> for more information about batman.js automatic source tracking.)</p>

<p>Besides automatic source tracking in accessors, you can observe these properties with <code>observe</code>.</p>

<h2><code>itemsWereAdded</code>/<code>itemsWereRemoved</code></h2>

<p>A set notifies its subscribers by firing:</p>

<ul>
<li><code>itemsWereAdded</code> when items are added to the set</li>
<li><code>itemsWereRemoved</code> when items are removed from the set</li>
</ul>


<p>Each event is fired with the <em>items</em> that were added and removed.</p>

<p>You can handle these events with <code>on</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">set</span><span class="p">.</span><span class="nx">on</span> <span class="s">&#39;itemsWereAdded&#39;</span><span class="p">,</span> <span class="nf">(addedItems) -&gt;</span>
</span><span class='line'>  <span class="nx">alert</span> <span class="s">&quot;There were </span><span class="si">#{</span><span class="nx">addedItems</span><span class="p">.</span><span class="nx">length</span><span class="si">}</span><span class="s"> new items!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">set</span><span class="p">.</span><span class="nx">on</span> <span class="s">&#39;itemsWereRemoved&#39;</span><span class="p">,</span> <span class="nf">(removedItems) -&gt;</span>
</span><span class='line'>  <span class="nx">alert</span> <span class="s">&quot;Say goodbye to </span><span class="si">#{</span><span class="nx">removedItems</span><span class="p">.</span><span class="nx">length</span><span class="si">}</span><span class="s"> items!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The event </em>may be<em> fired with the internally-determined indexes of the items. This is used internally by batman.js but isn&rsquo;t implemented in all cases.</em></p>

<p>These functions cause items to be added or removed:</p>

<ul>
<li><code>add</code></li>
<li><code>remove</code></li>
<li><code>replace</code></li>
<li><code>clear</code></li>
<li><code>insert</code></li>
</ul>


<p>Under the hood, batman.js depends on these events to keep <code>data-foreach</code> bindings up to date.</p>

<h2>Set Indexes</h2>

<p>Set indexes are batman.js&rsquo;s way of searching sets. Batman.js caches these indexes and updates them whenever items are added or removed from the base <code>Batman.Set</code>. This way, you can be sure than any indexes you use will be automatically updated when the set is changed.</p>

<p>Consider the <code>vegetables</code> set:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">vegetables = </span><span class="k">new</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Set</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">name: </span><span class="s">&quot;Tomato&quot;</span><span class="p">,</span>    <span class="nv">color: </span><span class="s">&quot;red&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">name: </span><span class="s">&quot;Cucumber&quot;</span><span class="p">,</span>  <span class="nv">color: </span><span class="s">&quot;green&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">name: </span><span class="s">&quot;Radish&quot;</span><span class="p">,</span>    <span class="nv">color: </span><span class="s">&quot;red&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">name: </span><span class="s">&quot;Eggplant&quot;</span><span class="p">,</span>  <span class="nv">color: </span><span class="s">&quot;aubergine&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Batman.SetIndex</h3>

<p>A <code>Batman.SetIndex</code> groups the base <code>Batman.Set</code> by a property of its members. For example, we can group <code>vegetables</code> by <code>color</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">vegetablesByColor = </span><span class="nx">vegetables</span><span class="p">.</span><span class="nx">indexedBy</span><span class="p">(</span><span class="s">&#39;color&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, to get vegetables of a certain color, you <code>get</code> the color from the set index:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">redVegetables = </span><span class="nx">vegetablesByColor</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;red&#39;</span><span class="p">)</span> <span class="c1"># returns a Batman.Set</span>
</span><span class='line'><span class="nx">redVegtables</span><span class="p">.</span><span class="nx">toArray</span><span class="p">()</span>
</span><span class='line'><span class="c1"># =&gt; [{name: &quot;Tomato&quot;, color: &quot;red&quot;}, {name: &quot;Radish&quot;, color: &quot;red&quot;}]</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>(<code>Batman.SetIndex::get</code> is an example of the &ldquo;default accessor as <code>method_missing</code>&rdquo; pattern.)</em></p>

<p>The resulting set is just like any other <code>Batman.Set</code>, so you can observe it, pass it to view bindings, etc.</p>

<p>If you <code>get</code> a value that doesn&rsquo;t exist, you get an empty <code>Batman.Set</code>. However, if a matching item is added to the <em>base</em> set, the index will be updated and the derived set will have the matching item added to it. For example, the <code>yellow</code> vegetables set is empty at first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">yellowVegetables = </span><span class="nx">vegetablesByColor</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;yellow&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">yellowVegetables</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;length&#39;</span><span class="p">)</span> <span class="c1"># =&gt; 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if you add a vegetable with <code>color: "yellow"</code>,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">vegetables</span><span class="p">.</span><span class="nx">add</span><span class="p">({</span><span class="nv">name: </span><span class="s">&quot;Butternut Squash&quot;</span><span class="p">,</span> <span class="nv">color: </span><span class="s">&quot;yellow&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>it will be immediately added to the derived set:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">yellowVegetables</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;first&#39;</span><span class="p">)</span> <span class="c1"># =&gt; {name: &quot;Butternut Squash&quot;, color: &quot;yellow&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Batman.UniqueSetIndex</h3>

<p>A <code>Batman.UniqueSetIndex</code> doesn&rsquo;t return a <em>set</em> of matching items, it returns the <em>first</em> matching item. This is useful when you know that the values of a property will be unique (For example, batman.js uses <code>MyModel.get('loaded.indexedBy.id')</code> to update records from JSON by ID).</p>

<p>For example, our <code>vegetables</code> all have unique names:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">tomato = </span><span class="nx">vegetables</span><span class="p">.</span><span class="nx">indexedByUnique</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="s">&quot;Tomato&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>indexedByUnique</code> in an accessor makes the <code>Batman.UniqueSetIndex</code> a source for that accessor. So when the unique set index&rsquo;s value changes, the accessor will be recalculated.</p>

<p>This can be demonstrated by extending our <code>vegetables</code> example a little bit. Imagine a garden which should know what vegetables are growing in it. Since it&rsquo;s essentially a group of vegetables, let&rsquo;s extend <code>Batman.Set</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Garden</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Set</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our app, we want to display red/green for which vegetables are in a garden. For example, <code>hasTomato</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Garden</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Set</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;hasTomato&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@indexedByUnique</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="s">&quot;Tomato&quot;</span><span class="p">)</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, a Garden will return <code>true</code> for <code>hasTomato</code> as soon as a tomato is added:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">myGarden = </span><span class="k">new</span> <span class="nx">Garden</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">name: </span><span class="s">&quot;Spinach&quot;</span><span class="p">,</span> <span class="nv">color: </span><span class="s">&quot;green&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">name: </span><span class="s">&quot;Corn&quot;</span><span class="p">,</span> <span class="nv">color: </span><span class="s">&quot;yellow&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myGarden</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;hasTomato&#39;</span><span class="p">)</span> <span class="c1"># =&gt; false</span>
</span><span class='line'><span class="nx">myGarden</span><span class="p">.</span><span class="nx">add</span><span class="p">({</span><span class="nv">name: </span><span class="s">&quot;Tomato&quot;</span><span class="p">,</span> <span class="nv">color: </span><span class="s">&quot;red&quot;</span><span class="p">})</span>
</span><span class='line'><span class="nx">myGarden</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;hasTomato&#39;</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>SetSort</h2>

<p>A <code>Batman.SetSort</code> behaves just like a <code>Batman.Set</code>, except that its members are ordered by a given property. If an item is added to the base set, it is also added to the set sort (in its proper place, of course).</p>

<p>Given these vegetables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">vegetables = </span><span class="k">new</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Set</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">name: </span><span class="s">&quot;Tomato&quot;</span><span class="p">,</span>    <span class="nv">color: </span><span class="s">&quot;red&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">name: </span><span class="s">&quot;Cucumber&quot;</span><span class="p">,</span>  <span class="nv">color: </span><span class="s">&quot;green&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">name: </span><span class="s">&quot;Radish&quot;</span><span class="p">,</span>    <span class="nv">color: </span><span class="s">&quot;red&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">name: </span><span class="s">&quot;Eggplant&quot;</span><span class="p">,</span>  <span class="nv">color: </span><span class="s">&quot;aubergine&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can easily sort them by name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">vegetables</span><span class="p">.</span><span class="nx">sortedBy</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">)</span> <span class="c1"># =&gt; Batman.SetSort</span>
</span><span class='line'><span class="nx">vegetables</span><span class="p">.</span><span class="nx">sortedBy</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">).</span><span class="nx">mapToProperty</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;Cucumber&quot;, &quot;Eggplant&quot;, &quot;Tomato&quot;, &quot;Radish&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>They can also be sorted in reverse order:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">vegetables</span><span class="p">.</span><span class="nx">sortedBy</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="s">&quot;desc&quot;</span><span class="p">).</span><span class="nx">mapToProperty</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;Radish&quot;, &quot;Tomato&quot;, &quot;Eggplant&quot;, &quot;Cucumber&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or, to sort descending by an accessor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">vegetables</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;sortedByDescending.name&#39;</span><span class="p">).</span><span class="nx">mapToProperty</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;Radish&quot;, &quot;Tomato&quot;, &quot;Eggplant&quot;, &quot;Cucumber&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Set Caching</h2>

<p>You don&rsquo;t have to worry about calling <code>indexedBy</code> or <code>sortedBy</code> repeatedly. Under the hood, batman.js caches them on their base sets, so it doesn&rsquo;t recalculate the indexes and sorts every time.</p>

<h2>Union, Intersection, Complement</h2>

<p><code>Batman.BinarySetOperation</code>s are objects that track <em>two</em> sets and contain the resulting elements from their operations. There are three implemented subclasses of <code>Batman.BinarySetOperation</code>:</p>

<ul>
<li><a href="http://batmanjs.org/docs/api/batman.setunion.html"><code>Batman.SetUnion</code></a> contains all members from both sets, without duplicates.</li>
<li><a href="http://batmanjs.org/docs/api/batman.setintersection.html"><code>Batman.SetIntersection</code></a> contains members which are present in the first set <em>and</em> present in the second set.</li>
<li><a href="http://batmanjs.org/docs/api/batman.setcomplement.html"><code>Batman.SetComplement</code></a> contains members which are in the first set <em>but not</em> present in the second set.</li>
</ul>


<p>Take note: constructors for binary set operations will fail if either argument is <code>null</code>, so be sure to check for that when you&rsquo;re building them!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending JSON Instead of Form Data with Batman.RestStorage]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/04/25/sending-json-instead-of-form-data-with-batman-dot-reststorage/"/>
    <updated>2014-04-25T13:02:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/04/25/sending-json-instead-of-form-data-with-batman-dot-reststorage</id>
    <content type="html"><![CDATA[<p>By default, <code>Batman.Request</code> sends data as HTTP form data. However, you can override this with <code>Batman.RestStorage</code>.</p>

<!-- more -->


<p>Simply pass <code>serializeAsForm: false</code> to <code>@persist</code> in your model definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">Model</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>  <span class="nx">@persist</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">RestStorage</span><span class="p">,</span> <span class="nv">serializeAsForm: </span><span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, it will work with any JSON endpoint!</p>

<p>In my case, I was trying out batman.js and Martini, and I was surprised to find that RestStorage sends form data. I guess you never notice with Rails, since it puts everything into the <code>params</code> hash.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Batman.js Controller Testing with Jasmine]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/04/22/batman-dot-js-controller-testing-with-jasmine/"/>
    <updated>2014-04-22T08:30:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/04/22/batman-dot-js-controller-testing-with-jasmine</id>
    <content type="html"><![CDATA[<p>You can use <a href="http://jasmine.github.io/">jasmine</a> to test <a href="http://batmanjs.org">batman.js</a> controllers by looking them up from the controller directory, then executing actions with <code>executeAction</code>.</p>

<!-- more -->


<h2>Setup</h2>

<p>To set up,</p>

<ul>
<li>make sure the app is <a href="http://batmanjs.org/docs/api/batman.app.html#class_function_run">running</a> (so that the <a href="http://batmanjs.org/docs/api/batman.app.html#class_property_layout">layout</a> view will be present)</li>
<li>get the controller you want from <a href="http://batmanjs.org/docs/api/batman.app.html#class_accessor_controllers"><code>App.controllers</code></a> (a <a href="http://batmanjs.org/docs/api/controllerdirectory.html">ControllerDirectory</a> )</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&#39;PeopleController&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">@beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">run</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@peopleController = </span><span class="nx">App</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;controllers.people&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span> <span class="s">&#39;is present&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">@peopleController</span><span class="p">.</span><span class="nx">constructor</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">App</span><span class="p">.</span><span class="nx">PeopleController</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our tests, we&rsquo;ll use <a href="http://batmanjs.org/docs/api/batman.controller.html#prototype_function_executeaction"><code>Batman.Controller::executeAction</code></a> to fire controller actions. This way, before-actions and after-actions will be run, too.</p>

<h2>Functions Are Called on Records</h2>

<p>Use Jasmine <code>spyOn(...).andCallThrough()</code> to make sure functions have been called</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nx">describe</span> <span class="s">&#39;edit&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="c1"># This action is invoked from a view binding, not a route</span>
</span><span class='line'>    <span class="c1"># so it takes `person`, not `params`....</span>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&#39;calls transaction on the person&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nv">person = </span><span class="k">new</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span><span class="p">(</span><span class="nv">id: </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">spyOn</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="s">&#39;transaction&#39;</span><span class="p">).</span><span class="nx">andCallThrough</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">@peopleController</span><span class="p">.</span><span class="nx">executeAction</span><span class="p">(</span><span class="s">&#39;edit&#39;</span><span class="p">,</span> <span class="nx">person</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">transaction</span><span class="p">).</span><span class="nx">toHaveBeenCalled</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Options Passed to Render</h2>

<p>Get the most recent render arguments from jasmine&rsquo;s <code>mostRecentCall</code>. It will be the options passed to <code>@render</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">it</span> <span class="s">&#39;renders into the dialog&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">person = </span><span class="k">new</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span><span class="p">(</span><span class="nv">id: </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">spyOn</span><span class="p">(</span><span class="nx">@peopleController</span><span class="p">,</span> <span class="s">&#39;render&#39;</span><span class="p">).</span><span class="nx">andCallThrough</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">@peopleController</span><span class="p">.</span><span class="nx">executeAction</span><span class="p">(</span><span class="s">&#39;edit&#39;</span><span class="p">,</span> <span class="nx">person</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">lastRenderArgs = </span><span class="nx">@peopleController</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">mostRecentCall</span><span class="p">.</span><span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">lastYield = </span><span class="nx">lastRenderArgs</span><span class="p">[</span><span class="s">&quot;into&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="nx">lastYield</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s">&quot;modal&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Functions Called on Model Classes</h2>

<p>Checking class to <code>get</code> is tough becuase there are a lot of them! I just iterate through and make sure nothing jumps out as wrong:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nx">describe</span> <span class="s">&#39;index&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&#39;gets loaded people, not all people&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">spyOn</span><span class="p">(</span><span class="nx">App</span><span class="p">.</span><span class="nx">Person</span><span class="p">,</span> <span class="s">&#39;get&#39;</span><span class="p">).</span><span class="nx">andCallThrough</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">@peopleController</span><span class="p">.</span><span class="nx">executeAction</span><span class="p">(</span><span class="s">&#39;index&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># there are a lot of calls to App.Person.get, just make sure</span>
</span><span class='line'>      <span class="c1"># that &quot;all&quot; wasn&#39;t requested!</span>
</span><span class='line'>      <span class="nv">loadedCalls = </span><span class="mi">0</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">call</span> <span class="k">in</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span><span class="p">.</span><span class="nx">get</span><span class="p">.</span><span class="nx">calls</span>
</span><span class='line'>        <span class="nv">getArg = </span><span class="nx">call</span><span class="p">.</span><span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">getArg</span><span class="p">).</span><span class="o">not</span><span class="p">.</span><span class="nx">toMatch</span><span class="p">(</span><span class="sr">/all/</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">getArg</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/loaded/</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">loadedCalls</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">loadedCalls</span><span class="p">).</span><span class="nx">toBeGreaterThan</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Renders a Specific View</h2>

<p>Rendering into the default yield is easy enough &mdash; just check <code>layout.subviews</code> for an instance of the desired view.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">it</span> <span class="s">&#39;renders the PeopleIndexView&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">@peopleController</span><span class="p">.</span><span class="nx">executeAction</span><span class="p">(</span><span class="s">&#39;index&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">hasPeopleIndexView = </span><span class="nx">App</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;layout.subviews&#39;</span><span class="p">).</span><span class="nx">some</span> <span class="nf">(view) -&gt;</span> <span class="nx">view</span> <span class="k">instanceof</span> <span class="nx">App</span><span class="p">.</span><span class="nx">PeopleIndexView</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="nx">hasPeopleIndexView</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic Source Tracking in Batman.js]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/04/20/automatic-source-tracking-in-batman-dot-js/"/>
    <updated>2014-04-20T21:18:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/04/20/automatic-source-tracking-in-batman-dot-js</id>
    <content type="html"><![CDATA[<p>In <a href="http://batmanjs.org">batman.js</a>, properties automatically track their sources. This is done by tracking all calls to <code>get</code> when an accessor function is executed.</p>

<!-- more -->


<p>I hope to cover automatic dependency tracking in batman.js by describing:</p>

<ul>
<li>The &ldquo;source&rdquo; relationship between properties</li>
<li>The structure of the tracker stack</li>
<li>How the tracker stack is used internally by batman.js</li>
</ul>


<p>Then I will cover several examples of source tracking:</p>

<ul>
<li>No depencies</li>
<li>One dependency</li>
<li>Nested dependencies</li>
<li>Parallel dependencies</li>
<li>Outside dependencies</li>
<li>Conditionals</li>
<li>Iteration</li>
</ul>


<h2>Sources/Dependencies</h2>

<p>Consider <code>Tree</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Tree</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nb">Object</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;species&#39;</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;isOak&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;species&#39;</span><span class="p">)</span> <span class="o">is</span> <span class="s">&#39;oak&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A <code>Tree</code>&rsquo;s <code>isOak</code> changes when <code>species</code> changes. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">shadeTree = </span><span class="k">new</span> <span class="nx">Tree</span><span class="p">(</span><span class="nv">species: </span><span class="s">&#39;maple&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">shadeTree</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;isOak&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; false</span>
</span><span class='line'><span class="nx">shadeTree</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s">&#39;species&#39;</span><span class="p">,</span> <span class="s">&#39;oak&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">shadeTree</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;isOak&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can describe the relationship between <code>isOak</code> and <code>species</code> in two ways:</p>

<ul>
<li><code>isOak</code> <em>depends on</em> <code>species</code></li>
<li><code>species</code> is <code>isOak</code>&rsquo;s  <em>source</em></li>
</ul>


<h2>The Source Tracker Stack</h2>

<p>The <strong>global source tracker stack</strong> is an array of arrays:</p>

<ul>
<li>Each sub-array is a <em>list of sources</em> for a property whose value is being calculated.</li>
<li>Each member of a sub-array is a <em>source</em> for that property.</li>
</ul>


<p>Here&rsquo;s an example tracker stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">Batman</span><span class="p">.</span><span class="nx">Property</span> <span class="s">&quot;species&quot;</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">Batman</span><span class="p">.</span><span class="nx">Property</span> <span class="s">&quot;age&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="c1"># no sources</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The global tracker is an array</li>
<li>Its members are arrays</li>
<li>Inside those arrays are sources</li>
<li>Some properties have no other sources</li>
</ul>


<p><em>I&rsquo;ll be using strings to represent sources, but batman.js actually uses <a href="http://batmanjs.org/docs/api/batman.property.html"><code>Batman.Property</code> instances</a>. A <code>Batman.Property</code> has a <code>base</code> (usually a <code>Batman.Object</code>) and a <code>key</code>, which is the string identifier for the property.</em></p>

<h2>How Batman.js Uses Source Tracker Stack</h2>

<p>Internally, batman.js uses the source tracker stack whenever properties are evaluated with <code>get</code> (if they weren&rsquo;t already <a href="http://rmosolgo.github.io/blog/2014/03/31/property-caching-in-batman-dot-js/">cached</a>). <code>get</code> functions are wrapped with batman.js&rsquo;s source tracking:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>┌────────────────────────────────────────────────────
</span><span class='line'>│ -&gt; Property is pushed to open tracker,
</span><span class='line'>│    if there is one
</span><span class='line'>│ -&gt; Batman.js opens the stack for sources
</span><span class='line'>│  ┌─────────────────────────────────────────────────
</span><span class='line'>│  │  -&gt; Accessor function is executed
</span><span class='line'>│  │     and returns a value
</span><span class='line'>│  └─────────────────────────────────────────────────
</span><span class='line'>│ -&gt; Batman.js registers sources
</span><span class='line'>└────────────────────────────────────────────────────
</span></code></pre></td></tr></table></div></figure>


<p>At the beginning each call to <code>get("property")</code>, batman.js:</p>

<ol>
<li><strong>Adds <code>property</code> to the current open tracker, if there is one.</strong>  To determine whether the current <code>get</code> is called in the context of evaluating another property, batman.js checks for an open tracker (ie, an array inside the global source tracker). If there is one, it pushes the current property as source of whatever property was being evaluated.</li>
<li><strong>Pushes a new entry in the tracker.</strong> Batman.js prepares the source tracker for any dependencies by pushing a child array. If any other properties are accessed, they will be pushed to that child array (via step 1 above!).</li>
</ol>


<p>When <code>get</code> functions finish, batman.js cleans up the source tracker stack by:</p>

<ol>
<li><strong>Getting the list of sources</strong> by popping off of the global source tracker.</li>
<li><strong>Creating observers</strong> for all sources.</li>
</ol>


<h2>No Dependencies</h2>

<p>In a property lookup, there are no other calls to <code>get</code>, so the source tracker doesn&rsquo;t do very much. Here&rsquo;s what it would look like if you watched the global source tracker:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Call stack              # Source tracker stack</span>
</span><span class='line'>                          <span class="c1"># []</span>
</span><span class='line'><span class="nx">shadeTree</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;species&#39;</span><span class="p">)</span>  <span class="c1"># []</span>
</span><span class='line'>  <span class="c1"># there is no entry in the stack to add `species` to.</span>
</span><span class='line'>  <span class="c1"># batman.js pushes an entry for `species`&#39;s sources</span>
</span><span class='line'>                          <span class="c1"># [ [] ]</span>
</span><span class='line'>  <span class="nf">-&gt;</span> <span class="k">return</span> <span class="s">&#39;oak&#39;</span>         <span class="c1"># [ [] ]</span>
</span><span class='line'>  <span class="c1"># batman.js registers sources (none!) and clears the tracker</span>
</span></code></pre></td></tr></table></div></figure>


<p>Batman.js prepared to track the sources for <code>species</code>, but didn&rsquo;t find any.</p>

<h2>One Dependency</h2>

<p>The example above, calling <code>get('isOak')</code> <a href="http://rmosolgo.github.io/blog/2014/03/31/property-caching-in-batman-dot-js/">causes batman.js to calculate</a> the tree&rsquo;s <code>isOak</code> value.</p>

<p>Here&rsquo;s what the tracker stack would look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Call stack              # Source tracker stack</span>
</span><span class='line'>                          <span class="c1"># []</span>
</span><span class='line'><span class="nx">shadeTree</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;isOak&#39;</span><span class="p">)</span>    <span class="c1"># []</span>
</span><span class='line'>  <span class="c1"># there is no entry in the stack to add `isOak` to.</span>
</span><span class='line'>  <span class="c1"># batman.js pushes an entry in the source tracker for `isOak`&#39;s sources</span>
</span><span class='line'>                          <span class="c1"># [ [] ]</span>
</span><span class='line'>  <span class="nf">-&gt;</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;species&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># batman.js adds `species` to `isOak`&#39;s sources</span>
</span><span class='line'>                          <span class="c1"># [ [species] ]</span>
</span><span class='line'>  <span class="c1"># batman.js pushes an entry in the source tracker for `species`</span>
</span><span class='line'>                          <span class="c1"># [ [species], [] ]</span>
</span><span class='line'>    <span class="nf">-&gt;</span> <span class="k">return</span>             <span class="c1"># [ [species], [] ]</span>
</span><span class='line'>    <span class="c1"># batman.js pops `species`&#39;s sources -- but there weren&#39;t any</span>
</span><span class='line'>  <span class="nf">-&gt;</span> <span class="o">is</span> <span class="s">&#39;oak&#39;</span>             <span class="c1"># [ [species] ]</span>
</span><span class='line'>  <span class="nf">-&gt;</span> <span class="c1"># batman.js pops `isOak`&#39;s dependencies and registers them internally</span>
</span><span class='line'>  <span class="nf">-&gt;</span> <span class="k">return</span>               <span class="c1"># []</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deeply-Nested Dependencies</h2>

<p>Batman.js handles nested calls to <code>get</code> by pushing entries to the source tracker. When the nested class resolve, entries are popped back off the source tracker.</p>

<p>For example, let&rsquo;s add another property that depends on <code>isOak</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Tree</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nb">Object</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;hasAcorns&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;isOak&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>hasAcorns</code>&rsquo;s only source is <code>isOak</code>. The dependency chain looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">species</span> <span class="nf">-&gt;</span> <span class="nx">isOak</span> <span class="nf">-&gt;</span> <span class="nx">hasAcorns</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, here&rsquo;s what the source tracker stack looks like for calculating <code>hasAcorns</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Call stack                # Source tracker stack</span>
</span><span class='line'>                            <span class="c1"># []</span>
</span><span class='line'><span class="nx">shadeTree</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;hasAcorns&#39;</span><span class="p">)</span>
</span><span class='line'>                            <span class="c1"># [ [] ]</span>
</span><span class='line'>  <span class="nf">-&gt;</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;isOak&#39;</span><span class="p">)</span>
</span><span class='line'>                            <span class="c1"># [ [isOak], [] ]</span>
</span><span class='line'>    <span class="nf">-&gt;</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;species&#39;</span><span class="p">)</span>      <span class="c1"># [ [isOak], [species], [] ]</span>
</span><span class='line'>      <span class="nf">-&gt;</span> <span class="k">return</span>
</span><span class='line'>      <span class="c1"># batman.js doesn&#39;t register any sources for `species`</span>
</span><span class='line'>                            <span class="c1"># [ [isOak], [species] ]</span>
</span><span class='line'>    <span class="nf">-&gt;</span> <span class="k">return</span>
</span><span class='line'>    <span class="c1"># batman.js registers `isOak`&#39;s source, `species`</span>
</span><span class='line'>                            <span class="c1"># [ [isOak] ]</span>
</span><span class='line'>  <span class="nf">-&gt;</span> <span class="k">return</span>
</span><span class='line'>  <span class="c1"># batman.js registers `hasAcorn`&#39;s source, `isOak`</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note:</em> Batman.js only evaluates properties that aren&rsquo;t <a href="blog/2014/03/31/property-caching-in-batman-dot-js/">cached</a>, so you don&rsquo;t have to worry about &ldquo;abusing&rdquo; deeply nested properties.</p>

<h2>Parallel Dependencies</h2>

<p>Properties may also have multiple, non-nested sources. These are parallel sources:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Tree</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nb">Object</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;description&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="s">&quot;</span><span class="si">#{</span><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;age&#39;</span><span class="p">)</span><span class="si">}</span><span class="s">-year-old </span><span class="si">#{</span><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;species&#39;</span><span class="p">)</span><span class="si">}</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>description</code> depends on <code>age</code> <em>and</em> <code>species</code>. If either one changes, the property will be reevaluated.</p>

<p>When <code>description</code> is calculated, it will register <code>age</code> and <code>species</code> as sources. Here&rsquo;s what it would look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Call stack                # Source tracker stack</span>
</span><span class='line'>                            <span class="c1"># []</span>
</span><span class='line'><span class="nx">shadeTree</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;description&#39;</span><span class="p">)</span>
</span><span class='line'>                            <span class="c1"># [ [] ]</span>
</span><span class='line'>  <span class="nf">-&gt;</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;age&#39;</span><span class="p">)</span>
</span><span class='line'>                            <span class="c1"># [ [age] ]</span>
</span><span class='line'>                            <span class="c1"># [ [age], [] ]</span>
</span><span class='line'>    <span class="nf">-&gt;</span> <span class="k">return</span>
</span><span class='line'>                            <span class="c1"># [ [age] ]</span>
</span><span class='line'>  <span class="nf">-&gt;</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;species&#39;</span><span class="p">)</span>
</span><span class='line'>                            <span class="c1"># [ [age, species] ]</span>
</span><span class='line'>                            <span class="c1"># [ [age, species], [] ]</span>
</span><span class='line'>    <span class="nf">-&gt;</span> <span class="k">return</span>
</span><span class='line'>                            <span class="c1"># [ [age, species] ]</span>
</span><span class='line'>  <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="c1"># batman.js registers both sources</span>
</span><span class='line'>                            <span class="c1"># []</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Dependencies on Other Objects</h2>

<p>So far, all examples have used <code>@get</code> inside accessors. However, it&rsquo;s safe to access properties of any <code>Batman.Object</code> with <code>get</code> inside an accessor function. This is because the <code>Batman.Property</code> is aware of its <em>base</em> and <em>key</em>. <em>Base</em> is the object that the property belongs to and <em>key</em> is the string name of the property. When you use <code>get</code> on another object, the correct object and property are tracked as sources.</p>

<p>For example, <code>Tree::ownerName</code> depends on an outside object (a <code>Person</code> object):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Tree</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nb">Object</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;ownerName&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nv">ownerId = </span><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;ownerId&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># find owner by id:</span>
</span><span class='line'>    <span class="nv">owner = </span><span class="nx">Person</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;all&#39;</span><span class="p">).</span><span class="nx">indexedByUnique</span><span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="nx">ownerId</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">owner</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case <code>owner.get('name')</code> registers a <code>Batman.Property</code> whose base is a <code>Person</code>. If that person&rsquo;s name changes, <code>ownerName</code> will be reevaluated.</p>

<h2>Conditionals</h2>

<p>Let&rsquo;s add a property to <code>Tree</code> that has some conditional logic. <code>Tree::bestAvailableFood</code> contains conditional branching:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Tree</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nb">Object</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;bestAvailableFood&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;hasFruit&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="s">&quot;fruit&quot;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;hasAcorns&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="s">&quot;acorns&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure>


<p>Batman.js will only track calls to <code>get</code> that are <em>actually executed</em>, so if <code>hasFruit</code> returns true, then <code>hasAcorns</code> won&rsquo;t be registered as a source.</p>

<p>What if <code>hasAcorns</code> changes? It doesn&rsquo;t matter &mdash; the property would still evaluate to <code>"fruit"</code> (from the <code>hasFruit</code> branch), so batman.js saved itself some trouble!</p>

<p>If <code>hasFruit</code> and <code>hasAcorns</code> both returned false, they would both be registered as sources (as in the &ldquo;parallel sources&rdquo; example). The property would be reevaluated if either one changed.</p>

<h2>Iteration</h2>

<p>Iteration is safe inside accessor bodies as long as you play by batman.js&rsquo;s rules:</p>

<ul>
<li><strong>Enumerables must extend <code>Batman.Object</code></strong> so that they&rsquo;re observable. Plain JavaScript Arrays and Objects can&rsquo;t be registered as sources.</li>
<li><strong>Enumerables must be retrieved with <code>get</code></strong> so that a wholesale replacement of the enumerable is observed, too.</li>
</ul>


<p>Let&rsquo;s look at two accessors that have iteration in their <code>get</code> functions: one has an early return, the always visits each member of the set.</p>

<p><em>These accessors could be simplifed by using <a href="http://batmanjs.org/docs/api/batman.enumerable.html"><code>Batman.Enumerable</code></a> functions, but they&rsquo;re spelled out for clarity&rsquo;s sake!</em></p>

<h3>Early Return</h3>

<p><code>Tree::hasFruit</code> returns as soon as it finds a limb with fruit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Tree</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nb">Object</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;limbs&#39;</span> <span class="c1"># has a Batman.Set</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;hasFruit&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;limbs&#39;</span><span class="p">).</span><span class="nx">forEach</span> <span class="nf">(limb) -&gt;</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span> <span class="k">if</span> <span class="nx">limb</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;hasFruit&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>During evaluation, <code>limbs</code> and each <code>limb.hasFruit</code> will be added as sources, until a <code>limb.hasFruit</code> returns true.</p>

<p>Some limbs won&rsquo;t be observed as sources, but that&rsquo;s OK: the property will be true <em>as long as</em> the first true <code>limb.hasFruit</code> still evaluates to true. If that first <code>limb.hasFruit</code> becomes <code>false</code>, the property will be reevaluated.</p>

<p>Similarly, if one of the earlier limbs becomes <code>true</code>, the property will be reevaluated. (And in that case, it will register fewer sources, since it made fewer iterations before finding a <code>true</code> value.)</p>

<h3>Depends on Every Member</h3>

<p><code>Tree::totalFruits</code> is the sum of fruits on all limbs, so it must observe <em>every</em> limb:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;totalFruits&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nv">totalCount = </span><span class="mi">0</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;limbs&#39;</span><span class="p">).</span><span class="nx">forEach</span> <span class="nf">(limb) -&gt;</span>
</span><span class='line'>      <span class="nx">totalCount</span> <span class="o">+=</span> <span class="nx">limb</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;fruits.length&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">totalcount</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since every limb will be visited during evaluation, every limb will be added as a source. Whenever one of the <code>limb.fruits.length</code> changes, the property will be reevaluated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing the Batman.js MVC Cookbook]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/04/19/introducing-the-batman-dot-js-mvc-cookbook/"/>
    <updated>2014-04-19T13:47:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/04/19/introducing-the-batman-dot-js-mvc-cookbook</id>
    <content type="html"><![CDATA[<p>The <a href="https://www.softcover.io/read/b5c051f3/batmanjs_mvc_cookbook">&ldquo;Batman.js MVC Cookbook&rdquo;</a> is a collection of annotated code snippets for getting things done with <a href="http://batmanjs.org">batman.js</a>.</p>

<!-- more -->


<p>When I heard that Michael Hartl (of <a href="http://railstutorial.com">Rails Tutorial</a> fame) was releasing a web publishing platform, I was itching to try it out. I thought a glorified FAQ would be a great way to get the feel for it, and the result is now online as the <a href="https://www.softcover.io/read/b5c051f3/batmanjs_mvc_cookbook">&ldquo;Batman.js MVC Cookbook&rdquo;</a>.</p>

<p>The &ldquo;book&rdquo; is really just a collection of common patterns and best practices in batman.js applications, taken from my own experience. I hope that others will contribute by adding &ldquo;recipes&rdquo; or requesting new ones, so I put the book&rsquo;s <a href="https://github.com/rmosolgo/batmanjs-mvc-cookbook">source code on Github</a>.</p>

<p>It&rsquo;s not quite a batman.js tutorial, although I&rsquo;m really enjoying Softcover, so maybe I&rsquo;ll get one up there soon. It would be a good opportunity to take the <a href="https://github.com/rmosolgo/batfire">batman.js Firebase bindings</a> for a spin, too!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is Batman.js Just for Ruby on Rails?]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/04/15/is-batman-dot-js-just-for-ruby-on-rails/"/>
    <updated>2014-04-15T22:39:00-07:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/04/15/is-batman-dot-js-just-for-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>You can use <a href="http://batmanjs.org">batman.js</a> with any backend!</p>

<!-- more -->


<p>Batman.js is <em>not</em> just for Ruby on Rails! Here are batman.js&rsquo;s dependencies:</p>

<ul>
<li>A RESTful JSON API</li>
<li>A way to compile the CoffeeScript app (may I recommend <a href="http://rmosolgo.github.io/blog/2014/03/22/using-gulp-dot-js-to-build-batman-dot-js-without-rails/">gulp.js</a>?)</li>
<li>A way to provide HTML templates (again, gulp.js worked nicely for me!)</li>
</ul>


<p>As long as you can meet those requirements, you can use batman.js with any backend: Node, Ruby, Python, Java, Go, Rust, Erlang, PHP &hellip; you get the drift.</p>

<h2>Why Is Batman.js Associated with Rails?</h2>

<p>A few reasons:</p>

<ul>
<li>A lot of batman.js&rsquo;s syntax and features are designed with Rails in mind</li>
<li>Batman.js was extracted from Shopify, which is a Ruby on Rails application</li>
<li>Rails meets all of the above requirements out of the box</li>
</ul>


<p>Also, there are a few batman.js goodies for Rails devs: the <code>batman.rails</code> CoffeeScript extra and the <code>batman-rails</code> Ruby gem.</p>
]]></content>
  </entry>
  
</feed>
