<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Robert Mosolgo]]></title>
  <link href="http://rmosolgo.github.io/atom.xml" rel="self"/>
  <link href="http://rmosolgo.github.io/"/>
  <updated>2016-08-08T13:41:23-04:00</updated>
  <id>http://rmosolgo.github.io/</id>
  <author>
    <name><![CDATA[Robert Mosolgo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Summer Reading: Specializing Ruby]]></title>
    <link href="http://rmosolgo.github.io/blog/2016/08/06/summer-reading-specializing-ruby/"/>
    <updated>2016-08-06T11:10:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2016/08/06/summer-reading-specializing-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://chrisseaton.com/phd/"><em>Specialising Dynamic Techniques for Implementing the Ruby Programming Language</em></a> (&ldquo;Specializing Ruby&rdquo;) is approachable and enjoyable (despite being a PhD thesis üòù).</p>

<!-- more -->


<p><em>Specializing Ruby</em> describes <a href="https://twitter.com/ChrisGSeaton">Chris Seaton</a>&rsquo;s work on <a href="http://chrisseaton.com/rubytruffle/">JRuby+Truffle</a>. It seems to be aimed at an unfamiliar audience, so it&rsquo;s loaded with background information and careful explanations. Those were a big benefit to me! I&rsquo;ll describe a few things that I enjoyed the most:</p>

<ul>
<li>Introduction to Truffle and Graal</li>
<li>Optimizing Metaprogramming with Dispatch Chains</li>
<li>Zero-Overhead Debugging</li>
<li>Interpreting Native Extensions</li>
</ul>


<h2>Introduction to Truffle and Graal</h2>

<p>Seaton&rsquo;s work is built on top of two existing Java projects: <strong>Truffle</strong> and <strong>Graal</strong> (pronunciation: üòñ‚ùì).</p>

<p>Truffle is a <em>language implementation framework</em> for <em>self-optimizing AST interpreters</em>. This means:</p>

<ul>
<li>Truffle is for <em>implementing languages</em>. People have used Truffle to implement many languages, including Ruby, C, and Python.</li>
<li>Truffle languages are <em>AST interpreters</em>. A Truffle language parses its source code into a tree of nodes (the <em>abstract syntax tree</em>, AST), which represents the program. Then, it executes the program by traversing the tree, taking actions at each node.</li>
<li>Truffle languages can <em>self-optimize</em>. Nodes can observe their execution and replace themselves with optimized versions of themselves.</li>
</ul>


<p>Graal is a <em>dynamic compiler</em> for the JVM, written in Java. A few points about Graal:</p>

<ul>
<li>It&rsquo;s a just-in-time compiler, so it improves a program&rsquo;s performance while the program runs.</li>
<li>Graal is written in Java, which means it can expose its own APIs to other Java programs (like Truffle).</li>
<li>Graal includes a powerful system for <em>de-optimizing</em>. This is especially important for Ruby, since Ruby&rsquo;s metaprogramming constructs allow programs to define new behavior for themselves while running.</li>
</ul>


<p>Truffle has a &ldquo;Graal backend,&rdquo; which supports close cooperation between the two. Together, they make a great team for language implementation: Truffle provides a simple approach to language design and Graal offers a means to optimize all the way to machine code.</p>

<h2>Optimizing Metaprogramming with Dispatch Chains</h2>

<p>This is a novel optimization technique for Ruby, described in section 5.</p>

<p>Since Ruby is dynamic, method lookups must happen at runtime. In CRuby, call sites have <em>caches</em> which store the result of method lookups and may short-circuit the lookup next time the call happens.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">some_object</span><span class="o">.</span><span class="n">some_method</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</span><span class='line'><span class="c1">#          ^- here&#39;s the call site</span>
</span><span class='line'><span class="c1">#             the _actual_ method definition to use</span>
</span><span class='line'><span class="c1">#             depends on `some_object`&#39;s class, which is unknown</span>
</span><span class='line'><span class="c1">#             until the program is actually running</span>
</span></code></pre></td></tr></table></div></figure>


<p>One such cache is a <em>polymorphic inline cache</em>, which is roughly a map of <code>Class =&gt; method</code> pairs. When CRuby starts the call, it checks the cache for the current receiver&rsquo;s class. On a cache hit, it uses the cached method definition. On a cache miss, it looks up a definition and adds it to the cache.</p>

<p>The cache might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">some_object</span><span class="o">.</span><span class="n">some_method</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</span><span class='line'><span class="c1"># Cache:</span>
</span><span class='line'><span class="c1">#   - SomeObject =&gt; SomeObject#some_method</span>
</span><span class='line'><span class="c1">#   - SomeOtherObject =&gt; SomeOtherObject#method_missing</span>
</span></code></pre></td></tr></table></div></figure>


<p>In some cases, CRuby declares bankruptcy. Dynamic method calls (<code>.send</code>) are not cached!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">some_object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</span><span class='line'><span class="c1">#          ^- who knows what method to call!?!?</span>
</span></code></pre></td></tr></table></div></figure>


<p>JRuby+Truffle&rsquo;s solution to this challenge is <em>dispatch chains.</em> Each call site (including <code>.send</code>) gets a dispatch chain, which is a like two-layer cache. First, it stores the <em>name</em> of the method. Then, it stores the <em>class</em> of the receiver. For a &ldquo;static&rdquo; method call, it looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">some_object</span><span class="o">.</span><span class="n">some_method</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</span><span class='line'><span class="c1"># - &quot;some_method&quot; =&gt;</span>
</span><span class='line'><span class="c1">#    - SomeObject =&gt; SomeObject#some_method</span>
</span><span class='line'><span class="c1">#    - SomeOtherObject =&gt; SomeOtherObject#method_missing</span>
</span></code></pre></td></tr></table></div></figure>


<p>And for a dynamic method call, it caches <em>each</em> method name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">some_object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</span><span class='line'><span class="c1"># - &quot;some_method&quot; =&gt;</span>
</span><span class='line'><span class="c1">#    - SomeObject =&gt; SomeObject#some_method</span>
</span><span class='line'><span class="c1">#    - SomeOtherObject =&gt; SomeOtherObject#method_missing</span>
</span><span class='line'><span class="c1"># - &quot;some_other_method&quot; =&gt;</span>
</span><span class='line'><span class="c1">#    - SomeObject =&gt; SomeObject#some_other_method</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this respect, JRuby+Truffle treats <em>every</em> method call like a <code>.send(...)</code>. This cache is implemented with Truffle nodes, so it&rsquo;s optimized as much as the rest of the program.</p>

<p>I wonder if this kind of method cache could be implemented for CRuby!</p>

<h2>Zero-Overhead Debugging</h2>

<p>Debugging in JRuby+Truffle (described in section 6) is a tour de force for the Truffle-Graal combo. Other Rubies incur big performance penalties for debugging. Some require a special &ldquo;debug&rdquo; flag. But Seaton implements zero-overhead, always-available debugging by applying Truffle concepts in a new way.</p>

<p>Debugging hooks (such as the beginning of a new line) are added as &ldquo;transparent&rdquo; Truffle AST nodes, analogous to CRuby&rsquo;s <code>trace</code> instruction. By default, they don&rsquo;t do anything &mdash; they just call through to their child nodes. Since they&rsquo;re &ldquo;just&rdquo; Truffle nodes, they&rsquo;re optimized like the rest of the program (and since they&rsquo;re transparent, they&rsquo;re optimized away completely). When those nodes are targeted for debugging, they&rsquo;re de-optimized, updated with the appropriate debug code, and the program continues running (and self-optimizing). When the debugger is detached, the node de-optimizes again, replaces itself with transparent nodes again, and the program resumes.</p>

<p>This chapter included a good description of Graal&rsquo;s <code>Assumption</code> concept. Assumptions are attached to optimized code. As long as <code>isValid()</code> is true, optimized code is executed. However, when an assumption is marked as invalid, Graal transfers execution back to the interpreter. Debugging takes advantage of this construct: debug nodes are transparent under the assumption that no debugger is attached to them. But when a developer attaches a debugger, then that assumption is invalidated and Graal de-optimizes and starts interpreting with the new debug nodes. Removing a debugger does the same thing: it invalidates an assumption, automatically de-optimizing the compiled code.</p>

<h2>Interpreting Native Extensions</h2>

<p>Truffle: if it&rsquo;s not solving your problems, you&rsquo;re not using enough of it!</p>

<p>Throughout the paper, Seaton points out the &ldquo;real-world&rdquo; challenge of any new Ruby implementation: it simply <em>must</em> support <em>all</em> existing code, including C extensions! If you require developers to rewrite code for a new implementation, they probably won&rsquo;t bother with it.</p>

<p>He also points out that CRuby&rsquo;s C API is an implementer&rsquo;s nightmare (my words, not his). It&rsquo;s tightly coupled to CRuby&rsquo;s implementation it provides direct access to CRuby&rsquo;s memory (eg, string pointers).</p>

<p>Truffle&rsquo;s design offers a solution to this problem. Truffle languages implement common interfaces for AST nodes and objects, meaning that they can be <em>shared</em> between languages! With this technique, JRuby+Truffle can implement Ruby&rsquo;s C API by interpreting C with Truffle. Since it&rsquo;s &ldquo;just Truffle&rdquo;, C and Ruby ASTs can be seamlessly merged. They are even optimized together, just like a pure-Ruby program.</p>

<p>Seaton describes some particular techniques for adapting the pre-existing TruffleC project to the Ruby C API. In typical fashion, JRuby+Truffle outpaces CRuby &mdash; even for C extensions!</p>

<h2>Conclusion</h2>

<p>The only remaining question I have is, how bad is warm-up cost in practice? All of JRuby+Truffle&rsquo;s benchmarks are at &ldquo;peak performance&rdquo;, but the system is &ldquo;cold&rdquo; at start-up, and many triggers in the program can cause the system to de-optimize. Is JIT warm-up a real issue?</p>

<p>&ldquo;Optimizing Ruby&rdquo; was a great read. Although I found the subject matter quite challenging, the writing style and occasional illustrations helped me keep up. Practically speaking, I can&rsquo;t use JRuby+Truffle until it runs all of Ruby on Rails, which isn&rsquo;t the case <em>yet</em>. I&rsquo;m eager to see how this project matures!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding a Browser-Ready File for Sprockets]]></title>
    <link href="http://rmosolgo.github.io/blog/2016/05/19/finding-a-browser-ready-file-for-sprockets/"/>
    <updated>2016-05-19T22:00:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2016/05/19/finding-a-browser-ready-file-for-sprockets</id>
    <content type="html"><![CDATA[<p>I like using Sprockets, but sometimes it&rsquo;s hard to find a file to include in the asset pipeline. Here are some methods I use to find browser-ready JavaScript files.</p>

<!-- more -->


<p>There are a few good options for getting browser-ready files for JavaScript libraries:</p>

<ul>
<li>Download a file from the project&rsquo;s website</li>
<li>Download a file from the project&rsquo;s source code repository</li>
<li>Download a file from a CDN (unpkg is great for cases where files are only &ldquo;compiled&rdquo; for releases)</li>
<li>Build the file yourself, following the project&rsquo;s documentation</li>
</ul>


<p><strong>Don&rsquo;t</strong> get a minified version. Sprockets will minify it for us later. In the meantime, the unminified version will help us during development.</p>

<h3>From a Website</h3>

<p>This is the good ol&#8217; way of getting JavaScript files. Because we still use browsers, you can still download these files.</p>

<p>Here are some examples:</p>

<p><img src="http://rmosolgo.github.io/images/sprockets/website_download_d3.png" width="300"></p>

<p><img src="http://rmosolgo.github.io/images/sprockets/website_download_react.png" width="500"></p>

<p><img src="http://rmosolgo.github.io/images/sprockets/website_download_moment.png" width="300"></p>

<h3>From the Repo</h3>

<p>Many projects maintain a browser build in the project&rsquo;s source. You may have to poke around a bit, but likely places are the project&rsquo;s root folder, the <code>dist/</code> folder, or the <code>build/</code> folder.</p>

<p>As you explore the repo, remember to examine a stable ref, such as a release or a stable branch.</p>

<p>Here are some examples:</p>

<p><img src="http://rmosolgo.github.io/images/sprockets/repo_download_c3.png" width="300"></p>

<p><img src="http://rmosolgo.github.io/images/sprockets/repo_download_immutable.png" width="300"></p>

<p><img src="http://rmosolgo.github.io/images/sprockets/repo_download_three.png" width="300"></p>

<h3>From a CDN</h3>

<p><a href="https://cdnjs.com/libraries">CDNJS</a> hosts browser-ready files for many libraries.</p>

<p>Sometimes, an author only compiles browser-ready files for releases to NPM. You can get these files from <a href="https://unpkg.com/">unpkg</a>.</p>

<p>Since unpkg is serving NodeJS projects, employ a similar technique to searching the project repo for a file:</p>

<ul>
<li>Check the &ldquo;main&rdquo; file</li>
<li>Check the &ldquo;dist&rdquo; or &ldquo;build&rdquo; directories</li>
</ul>


<h3>Build it from Source</h3>

<p>If a pre-built, browser-ready file is not available, you may have to build it yourself! The project&rsquo;s readme will contain instructions to do so. If it doesn&rsquo;t &hellip; you may want to reconsider adding this dependency! (Even if it&rsquo;s well-maintained, it&rsquo;s not a good match for this asset bundling approach.)</p>

<h2>Summary</h2>

<p>Hopefully these will work well for you!</p>

<p>You may have to learn a bit of RequireJS, jspm, Grunt, Browserify, Gulp, Webpack or Rollup along the way. (Ok, probably not Rollup, sadly.) But at least you don&rsquo;t have to use them day-in and day-out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Use Sprockets]]></title>
    <link href="http://rmosolgo.github.io/blog/2016/05/19/how-i-use-sprockets/"/>
    <updated>2016-05-19T08:44:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2016/05/19/how-i-use-sprockets</id>
    <content type="html"><![CDATA[<p>When reviewing issues for <code>react-rails</code>, I see many questions about how to gather JavaScript dependencies with Sprockets. Here is how I use Sprockets to manage JavaScript dependencies.</p>

<!-- more -->


<p>I&rsquo;m looking for a few things in a JavaScript bundler:</p>

<ul>
<li>Stability: I don&rsquo;t want any changes to my dependencies unless I explicitly make them.</li>
<li>Clarity: I want to be able to quickly tell what dependencies I have (library and version).</li>
<li>Insulation: I don&rsquo;t want to rely on external services during development, deployment or runtime (except for downloading <em>new</em> dependencies, of course)</li>
<li>Feature-completeness: I want to concatenate and minify my assets and serve them with cache headers</li>
</ul>


<h2>Using Sprockets</h2>

<p>To <strong>add a new dependency</strong>:</p>

<ol>
<li>Find a non-minified, browser-ready version of your dependency</li>
<li>Add it to <code>app/assets/javascripts/vendor/{library-name}-v{version-number}.js</code> (for example, <code>app/assets/javascripts/moment-v2.13.0.js</code>)</li>
<li>Require it in <code>application.js</code> with <code>//= require ./vendor/moment-v2.13.0</code></li>
<li>Access the global variable as needed in your app (eg <code>moment</code>)</li>
</ol>


<p>To <strong>update</strong> a dependency:</p>

<ol>
<li>Find a non-minified, browser-ready version of the updated dependency</li>
<li>Add it to <code>app/assets/javascripts/vendor/{library-name}-v{version-number}.js</code> and remove the <em>old</em> version from that directory</li>
<li>Update the <code>//= require</code> directive with the new version number</li>
<li>Check the dependency&rsquo;s changelog and update your app as needed. (Search your project for the global variable to find usages, eg <code>moment</code>.)</li>
</ol>


<p>To <strong>remove</strong> a dependency:</p>

<ol>
<li>Remove its file (<code>app/assets/javascripts/vendor/{library-name}-v{version-number}.js</code>)</li>
<li>Remove the <code>//= require</code> directive</li>
<li>Search your project for the global variable and remove all usages</li>
</ol>


<h2>Finding a browser-ready file</h2>

<p>This got its own page: <a href="http://rmosolgo.github.io/blog/2016/05/19/finding-a-browser-ready-file-for-sprockets/">Finding a browser-ready file</a>.</p>

<h2>Adding the file to <code>vendor/</code></h2>

<p>Use an <strong>unminified</strong> version of the library. It will help in debugging development and viewing diffs when you update the dependency. Have no fear, Sprockets will minify it for you for production.</p>

<p>Include the <strong>version number</strong> in the file name. This will give you more confidence in updating the library, since you&rsquo;ll know what version you&rsquo;re coming from.</p>

<h2>Integrating with Sprockets</h2>

<p>The <code>//= require ./vendor/{library}-v{version}</code> directive is your friend. Like an entry in <code>package.json</code>, it tells the reader what dependency you have.</p>

<p>Now, your library will be accessible by its global name, such as <code>React</code>, <code>d3</code> or <code>Immutable</code>.</p>

<p>Consuming a library via global variable is not ideal. But it <em>does</em> help you remember that, at the end of the day, the browser is one giant, mutable namespace, so you must be a good citizen! At least global variables can be grepped like any other dependency.</p>

<p>Consider isolating your dependency. For example, you could wrap <code>Pusher</code> in an application-specific event emitter. This way, when you update Pusher, you only have to check one file for its usages. (Some libraries are poor candidates for isolation. My app will never be isolated from React!)</p>

<h2>Caveats</h2>

<p>There are some things Sprockets doesn&rsquo;t provide for me, which I wish it did:</p>

<ul>
<li>Named imports: I wish there was a good alternative to global namespacing with Sprockets, but not yet. (It&rsquo;s not a deal breaker &mdash; it doesn&rsquo;t hurt to be familiar with this constraint because it&rsquo;s the reality of the browser, anyways.)</li>
<li>Tree shaking: It wish I could only transmit the parts of Underscore.js I actually used!</li>
</ul>


<p>Perhaps I should read up on Sprockets and submit a patch üòé</p>

<p>Also, there&rsquo;s one case where copy-pasting isn&rsquo;t a great solution. Some libraries (like React.js) have <em>separate</em> &ldquo;development&rdquo; and &ldquo;production&rdquo; builds. The production build has fewer runtime checks than the development build, making it smaller and faster. There are a few solutions to this problem:</p>

<ul>
<li>Use a gem which provides the proper file for each environment (like <code>react-rails</code>)</li>
<li>Add environment-specific folders to the asset pipeline (like <code>react-rails</code> does, I can write more on this if need be)</li>
<li>Use the development build in productiosn (weigh the costs first: what&rsquo;s the difference in behavior, performance and file size?)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Class, meet Elixir Module]]></title>
    <link href="http://rmosolgo.github.io/blog/2016/05/01/ruby-class-meet-elixir-module/"/>
    <updated>2016-05-01T11:10:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2016/05/01/ruby-class-meet-elixir-module</id>
    <content type="html"><![CDATA[<p>Elixir modules offer some valuable insight into designing Ruby classes.</p>

<!-- more -->


<p>Ruby classes combine <em>data</em> and <em>behavior</em> in a typically object-oriented way:</p>

<ul>
<li><strong>data:</strong> instances of the class hold state in instance variables</li>
<li><strong>behavior:</strong> methods on the class alter state.</li>
</ul>


<p>Elixir modules also combine data and behavior:</p>

<ul>
<li><strong>data:</strong> the module&rsquo;s eponymous struct defines an immutable data structure</li>
<li><strong>behavior:</strong> the module&rsquo;s functions define state transformations, often taking the struct as input</li>
</ul>


<p>Perhaps we can combine these ideas to gain some functional-style benefits in Ruby!</p>

<h2>Data: Problem</h2>

<p>Ruby&rsquo;s mutable values open the door to errors caused by out-of-sight state changes. Here&rsquo;s a simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># mutate the passed-in array üòà</span>
</span><span class='line'><span class="k">def</span> <span class="nf">cause_mayhem</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">top_scores</span> <span class="o">=</span> <span class="o">[</span><span class="mi">98</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">89</span><span class="o">]</span>
</span><span class='line'><span class="n">cause_mayhem</span><span class="p">(</span><span class="n">top_scores</span><span class="p">)</span>
</span><span class='line'><span class="n">top_scores</span><span class="o">.</span><span class="n">max</span> <span class="c1"># ArgumentError: comparison of Fixnum with nil failed</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unbeknownst to the user, <code>cause_mayhem</code> <em>altered</em> the array. It wasn&rsquo;t equal to its original value anymore! This is possible with many common objects in Ruby programming , eg <code>String</code>, <code>Hash</code>, <code>ActiveRecord::Base</code>, <code>ActiveRecord::Relation</code> and <code>ActionController::Params</code>.</p>

<p>When you pass a value to another method, you have <em>no way</em> to know how your value will be affected. Maybe it will be changed under your feet!</p>

<p>Elixir&rsquo;s immutable values offer a solution to this pitfall. When you pass a value to a function, your value won&rsquo;t be changed because it&rsquo;s <em>impossible</em> to change it!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">cause_mayhem</span> <span class="o">=</span> <span class="k">fn</span><span class="p">(</span><span class="n">list</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="m">99999</span> <span class="o">|</span> <span class="n">list</span><span class="p">]</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">top_scores</span> <span class="o">=</span> <span class="p">[</span><span class="m">98</span><span class="p">,</span> <span class="m">95</span><span class="p">,</span> <span class="m">89</span><span class="p">]</span>
</span><span class='line'><span class="n">cause_mayhem</span><span class="o">.</span><span class="p">(</span><span class="n">top_scores</span><span class="p">)</span> <span class="c1"># =&gt; [99999, 98, 95, 89]</span>
</span><span class='line'><span class="no">Enum</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">top_scores</span><span class="p">)</span>      <span class="c1"># =&gt; 98</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although <code>cause_mayhem</code> returned a <em>new</em> list, it didn&rsquo;t alter the existing list. Changing the value of an existing item is impossible with Elixir! Because of this, you never have to worry about passing your value to another function. It <em>can&rsquo;t</em> mess up existing code!</p>

<h2>Data: Solution</h2>

<p>The Ruby solution is to write classes whose state is immutable.</p>

<p>A <em>mutable</em> class is one whose instance variables change during its lifetime. An <em>immutable</em> class is one whose instance variables <em>never</em> change during its lifetime.</p>

<p>Here&rsquo;s an example of refactoring a mutable class to be immutable.</p>

<p>First, a mutable <code>Counter</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MutableCounter</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:count</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Adds one to the internal value</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">increment</span>
</span><span class='line'>    <span class="vi">@count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, here&rsquo;s the problem with this class. It leads to unpredictable code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">counter</span> <span class="o">=</span> <span class="no">MutableCounter</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">counter</span><span class="o">.</span><span class="n">count</span>         <span class="c1"># =&gt; 0</span>
</span><span class='line'><span class="n">counter</span><span class="o">.</span><span class="n">increment</span>
</span><span class='line'><span class="n">counter</span><span class="o">.</span><span class="n">count</span>         <span class="c1"># =&gt; 1</span>
</span><span class='line'><span class="n">cause_mayhem</span><span class="p">(</span><span class="n">counter</span><span class="p">)</span>
</span><span class='line'><span class="n">counter</span><span class="o">.</span><span class="n">count</span>         <span class="c1"># =&gt; ????</span>
</span></code></pre></td></tr></table></div></figure>


<p>It could be mutated by <code>cause_mayhem</code>&hellip; but we have no idea!</p>

<p>Next, an immutable <code>Counter</code> class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ImmutableCounter</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:count</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="ss">count</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@count</span> <span class="o">=</span> <span class="n">count</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Return a _new_ ImmutableCounter with an incremented count</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">increment</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">count</span><span class="p">:</span> <span class="vi">@count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>No matter how you call methods on that object, its <code>@count</code> will not change after initialization.</p>

<p>Here&rsquo;s our problem code again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">counter</span> <span class="o">=</span> <span class="no">ImmutableCounter</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">counter</span><span class="o">.</span><span class="n">count</span>         <span class="c1"># =&gt; 0</span>
</span><span class='line'><span class="n">counter</span> <span class="o">=</span> <span class="n">counter</span><span class="o">.</span><span class="n">increment</span>
</span><span class='line'><span class="n">counter</span><span class="o">.</span><span class="n">count</span>         <span class="c1"># =&gt; 1</span>
</span><span class='line'><span class="n">cause_mayhem</span><span class="p">(</span><span class="n">counter</span><span class="p">)</span>
</span><span class='line'><span class="n">counter</span><span class="o">.</span><span class="n">count</span>         <span class="c1"># =&gt; 1 üéä  </span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s no way <code>cause_mayhem</code> could alter our counter!</p>

<p><strong>But,</strong> what if you <em>want</em> to alter the value by some other method?</p>

<p>Easy: just make the method <em>return</em> the value you want to use. Here&rsquo;s a modified example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Increment the counter three times and return the new one</span>
</span><span class='line'><span class="k">def</span> <span class="nf">modify_counter</span><span class="p">(</span><span class="n">counter</span><span class="p">)</span>
</span><span class='line'>  <span class="n">counter</span> <span class="o">=</span> <span class="n">counter</span><span class="o">.</span><span class="n">increment</span>
</span><span class='line'>  <span class="n">counter</span> <span class="o">=</span> <span class="n">counter</span><span class="o">.</span><span class="n">increment</span>
</span><span class='line'>  <span class="n">counter</span> <span class="o">=</span> <span class="n">counter</span><span class="o">.</span><span class="n">increment</span>
</span><span class='line'>  <span class="n">counter</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># usage:</span>
</span><span class='line'>
</span><span class='line'><span class="n">counter</span> <span class="o">=</span> <span class="no">ImmutableCounter</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">counter</span><span class="o">.</span><span class="n">count</span>             <span class="c1"># =&gt; 0</span>
</span><span class='line'><span class="c1"># store the old counter, just for example:</span>
</span><span class='line'><span class="n">previous_counter</span> <span class="o">=</span> <span class="n">counter</span>
</span><span class='line'><span class="c1"># reassign the counter</span>
</span><span class='line'><span class="n">counter</span> <span class="o">=</span> <span class="n">modify_counter</span><span class="p">(</span><span class="n">counter</span><span class="p">)</span>
</span><span class='line'><span class="c1"># counter has the new value:</span>
</span><span class='line'><span class="n">counter</span><span class="o">.</span><span class="n">count</span>           <span class="c1"># =&gt; 3</span>
</span><span class='line'><span class="c1"># previous_counter was unchanged:</span>
</span><span class='line'><span class="n">previous_counter</span><span class="o">.</span><span class="n">count</span>  <span class="c1"># =&gt; 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the caller must <em>explicitly</em> receive the new value from the function. This makes it obvious to the reader that the function returned a new, useful value!</p>

<h2>Behavior: Problem</h2>

<p>In Ruby, classes express <em>behavior</em> by exposing public methods. These methods may alter internal state (like <code>MutableCounter#increment</code>). Shared code may be DRYed up by being relocated to a private method.</p>

<p>Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BaseballTeam</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_player</span><span class="p">(</span><span class="n">player</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@players</span> <span class="o">&lt;&lt;</span> <span class="n">player</span>
</span><span class='line'>    <span class="c1"># reset cached averages, etc:</span>
</span><span class='line'>    <span class="n">update_team_aggregates</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem is that state changes are scattered throughout the code. Some are visible inline, some are out-of-sight. This makes <code>BaseballTeam</code> harder to understand.</p>

<p>To learn the behavior of <code>add_player</code>, must also know the behavior of <code>update_team_aggregates</code>. <em>Any</em> part of the <code>BaseballTeam</code>&rsquo;s internal state could have been altered in any way! At the end of the method body, there&rsquo;s no guarantee that <code>@players</code> contains the same objects it at the start of the method body. üò¢.</p>

<p>In Elixir, any behavior that <em>would</em> mutate an object actually creates a <em>new</em> object. The analogous code is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">BaseballTeam</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">add_player</span><span class="p">(</span><span class="n">team</span><span class="p">,</span> <span class="n">player</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">players</span> <span class="o">=</span> <span class="p">[</span><span class="n">player</span> <span class="o">|</span> <span class="n">team</span><span class="o">.</span><span class="n">players</span><span class="p">]</span>
</span><span class='line'>    <span class="p">[</span><span class="n">avg_batting_avg</span><span class="p">,</span> <span class="n">avg_salary</span><span class="p">,</span> <span class="n">avg_pitching_record</span><span class="p">]</span> <span class="o">=</span> <span class="n">calculate_aggregates</span><span class="p">(</span><span class="n">players</span><span class="p">)</span>
</span><span class='line'>    <span class="err">%</span><span class="p">{</span><span class="n">team</span> <span class="o">|</span> <span class="ss">players:</span> <span class="n">players</span><span class="p">,</span> <span class="ss">avg_batting_avg:</span> <span class="n">avg_batting_avg</span><span class="p">,</span> <span class="ss">avg_salary:</span> <span class="n">avg_salary</span><span class="p">,</span> <span class="ss">avg_pitching_record:</span> <span class="n">avg_pitching_record</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, it&rsquo;s clear exactly which keys of the <code>BaseballTeam</code> struct are updated when a players is added. It&rsquo;s impossible for <code>calculate_aggregates</code> to alter any other part of the <code>team</code>!</p>

<h2>Behavior: Solution</h2>

<p>The Ruby solution is to write methods as pure functions, that is, methods which use their arguments as their <em>only</em> input (no accessing <code>self</code>) and provide a return value as their <em>only</em> output (no side-effects).</p>

<p>Here&rsquo;s a rewritten Ruby example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BaseballTeam</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_player</span><span class="p">(</span><span class="n">player</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@players</span> <span class="o">&lt;&lt;</span> <span class="n">player</span>
</span><span class='line'>    <span class="vi">@avg_batting_avg</span><span class="p">,</span> <span class="vi">@avg_salary</span><span class="p">,</span> <span class="vi">@avg_pitching_record</span> <span class="o">=</span> <span class="n">calculate_aggregates</span><span class="p">(</span><span class="vi">@players</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, it&rsquo;s obvious which members of the <code>team</code>&rsquo;s internal state will be modified by <code>add_player</code>. However, a developer <em>could</em> break the purely functional contract of <code>calculate_aggregates</code>.</p>

<p>To avoid that, refactor <code>BaseballTeam</code> to be a composition of <code>@players</code> and <code>@aggregates</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BaseballTeam</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">AggregateStats</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">players</span><span class="p">)</span>
</span><span class='line'>     <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_player</span><span class="p">(</span><span class="n">player</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@players</span> <span class="o">&lt;&lt;</span> <span class="n">player</span>
</span><span class='line'>    <span class="vi">@aggregates</span> <span class="o">=</span> <span class="no">AggregateStats</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@players</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Aggregate methods delegate to the AggregateStats object:</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">avg_salary</span>
</span><span class='line'>    <span class="vi">@aggregates</span><span class="o">.</span><span class="n">avg_salary</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Further defensive techniques could be taken, such as:</p>

<ul>
<li>Creating a <em>new</em> <code>@players</code> array instead of mutating the existing one.</li>
<li>Freezing <code>@players</code> to prevent other code from changing it</li>
</ul>


<p>Those measures would guarantee correct state, but they may be &ldquo;overkill&rdquo; for some uses!</p>

<h2>Conclusion</h2>

<p>I can&rsquo;t magically transform my Ruby app into an Elixir app, but I <em>can</em> take some of the lessons learned from Elixir and apply them to Ruby code! Plus, Ruby gives us the ability to mutate state when necessary (for example, when performance is critical).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using GraphQL without Relay]]></title>
    <link href="http://rmosolgo.github.io/blog/2016/03/03/using-graphql-without-relay/"/>
    <updated>2016-03-03T10:01:00-05:00</updated>
    <id>http://rmosolgo.github.io/blog/2016/03/03/using-graphql-without-relay</id>
    <content type="html"><![CDATA[<p>Although <a href="http://facebook.github.io/relay/">Relay</a> made <a href="facebook.github.io/graphql">GraphQL</a> famous, GraphQL was in use at Facebook for years before Relay took the scene. You can use plain AJAX requests to interact with a GraphQL server, too.</p>

<!-- more -->


<p>GraphQL servers like <a href="https://github.com/graphql/express-graphql"><code>express-graphql</code></a> or <a href="https://github.com/rmosolgo/graphql-ruby-demo"><code>graphql-ruby</code> on Rails</a> expose a single endpoint which responds to queries.</p>

<p>The endpoint accepts a few parameters:</p>

<ul>
<li><code>query</code>: The GraphQL query string to execute</li>
<li><code>variables</code>: Runtime values for variables in the GraphQL query</li>
<li><code>operationName</code>: if <code>query</code> contains multiple operations, you must tell the server which <em>one</em> to execute</li>
</ul>


<p>Given this interface, you can even use jQuery as a GraphQL client! Here&rsquo;s how you would use <code>$.post</code> to interact with the server.</p>

<h2>1. Build and send query strings</h2>

<p>In your JavaScript, you could dynamically build a GraphQL query, then post it to the server.</p>

<p>For example, if you were searching users by name, you might use this function to build a query string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">usersByNameQuery</span><span class="p">(</span><span class="nx">searchTerm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// GraphQL requires double-quoted strings in the query:</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;{ users(search: &quot;&#39;</span> <span class="o">+</span> <span class="nx">searchTerm</span> <span class="o">+</span> <span class="s1">&#39;&quot;) { name, id }  }&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">usersByNameQuery</span><span class="p">(</span><span class="s2">&quot;bob&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// &quot;{ users(search: &quot;bob&quot;) { name, id }  }&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, you can post the query with <code>$.post</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">usersByNameQuery</span><span class="p">(</span><span class="s2">&quot;bob&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&quot;/graphql&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">query</span><span class="o">:</span> <span class="nx">query</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">errors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// handle errors</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// use response.data</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the callback, you can check for errors and use the response&rsquo;s <code>data</code>.</p>

<h2>2. Send query <em>and</em> variables</h2>

<p>Often, we know our data requirements ahead of time. That is, we know what values we need to render our UI. In this case, we can <em>separate</em> the query structure and runtime values into <code>query</code> and <code>variables</code>.</p>

<p>Here&rsquo;s how we could adapt our previous example to separate the query from its values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// ES6 backtick-quoted string</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">searchByNameQuery</span> <span class="o">=</span> <span class="err">`</span>
</span><span class='line'><span class="nx">query</span> <span class="nx">searchByName</span><span class="p">(</span><span class="nx">$searchTerm</span><span class="o">:</span> <span class="nb">String</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">users</span><span class="p">(</span><span class="nx">search</span><span class="o">:</span> <span class="nx">$searchTerm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>
</span><span class='line'>    <span class="nx">id</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">fetchUsersByName</span><span class="p">(</span><span class="nx">searchTerm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">query</span><span class="o">:</span> <span class="nx">searchByNameQuery</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">variables</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// This will be used as `$searchTerm` by the server:</span>
</span><span class='line'>      <span class="nx">searchTerm</span><span class="o">:</span> <span class="nx">searchTerm</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&quot;/graphql&quot;</span><span class="p">,</span> <span class="nx">payload</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">errors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// handle errors ...</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// use response.data</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, we always send the <em>same</em> query string, but we change the <code>variables</code> for each request.</p>

<p>This setup is easier to maintain because the query string is so easy to read. Any changes to it will be easy to see in a pull request.</p>

<h1>3. (future) Store query strings on the server</h1>

<p>Maybe you noticed an optimization waiting to happen: since we always send the same query string, why send it at all? We could store it on the server ahead of time, then call it by name at runtime.</p>

<p>I heard that Facebook&rsquo;s GraphQL server had this behavior, but I don&rsquo;t know that any of the open implementations have it yet. I&rsquo;m <a href="https://github.com/rmosolgo/graphql-ruby/pull/76">considering it for <code>graphql-ruby</code></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How many assertions per test case?]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/10/08/how-many-assertions-per-test-case/"/>
    <updated>2015-10-08T21:12:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/10/08/how-many-assertions-per-test-case</id>
    <content type="html"><![CDATA[<p>This question is too hard. Instead, ask, &ldquo;how many behaviors per test case?&rdquo; and answer, &ldquo;one.&rdquo;</p>

<!-- more -->


<p>I presented at Full Stack about unit testing but what I really like is behavior-driven development.</p>

<h2>A Behavior</h2>

<p>You can think of a code base as a collection of behaviors: given some inputs (data, events), it makes some outputs (more data, more events). In this perspective, the code itself is an implementation detail. As long as it takes the inputs and creates the outputs, it makes little difference what classes, methods, functions etc, implement that behavior.</p>

<p>This kind of thinking is recursive: each behavior is composed of smaller behaviors. For example, in a web application:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Behavior:
</span><span class='line'>  - A request with a valid username & password is allowed to take Action X
</span><span class='line'>
</span><span class='line'>    Is composed of:
</span><span class='line'>      - The user info is stored in the session
</span><span class='line'>      - The user's `last_logged_in_at` is updated
</span><span class='line'>      - Value Y is written to the database</span></code></pre></td></tr></table></div></figure>


<p>Each subsequent level of behavior may have an implementation of its own.</p>

<h2>Testing a behavior</h2>

<p>In a web application, unauthorized requests:</p>

<ul>
<li>Return meaningful HTTP responses, including a status and a body; and</li>
<li>do not execute the requested action</li>
</ul>


<p>I would specify that as two <em>behaviors</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;an unauthorized request&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;responds as not authorized&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">http_response</span> <span class="o">=</span> <span class="n">make_create_request</span> <span class="c1"># makes a unauthorized_request</span>
</span><span class='line'>    <span class="n">assert_equal</span><span class="p">(</span><span class="mi">403</span><span class="p">,</span> <span class="n">http_response</span><span class="o">.</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span><span class="p">(</span><span class="s2">&quot;Not Authorized&quot;</span><span class="p">,</span> <span class="n">http_response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;doesn&#39;t write to the database&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">http_response</span> <span class="o">=</span> <span class="n">make_create_request</span> <span class="c1"># makes a unauthorized_request</span>
</span><span class='line'>    <span class="n">assert_equal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="no">Posts</span><span class="o">.</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>(using <a href="https://github.com/seattlerb/minitest#specs">minitest/spec</a>)</p>

<p>Notice that the first test made <em>two</em> assertions. You could split that into three test cases but I don&rsquo;t think it&rsquo;s worth the trouble. What&rsquo;s the case where <code>403</code> and <code>"Not Authorized"</code> are not part of the same behavior?</p>

<h2>Multiple Assertions is a Code Smell</h2>

<p>If your test case has many assertions, your code may be telling you that you&rsquo;re specifying multiple behaviors at once. Ask yourself:</p>

<ul>
<li>Is there a smaller unit of work to extract?</li>
<li>Can I make this a two-step process, where step one&rsquo;s result is passed to step two?</li>
<li>Can I break each test case (and its corresponding code) into a distinct <a href="http://c2.com/cgi/wiki?StrategyPattern">strategy</a>?</li>
<li>Am I testing business logic <em>and</em> interaction with an external service (eg, your database or an HTTP service)? Can I separate the two actions?</li>
<li>Am I transforming data, then acting based on the result? Can I separate those two?</li>
<li>Are there assertions that are shared between multiple test cases? Is there an underlying behavior there?</li>
</ul>


<h2>Other People on The Internet</h2>

<p>Here&rsquo;s some more dignified reading on the topic:</p>

<ul>
<li><strong><a href="http://dannorth.net/introducing-bdd/">&ldquo;Introducing BDD,&rdquo; Dan North</a></strong>. I especially agree with his point that behavior-driving thinking helps you focus your design and implementation.</li>
<li><strong><a href="http://blog.jayfields.com/2007/06/testing-one-assertion-per-test.html">&ldquo;Testing One Assertion Per Test,&rdquo; Jay Fields</a></strong>. I basically agree with him: &ldquo;Tests that focus on one behavior of the system are almost always easier to write and to comprehend at a later date.&rdquo; But I disagree with his assumption that one behavior equals one assertion.</li>
<li><strong><a href="http://programmers.stackexchange.com/a/7829">&ldquo;Is it OK to have multiple asserts in a single unit test?&rdquo;, random Stack Overflow people</a></strong>. &ldquo;Yeah, but try not to.&rdquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crystal First Impressions]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/09/27/crystal-first-impressions/"/>
    <updated>2015-09-27T21:47:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/09/27/crystal-first-impressions</id>
    <content type="html"><![CDATA[<p>The <a href="http://crystal-lang.org/">Crystal programming language</a> combines Ruby-like syntax with a really powerful compiler. As a result, it&rsquo;s fun to write, fast to run, and hard to screw up!</p>

<!-- more -->


<p>My Crystal experience so far:</p>

<ul>
<li><a href="https://github.com/danott">danott</a> mentioned it in our Slack a few weeks ago</li>
<li>I read the great <a href="http://crystal-lang.org/docs/">Crystal docs</a></li>
<li>I cobbled together <a href="https://github.com/rmosolgo/crythtal">a lisp (barely)</a></li>
</ul>


<p>I&rsquo;d say it&rsquo;s a combination of:</p>

<ul>
<li>a more-stable-Ruby (like Elixir, but without Erlang)</li>
<li>a developer-friendly, life-embetter-ing type system (like Elm, but &hellip; not JavaScript)</li>
<li>a real compiler! (like C, but fun to read and write)</li>
</ul>


<p>Um, what else could you want?! (See last paragraph üòõ)</p>

<h2>Crystal Syntax</h2>

<p>Crystal brings the best of Ruby:</p>

<ul>
<li><strong>Concise literals</strong>, just like Ruby (take it for granted until you use regexps in Python üôÄ)</li>
<li><strong>Great OO support</strong>, classes &amp; modules just like Ruby</li>
<li><strong>Attractive syntax</strong> thanks to blocks, operator overloading and optional parens</li>
<li><strong>consistent</strong>, predictable standard library (like Ruby)</li>
</ul>


<p>Plus, some improvements over Ruby:</p>

<ul>
<li><strong>Method overloading</strong></li>
<li>Python-like <strong>keyword args</strong>: must have default value, may be passed as kwargs or positional args (I could go either way on this since Ruby 2.1, but it beats <code>options={}</code>)</li>
<li>More robust <strong>Proc literals</strong>, reminded me of Elixir</li>
<li>Convention: <strong><code>?</code> methods return maybe-nil types</strong>, while their counterparts raise on nil</li>
<li>First-class <strong>enums</strong> &amp; <strong>tuples</strong></li>
<li><strong>Immutable strings</strong>, like Ruby 3 will have (?)</li>
</ul>


<p>For completeness, you lose some things from Ruby:</p>

<ul>
<li>Runtime <strong>code creation</strong>, like <code>define_method</code> &amp; friends</li>
<li>Runtime <strong>code evaluation</strong>, like <code>eval</code> &amp; friends</li>
</ul>


<p>Crystal offers a powerful <strong>macro system</strong> that makes up for the loss of runtime metaprogramming. Unlike C preprossing, Crystal macros are awesome. You basically define functions which are called at compile-time, then generate code with liquid-like syntax.</p>

<h2>Crystal Typing</h2>

<h3>Inferring Types</h3>

<p>Crystal infers types from your code, so these are OK:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_string</span> <span class="o">=</span> <span class="s2">&quot;Hello World&quot;</span>
</span><span class='line'><span class="c1"># String</span>
</span><span class='line'><span class="n">my_hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">key</span><span class="p">:</span> <span class="s2">&quot;value&quot;</span><span class="p">,</span> <span class="ss">key2</span><span class="p">:</span> <span class="s2">&quot;value2&quot;</span><span class="p">}</span>
</span><span class='line'><span class="c1"># Hash(Symbol, String)</span>
</span><span class='line'><span class="n">my_array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="c1"># Array(Int32)</span>
</span></code></pre></td></tr></table></div></figure>


<p>When types mix, Crystal automatically unions them. It will ensure any usages of the variable in question are valid for both types. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_variable</span> <span class="o">=</span> <span class="s2">&quot;string&quot;</span>
</span><span class='line'><span class="n">my_variable</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="c1"># String | Int32</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Ok, because String &amp; Int32 both implement #to_f</span>
</span><span class='line'><span class="n">my_variable</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># You can add runtime checks to call type-specific methods</span>
</span><span class='line'><span class="k">if</span> <span class="n">my_variable</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span>
</span><span class='line'>  <span class="n">my_variable</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are some times you need to define types to help the compiler. For example, there aren&rsquo;t any values here to tell the compiler what to expect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">some_array</span> <span class="o">=</span>  <span class="o">[]</span> <span class="n">of</span> <span class="no">Int32</span>
</span><span class='line'><span class="c1"># You can use custom types, too</span>
</span><span class='line'><span class="n">some_hash</span> <span class="o">=</span>   <span class="p">{}</span> <span class="n">of</span> <span class="no">Symbol</span> <span class="o">=&gt;</span> <span class="no">SomeCustomClass</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Goodbye, NoMethodErrors</h3>

<p>If you&rsquo;re like me, you hate this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`whatever&#39; for nil:NilClass</span>
</span></code></pre></td></tr></table></div></figure>


<p>Something somehow became nil. üò¢</p>

<p>Instead, Crystal reads your code, and if there&rsquo;s somewhere a value could be nil, it throws a compile error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">in</span> <span class="o">.</span><span class="n">/src</span><span class="o">/</span><span class="n">lisp</span><span class="o">/</span><span class="nb">binding</span><span class="o">.</span><span class="n">cr</span><span class="p">:</span><span class="mi">55</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="s1">&#39;find_owner&#39;</span> <span class="k">for</span> <span class="no">Nil</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@parent</span><span class="o">.</span><span class="n">find_owner</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>              <span class="o">^~~~~~~~~~</span>
</span></code></pre></td></tr></table></div></figure>


<p>You have two options:</p>

<ul>
<li>Add an explicit not-nil check (<code>if object.is_a?(String) ...</code>) so the compiler knows it will be safe</li>
<li>Refactor so the value won&rsquo;t be nil</li>
</ul>


<p>Of course, the first one seems better at the start, but I hope to get better at the second one üòÅ.</p>

<h2>What&rsquo;s Missing?</h2>

<p>Crystal really shows its youth. Its shortcomings all fall in that vein:</p>

<ul>
<li><strong>Poorly documented</strong>, which isn&rsquo;t so bad if you&rsquo;re coming from Ruby</li>
<li><strong>Few projects</strong> out there (I think the <a href="http://crystalshards.herokuapp.com/">package repository is a free Heroku app</a>)</li>
<li>Standard library has <strong>some kinks</strong>, they say it is still changing</li>
</ul>


<p>One example of a standard library kink is the handling of <code>break</code>, <code>next</code> and <code>return</code> in blocks. If you want to exit a block early, you have to choose one of those three. The problem is that, to choose the right one, you have to know whether the method captures the block into a proc or simply yields values to it. It&rsquo;s a drag to have to know a method&rsquo;s implementation to call it! (IRL, I didn&rsquo;t run into this and I suspect it would be easy enough to work around it.)</p>

<h2>Now What?</h2>

<p>I really liked Crystal and I hope I can work with it more!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Communion as "Bread from Heaven"]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/08/08/communion-as-bread-from-heaven/"/>
    <updated>2015-08-08T08:45:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/08/08/communion-as-bread-from-heaven</id>
    <content type="html"><![CDATA[<p>The Christian practice of communion is a reminder of why Jesus is important and how his life affects us. To see the full depth of it, you have to consider pre-Christian religion.</p>

<!-- more -->


<h3>Before Jesus: Manna Was &ldquo;Bread from Heaven&rdquo;</h3>

<p>When the Israelites left Egypt, they spent 40 years in the desert as nomads. During this time, their primary sustenance was a food called &ldquo;manna&rdquo; (lit. <em>What is it?</em>). Every morning, it appeared on the surface of the ground. People milled it into flour, then baked cakes with it. This food couldn&rsquo;t be kept overnight; it would spoil.</p>

<p>During this time, God sustained people in a very tangible way. They would have starved in the desert if he hadn&rsquo;t provided them with this miraculous food. The people had no choice but trust God to provide it each day.</p>

<p>(Descriptions of manna: <a href="http://www.esvbible.org/Ex16/">Exodos 16</a>, <a href="http://www.esvbible.org/Nu11/">Numbers 11</a>)</p>

<h3>Before Jesus: Sacrificed Meat</h3>

<p>Part of the Israelites&#8217; relationship with God was animal sacrifice. In short, sacrifices served as &ldquo;bridges&rdquo; between the supplicants (who were imperfect) and God (who was perfect). An animal would be killed, then some parts were burned on the altar. Other parts were given to the priests, to be eaten by them.</p>

<p>In this way, the sacrifice served a double purpose of providing access to God <em>and</em> providing food for full-time clergy.</p>

<p>(Priests eat meat: <a href="http://www.esvbible.org/Lv7:28-36/">Leviticus 7</a>, <a href="http://www.esvbible.org/1Cor9:13/">1 Corinthians 9</a>)</p>

<h3>Jesus Is &ldquo;Bread from Heaven&rdquo;</h3>

<p>These two points provide a backdrop for Jesus&rsquo;s claims:</p>

<blockquote><p>&ldquo;I am the bread of life. Your fathers ate the manna in the wilderness, and they died.  This is the bread that comes down from heaven, so that one may eat of it and not die. I am the living bread that came down from heaven. If anyone eats of this bread, he will live forever. And the bread that I will give for the life of the world is my flesh.‚Äù</p>

<p>The Jews then disputed among themselves, saying, ‚ÄúHow can this man give us his flesh to eat?‚Äù</p>

<p>So Jesus said to them, ‚ÄúTruly, truly, I say to you, unless you eat the flesh of the Son of Man and drink his blood, you have no life in you. Whoever feeds on my flesh and drinks my blood has eternal life, and I will raise him up on the last day.</p></blockquote>

<p>(source: <a href="http://www.esvbible.org/Jn6:22/">John 6</a>)</p>

<p>Here, Jesus united the traditions of sacrifice and &ldquo;bread from heaven&rdquo;:</p>

<ul>
<li>Jesus <em>himself</em> is some kind of better bread than manna.</li>
<li>To eat this bread, you must <em>eat his flesh</em>. (Yuck!?)</li>
<li>As the &ldquo;living bread&rdquo;, Jesus provides <em>absolute</em> sustenance: those who eat it have &ldquo;eternal life&rdquo;, meaning that they&rsquo;ll enjoy eternity in union with God after Jesus&rsquo;s return (cf &ldquo;raised up on the last day&rdquo;).</li>
</ul>


<p>On the night before his arrest (ie, during the &ldquo;last supper&rdquo;), Jesus made this idea concrete:</p>

<blockquote><p>And he took bread, and when he had given thanks, he broke it and gave it to them, saying, ‚ÄúThis is my body, which is given for you. Do this in remembrance of me.‚Äù</p>

<p>And likewise the cup after they had eaten, saying, &ldquo;This cup that is poured out for you is the new covenant in my blood.&rdquo;</p></blockquote>

<p>(source: <a href="http://www.esvbible.org/Lk22:19/">Luke 22</a>)</p>

<p>This instituted the practice of communion, also called the Lord&rsquo;s supper. Communion is a reflection of some points of faith:</p>

<ul>
<li>The bread &amp; wine are <em>imperfect pointers</em> to a perfect &ldquo;food&rdquo;, which is Jesus himself.</li>
<li>Although bread sustains you for short time, believing in Jesus provides eternal life upon Jesus&rsquo;s return.</li>
<li>The bread &amp; wine are stand-ins for Jesus&rsquo;s <em>flesh and blood</em> (üò≥), and by eating it, we remember Jesus as a sacrifice in both ways mentioned above:

<ul>
<li>Jesus bridges the gap between us and God, allowing us to have a relationship with God</li>
<li>Jesus provides sustenance for day-to-day life (by way of faith in him, in the form of hope for his kingdom to come).</li>
</ul>
</li>
</ul>


<p>These are the reasons I enjoy communion. It&rsquo;s a reminder of how God made peace with me, a sinner, by Jesus&rsquo;s sacrifice. As a result, I can trust God to forgive my sin, sustain me in day-to-day life <em>and</em> &ldquo;raise [me] up on the last day&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authorization in GraphQL]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/08/04/authorization-in-graphql/"/>
    <updated>2015-08-04T10:19:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/08/04/authorization-in-graphql</id>
    <content type="html"><![CDATA[<p>A <a href="http://facebook.github.io/graphql/">GraphQL</a> system works differently from a &ldquo;traditional&rdquo; RESTful JSON API. Instead of authenticating during controller actions, you can authenticate users with &ldquo;query context.&rdquo;</p>

<!-- more -->


<h2>Query Context</h2>

<p>GraphQL execution systems should allow the consumer to pass some arbitrary data &ldquo;through&rdquo; the query, so it is accessible at any time during execution. For example, you could take some information from an HTTP request, pass it into the query, then use that information during field resolution.</p>

<p>You can see this idea at work in <a href="https://github.com/graphql/graphql-js/tree/v0.2.4">graphql-js 0.2.4</a>:</p>

<ul>
<li>An arbitrary value enters the <code>execute</code> function <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L108">as <code>rootValue</code></a> and is <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L119">built into <code>context</code></a></li>
<li>Execution context is <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L203-L206">passed to <code>executeFields</code></a></li>
<li><code>rootValue</code> is <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L489">drawn back out and passed</a> to fields&#8217; resolve functions, where it is the <a href="https://github.com/graphql/graphql-js/blob/v0.2.4/src/execution/execute.js#L663">third argument</a></li>
</ul>


<p>This way, any value that you pass to <code>execute</code> is passed along to any field resolution.</p>

<p><a href="https://github.com/rmosolgo/graphql-ruby">graphql-ruby</a> also implements this idea:</p>

<ul>
<li><code>Query#new</code> accepts <a href="https://github.com/rmosolgo/graphql-ruby/blob/adcf3c8ee83ba06232d71df1a2360bc985caf4d3/lib/graph_ql/query.rb#L15">a <code>context:</code> keyword</a></li>
<li>That value is <a href="https://github.com/rmosolgo/graphql-ruby/blob/adcf3c8ee83ba06232d71df1a2360bc985caf4d3/lib/graph_ql/query.rb#L74">accessible through <code>Query::Context</code></a>,
which is <a href="https://github.com/rmosolgo/graphql-ruby/blob/adcf3c8ee83ba06232d71df1a2360bc985caf4d3/lib/graph_ql/field.rb#L54">passed to field resolution methods</a></li>
</ul>


<h2>Using Query Context for Authorization</h2>

<p>To implement authorization in GraphQL, you could use query context.
There are roughly two approaches:</p>

<h4>Pass a permission indicator into the query.</h4>

<p>Before executing the query, determine the permission level of the current user, then pass that into the query as context. That way, each field can test the permission level to determine how to resolve.</p>

<p>For example, in Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># pass the permission level in the context hash</span>
</span><span class='line'><span class="n">permission</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">permission</span>
</span><span class='line'><span class="n">query</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Query</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">MySchema</span><span class="p">,</span> <span class="n">query_string</span><span class="p">,</span> <span class="ss">context</span><span class="p">:</span> <span class="p">{</span><span class="ss">permission</span><span class="p">:</span> <span class="n">permission</span><span class="p">})</span>
</span><span class='line'><span class="n">query</span><span class="o">.</span><span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside a field, you could access <code>context[:permission]</code>, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Field</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">resolve</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># Check the permission level which was passed as context</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">context</span><span class="o">[</span><span class="ss">:permission</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;admin&quot;</span>
</span><span class='line'>      <span class="n">object</span><span class="o">.</span><span class="n">secret_info</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows you to access permission information without abusing the global scope.</p>

<h4>Pass the user object into the query.</h4>

<p>If your authentication scheme is more complex, you can pass the user object in to the query context.</p>

<p>For example, in Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Pass `current_user` in the context hash</span>
</span><span class='line'><span class="n">query</span> <span class="o">=</span> <span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Query</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">MySchema</span><span class="p">,</span> <span class="n">query_string</span><span class="p">,</span> <span class="ss">context</span><span class="p">:</span> <span class="p">{</span><span class="ss">user</span><span class="p">:</span> <span class="n">current_user</span><span class="p">})</span>
</span><span class='line'><span class="n">query</span><span class="o">.</span><span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>That way, fields can access the user object at resolve-time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">GraphQL</span><span class="p">:</span><span class="ss">:Field</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">resolve</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># Check the user which was passed as context</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">context</span><span class="o">[</span><span class="ss">:user</span><span class="o">].</span><span class="n">can?</span><span class="p">(</span><span class="ss">:read</span><span class="p">,</span> <span class="n">object</span><span class="p">)</span>
</span><span class='line'>      <span class="n">objects</span><span class="o">.</span><span class="n">secret_info</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you pass the user object into query context, you can use fine-grained authentication when resolving fields.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Ginger Ale]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/05/06/making-ginger-ale/"/>
    <updated>2015-05-06T17:50:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/05/06/making-ginger-ale</id>
    <content type="html"><![CDATA[<p>I had leftover whey after <a href="http://rmosolgo.github.io/blog/2015/04/27/making-yogurt/">making yogurt</a>, so I made ginger ale.</p>

<!-- more -->


<p>I followed <a href="http://www.instructables.com/id/Lacto-fermented-Ginger-Ale/">this recipe</a>. (I also tried making ricotta cheese and it was a total fail: it never curdled.)</p>

<p>Overall:</p>

<ul>
<li>It didn&rsquo;t do anything for 2 days, then it suddently showed signs of fermentation (namely, carbonation).</li>
<li>Next time, I&rsquo;ll bleed some CO2 as it goes. Maybe that would make it fizzier.</li>
</ul>


<h2>Mix</h2>

<p>I used a 2-liter soda bottle because the contents would become very pressurized. These bottles are designed to handle it!</p>

<p>I mixed honey (1 &frac12; cups, yum), lemon juice, grated ginger, and a bit of whey:</p>

<p><img src="http://rmosolgo.github.io/images/ginger_ale/mix.jpg" width="500"></p>

<p>Then I filled it almost to the top with water, leaving some space for CO2.</p>

<p>Lactic acid bacteria in the whey will eat sugar from the honey and turn it into lactic acid, CO2, and a tiny bit of alcohol.</p>

<h2>Wait</h2>

<p>The recipe said &ldquo;3 to 7 days&rdquo;. I left it for 4 days. It pretty much looked like this the whole time:</p>

<p><img src="http://rmosolgo.github.io/images/ginger_ale/wait.jpg" width="500"></p>

<p>(It&rsquo;s translucent and brown-ish, with little bubbles on the top.)</p>

<p>For the first 2 days, nothing happened. I was afraid it would be a failure like the ricotta.</p>

<p>On day 3, it was noticeably more pressurized.</p>

<p>By day 4, it was so pressurized that I thought it would explode in the kitchen, so I put it in the fridge.</p>

<p>It rested in the fridge for about 20 hours.</p>

<h2>Enjoy</h2>

<p>It turned out gingery, sweet, &amp; lightly carbonated:</p>

<p><img src="http://rmosolgo.github.io/images/ginger_ale/enjoy.jpg"></p>

<p>Next time, I&rsquo;ll try to make it more carbonated. I might also add less lemon juice &amp; more ginger.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Yogurt]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/04/27/making-yogurt/"/>
    <updated>2015-04-27T07:37:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/04/27/making-yogurt</id>
    <content type="html"><![CDATA[<p>This weekend I tried making yogurt. It worked!</p>

<!-- more -->


<p>I based it on this great recipe: <a href="http://biology.clc.uc.edu/Fankhauser/Cheese/yogurt_making/YOGURT2000.htm">Dr. David Fankhauser&rsquo;s Yogurt</a>. Dr. Fankhauser has a <a href="http://biology.clc.uc.edu/Fankhauser/Cheese/CHEESE.html">ton of illustrated, detailed recipes</a> for other dairy and make-at home foods (eg, <a href="http://biology.clc.uc.edu/fankhauser/Cheese/Blue_Cheese/Blue_Cheese.htm">blue cheese</a>, <a href="http://biology.clc.uc.edu/fankhauser/Buds_and_Bark/tapping_sugar_maple_index.html">maple syrup</a>, <a href="http://biology.clc.uc.edu/fankhauser/homesteading/popcorn_index.html">microwave popcorn</a>).</p>

<p>Some overall notes:</p>

<ul>
<li>My grocery store <em>doesn&rsquo;t carry</em> plain yogurt (except in giant containers), so I used <strong>greek yogurt as starter</strong>. It worked just fine.</li>
<li>The recipe called for 3 hours of culturing time, but I found <strong>longer (12-16 hours) was better</strong>.</li>
<li>I really fretted over the incubation temperature. I don&rsquo;t think that was necessary. I think <strong>set-it-and-forget-it would have been OK</strong>!</li>
<li>The resulting yogurt is as <strong>good</strong> as you can get at the store!</li>
<li>I&rsquo;m also looking forward to using the <strong>whey</strong> (pickles, ginger ale, ricotta cheese).</li>
</ul>


<h2>The Setup</h2>

<p>First, scald the milk to kill any unwanted cultures that may have survived pasteurization:</p>

<p><img src="http://rmosolgo.github.io/images/yogurt/scalding-milk.jpg" width="500"></p>

<p>Sterilize equipment in boiling water:</p>

<p><img src="http://rmosolgo.github.io/images/yogurt/sterilize-equipment.jpg" width="500"></p>

<p>Unwanted cultures could give the yogurt a bad taste.</p>

<h2>Incubation</h2>

<p>Mix a cup of store-bought yogurt into the milk, then distribute it into jars.</p>

<p>Put the jars in a cooler with 120¬∞F (50¬∞C) water:</p>

<p><img src="http://rmosolgo.github.io/images/yogurt/incubation-jars.jpg" width="500"></p>

<p>And let it sit:</p>

<p><img src="http://rmosolgo.github.io/images/yogurt/incubation.jpg" width="500"></p>

<p>I found longer was better. My longest was 16 hours and looked thick and good!</p>

<p>I was really fretting about the temperature: I occassionally scooped some water out, boiled it, then added it back. I think this was overkill!</p>

<h2>Result</h2>

<p>In the jar, the curds and whey separate:</p>

<p><img src="http://rmosolgo.github.io/images/yogurt/yogurt-in-jar.jpg" width="500"></p>

<p>The whey can be decanted:</p>

<p><img src="http://rmosolgo.github.io/images/yogurt/jar-of-whey.jpg" width="500"></p>

<p>(This is whey from a few jars of yogurt.)</p>

<p>Leaving only the yogurt curd:</p>

<p><img src="http://rmosolgo.github.io/images/yogurt/yogurt-curd-in-jar.jpg" width="500"></p>

<p>Yum! Smooth and creamy (after stirring), but unsweetened, so I add <a href="http://stuffdutchpeoplelike.com/2011/03/06/hagelslag/">hagelslag</a>:</p>

<p><img src="http://rmosolgo.github.io/images/yogurt/yogurt-in-bowl.jpg" width="500"></p>

<h2>Next</h2>

<p>I&rsquo;m looking forward to using the &ldquo;leftover&rdquo; whey to make:</p>

<ul>
<li><a href="http://immigrantstable.com/2013/11/17/whey-pickles/">whey pickles</a></li>
<li><a href="http://www.instructables.com/id/Lacto-fermented-Ginger-Ale/">ginger ale</a></li>
<li><a href="http://biology.clc.uc.edu/fankhauser/Cheese/Ricotta/ricotta_00.htm">ricotta</a> (also from Dr. Fankhauser)</li>
</ul>


<p>Also, in a few weeks I&rsquo;ll try to step up my game and try <a href="http://biology.clc.uc.edu/Fankhauser/Cheese/neufchatel/neufchatel.htm">Dr. Fankhauser&rsquo;s neufchatel</a>, which adds rennet to the mix.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Response to "Using a Ruby Class to Write Functional Code"]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/03/15/response-to-using-a-ruby-class-to-write-functional-code/"/>
    <updated>2015-03-15T14:29:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/03/15/response-to-using-a-ruby-class-to-write-functional-code</id>
    <content type="html"><![CDATA[<p>Pat Shaughnessy&rsquo;s <a href="http://patshaughnessy.net/2014/4/8/using-a-ruby-class-to-write-functional-code">&ldquo;Using a Ruby Class to Write Functional Code&rdquo;</a> gives an example of bringing functional programming principles into object-oriented design. I like it.</p>

<!-- more -->


<p>It Pat&rsquo;s example, he turns a group of pure functions into a class whose state is <em>immutable-ish</em> (they technically could be changed, but they aren&rsquo;t) &amp; whose methods are <em>pure-ish</em> (they read from internal state, too). He says:</p>

<blockquote><p>You‚Äôve broken the rules and rewritten your pure, functional program in a more idiomatic, Ruby manner. However, you haven‚Äôt lost the spirit of functional programming. Your code is just as easy to understand, maintain and test.</p></blockquote>

<p><a href="http://patshaughnessy.net/2014/4/8/using-a-ruby-class-to-write-functional-code#comment-1331596525">One commenter</a> goes further:</p>

<blockquote><p>I think you do not break the rules of FP by relying on <code>@line</code> and <code>@values</code>. <code>@line</code> is just partially applying a parameter to the &ldquo;functions&rdquo; of Line and currification is a usual techique in FP. <code>@values</code> is memoizing the result of a function which also comes from FP.</p></blockquote>

<p>There were a few ideas that jumped out at me.</p>

<h2>&ldquo;No Side-effects&rdquo; = Clarity at the Call Site</h2>

<p>Functions that don&rsquo;t modify their arguments are often easier to use. Their usage <em>reveals intent</em>.</p>

<p>Which do you prefer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">exclaim_1</span><span class="p">(</span><span class="n">statement</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># modify the argument</span>
</span><span class='line'>  <span class="n">statement</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;!!!&quot;</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">wow</span> <span class="o">=</span> <span class="s2">&quot;Wow&quot;</span>
</span><span class='line'><span class="n">exclaim_1</span><span class="p">(</span><span class="n">wow</span><span class="p">)</span>  <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">wow</span>             <span class="c1"># =&gt; &quot;Wow!!!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>or:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">exclaim_2</span><span class="p">(</span><span class="n">statement</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># make a new string</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">statement</span> <span class="o">+</span> <span class="s2">&quot;!!!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">wow</span> <span class="o">=</span> <span class="s2">&quot;Wow&quot;</span>
</span><span class='line'><span class="n">such_wow</span> <span class="o">=</span> <span class="n">exclaim_2</span><span class="p">(</span><span class="n">wow</span><span class="p">)</span> <span class="c1"># =&gt; &quot;Wow!!!&quot;</span>
</span><span class='line'><span class="n">wow</span>                       <span class="c1"># =&gt; &quot;Wow&quot;</span>
</span><span class='line'><span class="n">such_wow</span>                  <span class="c1"># =&gt; &quot;Wow!!!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the first case, if you didn&rsquo;t have the output in front of you, you wouldn&rsquo;t know what <code>exclaim_1</code> did. You&rsquo;d have to find the file and read the method body to know its purpose.</p>

<p>In the second case, it&rsquo;s obvious at the call site that the function returns a new, significant value. (Otherwise, why would the developer have captured in a new variable?)</p>

<h2>Think of <code>self</code> as an Argument</h2>

<p>You can extend the benefit of call site clarity to an object&rsquo;s internal state, too.</p>

<p>The commenter mentions that &ldquo;<code>@line</code> is like a parameter&rdquo; to the class&rsquo;s methods. Although it <em>isn&rsquo;t</em> part of the method signature, it has some parameter-like properties. It is:</p>

<ul>
<li>A value which affects the output</li>
<li>Unchanged by the function</li>
</ul>


<p>What if you <em>always</em> treated <code>self</code> like that? I mean, you didn&rsquo;t modify it inside method bodies, you treated it as read-only (as often as possible).</p>

<p>Python really invites you to think of <code>self</code> as a parameter of the function. It&rsquo;s actually part of the method signature:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Something</span><span class="p">():</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">some_method</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arg_1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span> <span class="c"># =&gt; the instance</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;whatever&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In fact, PyCharm will even complain if you modify <code>self</code> during a method:</p>

<p><img src="http://rmosolgo.github.io/images/pycharm_ivar.png" width="500"></p>

<p>(In reality, <code>self</code> <em>is</em> an argument in any language runtime that I ever heard of &hellip; we just tend not to think of it that way!)</p>

<h2>What Gives?</h2>

<p>I spend most of my time <em>maintaining</em> software and FP pays off big time in that regard:</p>

<ul>
<li><strong>Tests are more reliable</strong> for pure functions: if the function yields the correct output with those inputs today, it will <em>always</em> yield the correct output with those inputs.</li>
<li>Pure functions are <strong>easy to understand</strong>: the only factors are the inputs and there&rsquo;s no muddling from outside universe. Knowledge of the function body is sufficent to understand the function.</li>
<li>Pure functions must be <strong>decoupled</strong>. The only touch the world via <em>inputs</em> and <em>outputs</em> so they can&rsquo;t depend on anything else.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Move ActiveRecord Scopes into Separate Files]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/03/12/move-activerecord-scopes-into-separate-files/"/>
    <updated>2015-03-12T08:14:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/03/12/move-activerecord-scopes-into-separate-files</id>
    <content type="html"><![CDATA[<p>Ruby on Rails models tend to grow and grow. When refactoring scopes, it turns out you <em>can</em> move them into their own classes.</p>

<!-- more -->


<h2>The Problem</h2>

<p>Rails models can get out of hand. Over time they get more associations, more methods, more everything. The resulting huge API and visual clutter makes those classes hard to maintain.</p>

<p>Consider these scopes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CheckIn</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:normal</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">kind</span><span class="p">:</span> <span class="s2">&quot;Regular&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:guest</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">kind</span><span class="p">:</span> <span class="s2">&quot;Guest&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:volunteer</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">kind</span><span class="p">:</span> <span class="s2">&quot;Volunteer&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:first_time</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">joins</span><span class="p">(</span><span class="sx">%{</span>
</span><span class='line'><span class="sx">      INNER JOIN person_events</span>
</span><span class='line'><span class="sx">        ON  person_events.person_id =         check_ins.person_id</span>
</span><span class='line'><span class="sx">        AND person_events.event_id =          check_ins.event_id</span>
</span><span class='line'><span class="sx">        AND person_events.first_check_in_id = check_ins.id</span>
</span><span class='line'><span class="sx">        }</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How do we usually address this?</h2>

<p>For me, refactoring often means finding related methods &amp; values that deserve their own class, then moving code out of the model and into the new class. For example:</p>

<ul>
<li>moving complex validations into <a href="http://api.rubyonrails.org/classes/ActiveModel/Validator.html">validator classes</a></li>
<li>moving complex serialization into serializer classes (I do this with serialization to <em>English</em>, too, not just JSON)</li>
<li>moving complex calculations into value classes.</li>
</ul>


<p>Whenever I&rsquo;m trying to move code out of a model, I visit Code Climate&rsquo;s <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">great post on the topic</a>.</p>

<p>However, <em>scopes</em> are never on the list. What can we do with those?</p>

<h2>Digging In</h2>

<p>I poked around Rails source a bit to see if there were any other options available to me.</p>

<p>I found that the <code>body</code> passed to <code>ActiveRecord::Base.scope</code> just has to <a href="https://github.com/rails/rails/blob/5e0b555b453ea2ca36986c111512627d806101e7/activerecord/lib/active_record/scoping/named.rb#L149">respond to <code>:call</code></a>. I guess that&rsquo;s why lambdas are a shoo-in for that purpose: they respond to <code>:call</code> and aren&rsquo;t picky about arguments.</p>

<p>The other thing I found is that the lambdas you usually pass to <code>scope</code> <em>aren&rsquo;t magical</em>. I always assumed that they were <code>instance_eval</code>&rsquo;d against other objects at whatever other times, but as far as I can tell, they aren&rsquo;t magical. <code>self</code> is always the model class (from lexical scope), just like any other lambda.</p>

<p>Instead, the magic is a combination of Rails&#8217; <a href="https://github.com/rails/rails/blob/5e0b555b453ea2ca36986c111512627d806101e7/activerecord/lib/active_record/scoping.rb#L57">thread-aware <code>ScopeRegistry</code></a> which tracks the scope for a given class, combined with <a href="https://github.com/rails/rails/blob/ce32ff462f3ba89c87f337f9150b3976d23220e8/activerecord/lib/active_record/relation.rb#L319"><code>Association#scoping</code></a>, which I don&rsquo;t understand. :)</p>

<h2>Moving Scopes from Lambda to Class</h2>

<p>You can make a class that complies to the required API. Make calls on the model class (<code>CheckIn</code>, in my case), which is usually <code>self</code> in a <code>scope</code> lambda.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/check_in/scopes/latest.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CheckIn</span><span class="o">::</span><span class="ss">Scopes</span><span class="p">:</span><span class="ss">:Latest</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span>
</span><span class='line'>    <span class="no">CheckIn</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;check_ins.id IN (SELECT max(id) FROM check_ins GROUP BY check_ins.person_id)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, hook up the scope in the model definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CheckIn</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:latest</span><span class="p">,</span> <span class="ss">Scopes</span><span class="p">:</span><span class="ss">:Latest</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since it&rsquo;s just a plain ol&#8217; class, you can give it <strong>other methods</strong> too:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/check_in/scopes/latest.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CheckIn</span><span class="o">::</span><span class="ss">Scopes</span><span class="p">:</span><span class="ss">:Latest</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span>
</span><span class='line'>    <span class="no">CheckIn</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">query_string</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">query_string</span>
</span><span class='line'>    <span class="s2">&quot;check_ins.id IN (SELECT max(id) FROM check_ins GROUP BY check_ins.person_id)&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also <strong>initialize it</strong> with some data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CheckIn</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:normal</span><span class="p">,</span>          <span class="ss">Scopes</span><span class="p">:</span><span class="ss">:KindScope</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Regular&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:guest</span><span class="p">,</span>           <span class="ss">Scopes</span><span class="p">:</span><span class="ss">:KindScope</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Guest&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:volunteer</span><span class="p">,</span>       <span class="ss">Scopes</span><span class="p">:</span><span class="ss">:KindScope</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Volunteer&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Any Benefit?</h2>

<p>Here&rsquo;s what I think:</p>

<p><strong>Pros:</strong></p>

<ul>
<li>Less visual noise.</li>
<li>Your model still reads like a table of contents.</li>
<li>Theoretically, you could test the scope in isolation (but I&rsquo;m too lazy, if the existing tests still pass, that&rsquo;s good enough for me :P).</li>
</ul>


<p><strong>Cons:</strong></p>

<ul>
<li>If the scope takes arguments, you can&rsquo;t tell right away.</li>
<li>It doesn&rsquo;t <em>actually</em> shrink the class&rsquo;s API: it&rsquo;s still a big ol&#8217; model.</li>
<li>It&rsquo;s not a known Rails practice.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building up vs Building out]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/03/11/building-up-vs-building-out/"/>
    <updated>2015-03-11T13:27:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/03/11/building-up-vs-building-out</id>
    <content type="html"><![CDATA[<p>While adding a big feature to <a href="http://get.planningcenteronline.com/check-ins">PCO Check-Ins</a>, I was struck with this way of describing my approach to adding complexity to the system.</p>

<!-- more -->


<p>Suppose you&rsquo;re given the task: &ldquo;Our system only handles data of type <em>X</em>, it also needs to handle data of type <em>Y</em>. Everywhere.&rdquo; All over the program, you need to check what kind of data you have, then choose to handle it the old way or handle it the new way.</p>

<p>Your program has one entry point and renders views outputs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ+‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ
</span><span class='line'>‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ|‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ
</span><span class='line'>‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ|‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ
</span><span class='line'>+----+----+
</span><span class='line'>|‚Äâ‚Äâ‚Äâ‚Äâ|‚Äâ‚Äâ‚Äâ‚Äâ|
</span><span class='line'>|‚Äâ‚Äâ‚Äâ‚Äâ|‚Äâ‚Äâ‚Äâ‚Äâ|
</span><span class='line'>+‚Äâ‚Äâ‚Äâ‚Äâ+‚Äâ‚Äâ‚Äâ‚Äâ+
</span><span class='line'>A    B    C</span></code></pre></td></tr></table></div></figure>


<h2>Building Up</h2>

<p>One way to address this problem is to find everywhere you handle data type <em>X</em>, then extend it to handle type <em>Y</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">data</span><span class="o">.</span><span class="n">type_X?</span>
</span><span class='line'>  <span class="c1"># handle data type X</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c1"># handle data type Y</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your code paths now look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ</span><span class="o">+</span><span class="err">‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ</span>
</span><span class='line'><span class="err">‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ</span><span class="o">|</span><span class="err">‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ</span>
</span><span class='line'><span class="err">‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ</span><span class="o">|</span><span class="err">‚Äâ</span>
</span><span class='line'><span class="err">‚Äâ‚Äâ</span><span class="o">+------+------+</span>
</span><span class='line'><span class="err">‚Äâ‚Äâ</span><span class="o">|</span>      <span class="o">|</span>      <span class="o">|</span>
</span><span class='line'><span class="err">‚Äâ‚Äâ</span><span class="o">|</span>      <span class="o">|</span>      <span class="o">|</span>
</span><span class='line'><span class="o">+-+-+</span>  <span class="o">+-+-+</span>  <span class="o">+-+-+</span>  <span class="o">&lt;-</span> <span class="n">check</span> <span class="k">for</span> <span class="n">type</span> <span class="n">X</span> <span class="ow">or</span> <span class="n">type</span> <span class="n">Y</span>
</span><span class='line'><span class="o">|</span>   <span class="o">|</span>  <span class="o">|</span>   <span class="o">|</span>  <span class="o">|</span>   <span class="o">|</span>
</span><span class='line'><span class="o">+</span>   <span class="o">+</span>  <span class="o">+</span>   <span class="o">+</span>  <span class="o">+</span>   <span class="o">+</span>
</span><span class='line'><span class="no">A1</span>  <span class="no">A2</span> <span class="no">B1</span>  <span class="no">B2</span> <span class="no">C1</span>  <span class="no">C2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your tree is deeper than it was. You slapped some complexity &ldquo;on top&rdquo; of the existing code.</p>

<h2>Building Out</h2>

<p>Another approach would be to implement a parallel set of views for rendering the new data. Your existing views don&rsquo;t change. Instead you add three new views:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ</span><span class="o">+</span>
</span><span class='line'><span class="err">‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ</span><span class="o">|</span>
</span><span class='line'><span class="err">‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ‚Äâ</span><span class="o">|</span>
</span><span class='line'><span class="o">+--+--+--+--+--+--+</span>
</span><span class='line'><span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>     <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>     <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>
</span><span class='line'><span class="o">+</span>  <span class="o">+</span>  <span class="o">+</span>     <span class="o">+</span>  <span class="o">+</span>  <span class="o">+</span>
</span><span class='line'><span class="n">A</span>  <span class="n">B</span>  <span class="n">C</span>     <span class="n">D</span>  <span class="n">E</span>  <span class="n">F</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your program has grown &ldquo;out&rdquo;. It has more objects, but each one is doing a small job.</p>

<p>This way, your existing views stay simple. The new views can be equally simple. Hopefully, recycled code can be shared between views!</p>

<h2>In Rails</h2>

<p>Rather than adding <code>if</code>s in controller actions, add a new controller. Maybe it renders the same kind of objects as the existing controller &mdash; that&rsquo;s OK! It&rsquo;s worth it to add the extra controllers &amp; actions to keep the code paths simple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging: Behavior &amp; Purpose]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/03/01/debugging-behavior-and-purpose/"/>
    <updated>2015-03-01T15:53:00-05:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/03/01/debugging-behavior-and-purpose</id>
    <content type="html"><![CDATA[<p>To resolve a bug, a developer must know the <em>behavior</em> and the <em>purpose</em> of the program at hand. I&rsquo;ve been reading <a href="http://en.wikipedia.org/wiki/Lesslie_Newbigin">Lesslie Newbingin</a> and it made me think of this.</p>

<!-- more -->


<p>There are at least two kinds of bugs:</p>

<ul>
<li>The program crashes</li>
<li>The program does not crash, but it does not accomplish the desired result</li>
</ul>


<p>In either case, the developer must draw on two important facts in order to fix the bug:</p>

<ul>
<li>What is the <em>current behavior</em> of the program? How does it work?</li>
<li>What is the <em>purpose</em> of the program? Why does it exist?</li>
</ul>


<h3>Debugging: Behavior</h3>

<p>In some cases, a bug expresses itself by causing the program to crash. The fix  may be purely technical:</p>

<ul>
<li>don&rsquo;t enter an infinite loop</li>
<li>rectify an off-by-one error</li>
<li>fix a typo in the source code</li>
</ul>


<h3>Debugging: Purpose</h3>

<p>In other cases, a bug does <em>not</em> cause the program to crash. In fact, the program runs fine, but there is still a bug. Here, <em>purpose</em> is essential.</p>

<p>I often ask the product manager, &ldquo;How should this program behave?&rdquo; His response is dictated by the <em>design</em> of the application: why does it exist? What was it made for? What should it accomplish?</p>

<p>No amount of technical information can answer that question.</p>

<h3>Software without Purpose?</h3>

<p>Imagine error handling without purpose. Suppose an external web service returns <code>404 Not Found</code>. How should that be handled by our application? In a program whose design is unknown, the developer has no option but to hide the crash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="c1"># do something</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'>  <span class="kp">nil</span> <span class="c1"># who knows?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sometimes, this is the norm for American culture. Bugs in society aren&rsquo;t <em>treated</em> as much as <em>suppressed</em>. How could they be treated? We insist that discussions regarding the <em>purpose</em> of humanity are a private matter and not to be addressed in a public way. &ldquo;What&rsquo;s true for you might not be true for me.&rdquo;</p>

<h3>Product Manager of Product Managers</h3>

<p>A key tenet of Christianity is that, in the life of Jesus of Nazareth, God communicated to humans their purpose. It has traditionally been summarized as  &ldquo;The chief end of man is to worship God and enjoy him forever.&rdquo; This means we ought to live (individually and together) in light of God&rsquo;s supremacy and our togetherness as his children.</p>

<p>This opens the door to much more effective troubleshooting. When the system (human life, human society) fails, we can do more than apply technical bandages; we can refashion the system to better serve the purpose for which it was designed.</p>

<p>Nobody operates under a truly purposeless mindset. Indeed, even when we state a purpose, we find ourselves seeking to fulfill a different one. But we ought to ask: what design <em>should</em> we try to fulfill?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Refactoring by Keeping ApplicationController to a Minimum]]></title>
    <link href="http://rmosolgo.github.io/blog/2015/01/17/happy-refactoring-by-keeping-applicationcontroller-to-a-minimum/"/>
    <updated>2015-01-17T10:24:00-05:00</updated>
    <id>http://rmosolgo.github.io/blog/2015/01/17/happy-refactoring-by-keeping-applicationcontroller-to-a-minimum</id>
    <content type="html"><![CDATA[<p>Extending <code>ActionController::Base</code> <em>once</em>, in <code>ApplicationController</code>, is a great Ruby on Rails practice. However, if <code>ApplicationController</code> is your only abstract controller, it&rsquo;s likely to become a maintenance challenge. To avoid this, you should extend <code>ApplicationController</code> as needed and move as much code as possible into its subclasses.</p>

<!-- more -->


<h2>Feeling ApplicationController Pain</h2>

<p>So, our app is live. We&rsquo;ve dutily extended <code>ApplicationController</code> in all our other controllers, giving us an inheritance tree like this:</p>

<p><img src="http://rmosolgo.github.io/images/controller_inheritance_bad.png" width="500" height="500"></p>

<p>Fortunately, our app is a success and our customers want us to open an API. Let&rsquo;s use <code>API::BaseController</code> as the superclass of all our API controllers:</p>

<p><img src="http://rmosolgo.github.io/images/controller_inheritance_bad_with_api.png" width="500" height="500"></p>

<p>As our user base grows, we need a more robust permissions system. We tighten up restrictions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:authenticate!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since some actions are public, we skip the restrictions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ReportsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">skip_before_action</span> <span class="ss">:authenticate!</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ProfilesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">skip_before_action</span> <span class="ss">:authenticate!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve forgotten about our API, and when we deploy, we&rsquo;ll be quickly reminded that <code>ApplicationController</code> is involved in those requests too. Since <code>ApplicationController</code> touches <em>every request</em>, it&rsquo;s hard to be sure about exactly what will be affected by changes there.</p>

<h2>ApplicationController Gains Weight</h2>

<p>Left alone, <code>ApplicationController</code> can bloat for many reasons:</p>

<ul>
<li><strong>Authentication logic</strong>, perhaps with complex branching based on what the user is accessing, builds up little-by-little as the application is extended.</li>
<li><strong>Before-actions &amp; helpers</strong> which are used <em>often</em> but <em>not always</em> tend to accrue in <code>ApplicationController</code>, since they&rsquo;re &ldquo;used more than once.&rdquo;</li>
<li><strong>Oddball routes</strong> might be implemented in <code>ApplicationController</code> because no other existing controller seems like the right place.</li>
</ul>


<p>In JavaScript development, filling the global namespace with application code is a no-no. Similarly, <code>ApplicationController</code> is a near-global namespace, so each addition to it should be considered very carefully. When we add to (and remove from) <code>ApplicationController</code>, we&rsquo;re potentially altering <em>every</em> request that our application serves; how can we be sure we aren&rsquo;t breaking something?</p>

<h2>Isolating &ldquo;Parts&rdquo; of the App</h2>

<p>Returning to the example above, I think this inheritance tree is better:</p>

<p><img src="http://rmosolgo.github.io/images/controller_inheritance_good.png" width="500" height="500"></p>

<p>We&rsquo;ve introduced abstract classes for each &ldquo;part&rdquo; of the app. (I use quotes because I don&rsquo;t know a technical term for it!) Now, logged-in authentication would be handled by a subclass of <code>ApplicationController</code>, perhaps named <code>BaseController</code>. A logged-in controller would extend <code>BaseController</code>. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ItemsController</span> <span class="o">&lt;</span> <span class="no">BaseController</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly, public controllers would be in a namespace of their own, with their own base controller. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Public</span><span class="o">::</span><span class="no">ProfilesController</span> <span class="o">&lt;</span> <span class="ss">Public</span><span class="p">:</span><span class="ss">:BaseController</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is good because:</p>

<ul>
<li>You can refactor with more confidence, since you only have to load <em>part</em> of the app into memory when working on abstract controllers.</li>
<li>Stable parts of the app are more likely to remain stable (since they won&rsquo;t be affected by other parts).</li>
</ul>


<p>The corresponding file structure looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>controllers/
</span><span class='line'>  api/
</span><span class='line'>    base_controller.rb
</span><span class='line'>    items_controller.rb
</span><span class='line'>    profiles_controller.rb
</span><span class='line'>
</span><span class='line'>  public/
</span><span class='line'>    base_controller.rb
</span><span class='line'>    reports_controller.rb
</span><span class='line'>    profiles_controller.rb
</span><span class='line'>
</span><span class='line'>  staff/
</span><span class='line'>    base_controller.rb
</span><span class='line'>    stats_controller.rb
</span><span class='line'>
</span><span class='line'>  application_controller.rb
</span><span class='line'>  base_controller.rb
</span><span class='line'>  items_controller.rb
</span><span class='line'>  profiles_controller.rb
</span><span class='line'>  reports_controller.rb
</span></code></pre></td></tr></table></div></figure>


<p><em>(I&rsquo;ve left some controllers in the root namespace. If you like, you could put logged-in actions in a namespace too!)</em></p>

<p>And the routes might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:items</span><span class="p">,</span> <span class="ss">:profiles</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:public</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:profiles</span><span class="p">,</span> <span class="ss">:reports</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:staff</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:stats</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">resources</span> <span class="ss">:items</span><span class="p">,</span> <span class="ss">:profiles</span><span class="p">,</span> <span class="ss">:reports</span>
</span></code></pre></td></tr></table></div></figure>


<h2>When should we extend ApplicationController?</h2>

<p>I&rsquo;d say it&rsquo;s good to extend <code>ApplicationController</code> for each &ldquo;part&rdquo; of the app. It&rsquo;s a bit subjective, but here are some clues:</p>

<ul>
<li>Actions rendered with a <strong>different layout</strong> (or lack thereof). Your webservice, administration and public views are distinct parts of your app.</li>
<li>Actions using <strong>different authentication</strong> strategies. Keep API endpoints, public pages, and staff-only actions in separate sections. If a staff member goes rogue, you&rsquo;ll be able to tighten up that part of the app confidently :)</li>
<li>Actions with <strong>different frequently-used helpers or before-actions</strong>. If there&rsquo;s a before-action that&rsquo;s often skipped, Rails wants to tell you something: these controllers are different! Similarly, if you have controller-level helper methods, perhaps the controllers who depend on that helper should be in a &ldquo;part&rdquo; of their own.</li>
</ul>


<p>I hope a pattern like this will give you more freedom &amp; confidence when refactoring important parts of the request-response cycle!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defining mruby Methods with C]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/11/21/defining-mruby-methods-with-c/"/>
    <updated>2014-11-21T10:25:00-05:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/11/21/defining-mruby-methods-with-c</id>
    <content type="html"><![CDATA[<p>You can use C code to prepare methods for <a href="http://www.mruby.org">mruby</a> scripts.</p>

<!-- more -->


<p>The steps are:</p>

<ul>
<li>Defining a method</li>
<li>Getting argument values</li>
<li>Adding the method to the <code>mrb_state</code></li>
</ul>


<h2>Defining a Method</h2>

<p>To define a Ruby function, make a C function that:</p>

<ul>
<li>accepts two arguments, a <code>mrb_state</code> and a <code>mrb_value</code></li>
<li>returns a <code>mrb_value</code>.</li>
</ul>


<p>Here&rsquo;s a minimal method definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">mrb_value</span>
</span><span class='line'><span class="nf">ruby_method</span><span class="p">(</span><span class="n">mrb_state</span> <span class="o">*</span><span class="n">mrb</span><span class="p">,</span> <span class="n">mrb_value</span> <span class="n">self</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mrb_nil_value</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <strong>arguments</strong> are:</p>

<ol>
<li><code>mrb_state</code>, the current mruby VM instance</li>
<li><code>mrb_value</code>, the current <code>self</code> (caller of this method)</li>
</ol>


<p>Notice that you don&rsquo;t define the Ruby arguments here. You&rsquo;ll handle those later by getting them from the <code>mrb_state</code>.</p>

<p>The <strong>return type</strong> must be <code>mrb_value</code>. If it&rsquo;s not, your program will crash (<code>Segmentation Fault</code> :( ) when the return value is accessed (no compile-time error). If your method shouldn&rsquo;t return anything, use <code>return mrb_nil_value();</code></p>

<p>mruby implements a lot of the built-in classes&#8217; instance methods this way, for example: <code>String#capitalize!</code>(<a href="https://github.com/mruby/mruby/blob/e77ea4e5f2b823181020bb3a337509ba028b6dc4/src/string.c#L855">src</a>).</p>

<h2>Getting Arguments</h2>

<p>You might have noticed that your C function definition <em>didn&rsquo;t</em> define any arguments. Instead, you get your arguments by extracting them from <code>mrb_state</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">mrb_value</span>
</span><span class='line'><span class="nf">ruby_method</span><span class="p">(</span><span class="n">mrb_state</span> <span class="o">*</span><span class="n">mrb</span><span class="p">,</span> <span class="n">mrb_value</span> <span class="n">self</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Initialize a variable</span>
</span><span class='line'>  <span class="n">mrb_int</span> <span class="n">some_integer</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Extract a value</span>
</span><span class='line'>  <span class="n">mrb_get_args</span><span class="p">(</span><span class="n">mrb</span><span class="p">,</span> <span class="s">&quot;i&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mrb_int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">mrb_nil_value</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>mrb_get_args</code> takes a string whose letters say what kind of arguments and how many arguments to extract. The <a href="https://github.com/mruby/mruby/blob/5c6d6309b6b5e01ef3ff38f772e0fdd3fc5dd372/src/class.c#L437"><code>mrb_get_args</code> source</a> documents the different possibilities.</p>

<p>Notably, anything after a <code>|</code> is <strong>optional</strong>.</p>

<p>For a <strong>default value</strong>, assign a value to the variable and make the argument optional. In this example, <code>inherit</code> defaults to <code>TRUE</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="n">mrb_bool</span> <span class="n">inherit</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mrb_get_args</span><span class="p">(</span><span class="n">mrb</span><span class="p">,</span> <span class="s">&quot;|b&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">inherit</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s from <a href="https://github.com/mruby/mruby/blob/b28ec1bc88d29d8e7205401a6e323f20581d642f/src/variable.c#L988">C implementation of <code>Module#constants</code></a>. Another nice example is <a href="https://github.com/mruby/mruby/blob/e77ea4e5f2b823181020bb3a337509ba028b6dc4/src/string.c#L831">the <code>String#[]</code> source</a>.</p>

<h2>Adding Methods to mruby State</h2>

<p>To add a method to the mruby state, you must attach it to some object. To make a method global, you can define it on <code>Object</code>. Let&rsquo;s do that.</p>

<p>We&rsquo;ll use <code>mrb_define_method</code>, which accepts five arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">mrb_define_method</span><span class="p">(</span><span class="n">mrb_state</span> <span class="o">*</span><span class="n">mrb</span><span class="p">,</span> <span class="k">struct</span> <span class="n">RClass</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="n">mrb_func_t</span> <span class="n">func</span><span class="p">,</span> <span class="n">mrb_aspec</span> <span class="n">aspec</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>mrb_state *mrb</code>: the open mruby VM instance</li>
<li><code>struct RClass *c</code>: the mruby class to attach the method to</li>
<li><code>const char *name</code>: the Ruby name for this method</li>
<li><code>mrb_func_t func</code>: the C function to execute for this Ruby method</li>
<li><code>mrb_aspec aspec</code>: the number &amp; types of arguments for this method</li>
</ul>


<p>In fact, <strong>specifying arguments</strong> is not currently used (<a href="https://github.com/mruby/mruby/issues/791">github issue</a>). To pass some value here, you can use some <a href="https://github.com/mruby/mruby/blob/5c6d6309b6b5e01ef3ff38f772e0fdd3fc5dd372/include/mruby.h#L232-L251">convenient macros from <code>mruby.h</code></a>.</p>

<p>So, let&rsquo;s add a global method, <code>greet!</code>. Here&rsquo;s the method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="n">mrb_value</span>
</span><span class='line'><span class="nf">mrb_greet</span><span class="p">(</span><span class="n">mrb_state</span> <span class="o">*</span><span class="n">mrb</span><span class="p">,</span> <span class="n">mrb_value</span> <span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, mruby!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mrb_nil_value</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, attach it to <code>Object</code>, which will make it global:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">mrb_define_method</span><span class="p">(</span><span class="n">mrb</span><span class="p">,</span> <span class="n">mrb</span><span class="o">-&gt;</span><span class="n">object_class</span><span class="p">,</span> <span class="s">&quot;greet!&quot;</span><span class="p">,</span> <span class="n">mrb_greet</span><span class="p">,</span> <span class="n">MRB_ARGS_NONE</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, you can run in your Ruby script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">greet!</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Response to "Why Kids Sext"]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/11/18/response-to-why-kids-sext/"/>
    <updated>2014-11-18T21:15:00-05:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/11/18/response-to-why-kids-sext</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.theatlantic.com/magazine/archive/2014/11/why-kids-sext/380798/">cover article</a> of the November 2014 <a href="http://www.theatlantic.com/">Atlantic Monthly</a> told the story of sexting and police involvement in Louisa County, VA.</p>

<!-- more -->


<p>Sexting is not part of my life, but it&rsquo;s part of our culture (if Snapchat&rsquo;s $2 billion valuation shows anything). When we have kids of our own, I&rsquo;d like to do a good job preparing them for the world they&rsquo;re born into. If I&rsquo;ve learned anything from my own life, that means instructing them regarding technology-powered sexual perils.</p>

<p>When I consider sexting, I have a few questions:</p>

<ul>
<li><strong>Why does it happen?</strong> Is it a new phenomenon or simply a new face for an old one?</li>
<li><strong>Who is responsible?</strong> Who is involved and why do they do what they do?</li>
<li><strong>What should we do?</strong> Is it bad? Should American adults take any action?</li>
</ul>


<p>I thought I&rsquo;d share some of my thoughts on those questions after reading The Atlantic&rsquo;s <a href="http://www.theatlantic.com/magazine/archive/2014/11/why-kids-sext/380798/">&ldquo;Why Kids Sext&rdquo;</a> (by <a href="http://hannarosin.com/">Hanna Rosin</a>).</p>

<h2>Why does it happen?</h2>

<p>The author provides several explanations:</p>

<h4>Kids pressure one another.</h4>

<blockquote><p>When surveyed, by far the most common reason kids give for sexting is that their boyfriend or girlfriend wanted the picture&hellip; Englander singles out a distinct minority (12 percent) she calls the ‚Äúpressured sexters,‚Äù who say they sexted only because they felt pressure. These girls are more vulnerable. They tend to &hellip; sext because they think they can get a boyfriend&hellip;</p></blockquote>

<p>A sad part for me is the role of the boys/young men:</p>

<blockquote><p> This is how one of them described his game to me: ‚ÄúA lot of girls, they stubborn, so you gotta work on them. You say, ‚ÄòI‚Äôm trying to get serious with you.‚Äô You call them beautiful. You say, ‚ÄòYou know I love you.‚Äô You think about it at night, and then you wake up in the morning and you got a picture in your phone.‚Äù</p></blockquote>

<p>People want to be loved and they want to have intimate relationships. It&rsquo;s very sad when that desire is exploited!</p>

<h4>Sexting is their only option for intimacy.</h4>

<p>I actually beleive that all humans (even mean ones) desire to be known deeply and loved by other humans.</p>

<blockquote><p>‚ÄúI live literally in the middle of nowhere, &hellip;  parents weren‚Äôt going to drop me off &hellip; Our only way of being alone was to do it over the phone. It was a way of kind of dating without getting in trouble. A way of being sexual without being sexual, you know? And it was his way of showing he liked me a lot and my way of saying I trusted him.‚Äù</p></blockquote>

<p>Again, you can hear the desire for intimacy (people equate sex with intimacy).</p>

<blockquote><p>The kids in Louisa County, like kids everywhere, are chronically overscheduled&hellip; Nighttime is the only time teens get to have intimate conversations and freely navigate their social world&hellip; [T]hat means checking up on the latest drama on Twitter&hellip;, filling up their Instagram accounts, or asking a girl for a pic.</p></blockquote>

<p>Sometimes you hear the joke about hobbies &ldquo;keeping {someone} off the street.&rdquo; Apparently you can&rsquo;t steamroll the desire for for social interaction out of a child!</p>

<h2>Who is responsible?</h2>

<p>I see a few different players in this scene:</p>

<ul>
<li>askers: those who request sexts</li>
<li>senders: those who comply with requests (or send unsolicited)</li>
<li>&ldquo;The system&rdquo;: schools, goverments, technology, etc</li>
<li>parents</li>
</ul>


<h4>Is it the askers?</h4>

<p>Writ large, there are two kinds of &ldquo;asks&rdquo;: those from uninvolved parties and those from &ldquo;committed&rdquo; parters.</p>

<blockquote><p>‚ÄúGuys would pile them up,‚Äù one girl who had graduated a year earlier told me&hellip;. ‚ÄúIt was more of a baseball-card, showing-off kind of thing&hellip; like when they were little boys, playing with Pok√©mon cards.‚Äù</p></blockquote>

<p>In the first case, it&rsquo;s (apparently) a matter of dominion &mdash; another manifestation of treating females objects to obtain. Nothing new, but shows how far we&rsquo;ve come. (Which is: nowhere).</p>

<blockquote><p>In the vast majority of cases, the picture lands only where it was meant to&hellip; ‚ÄúThe only reason to regret it is if you get caught,‚Äù one girl told me.</p></blockquote>

<p>This article assumes that sexting a &ldquo;committed partner&rdquo; is OK. Protip: you&rsquo;ll probably break up with high-school boyfriend.</p>

<p>When people are seen naked, they feel ashamed. When you ask for a naked picture, you&rsquo;re now toying with that person&rsquo;s dignity. Not OK. (But to be fair, most people don&rsquo;t know that.)</p>

<h4>Is it the senders?</h4>

<p>This article doesn&rsquo;t paint the senders as passive victims. It uses phrases like &ldquo;sexual experimenters.&rdquo;</p>

<p>Seems to me that the senders are pursuing intimacy in an unproductive way. They long to be known and accepted, but they&rsquo;re left with regret. Whether external (expos√©) or internal (guilt &amp; shame), they might feel repercussions of their actions, which is always sad.</p>

<h4>Is it &ldquo;the system?&rdquo;</h4>

<p>I believe that the system is the sum of its parts. If society members behaved, the system would function. If the system is broken, look to the society members. So, the answer to this question is just the sum of the other answers. Moving on.</p>

<h4>Is it the parents?</h4>

<p>Parents are notably absent in this article. They appear a few times:</p>

<ul>
<li>shaming a child caught sexting</li>
<li>one bit of advice for parents understanding social media</li>
</ul>


<p>That&rsquo;s pretty much it.</p>

<p>It&rsquo;s ironic that we pair the &ldquo;cult of parenthood&rdquo; with a growing distaste for instructing children (or rather, relegating instruction to non-parents).</p>

<p>This article describes in detail how lawyers, police officers, researchers and children cope with sexting, but makes very little mention of parents. I don&rsquo;t think it&rsquo;s a lack of focus in this article; I think it&rsquo;s a lack of focus in our culture. In fact, the article describes a sexting education meeting in Louisa County. Only &ldquo;about a dozen&rdquo; people attended.</p>

<h2>What should we do?</h2>

<blockquote><p>Teens in Louisa County, like teens everywhere, hear a lot about sex, but really know only a little about it.</p></blockquote>

<p>My instinct for solving this problem (like my instinct for solving all problems :S ) is to create &amp; disseminate knowledge. Obviously, I can&rsquo;t say &ldquo;Why don&rsquo;t you people teach your kids right about sex?&rdquo; becuase I haven&rsquo;t done it. But I hope to get up the nerve by the time my turn comes:</p>

<ul>
<li>We all want to be known and loved by others; it&rsquo;s a very powerful desire.</li>
<li>To be seen naked is to be known. I can&rsquo;t explain it, but it&rsquo;s an old truth. It&rsquo;s why we wear clothes even when it&rsquo;s hot outside. It&rsquo;s why certain combinations of attire (or lack thereof) are inappropriate in public. It&rsquo;s why you have bad dreams of leaving your pants at home.</li>
<li>To be known but not loved is brutal: you&rsquo;re stripped bare but not embraced. I imagine that&rsquo;s the feeling when naked pictures become public (cf. &ldquo;L&#8217;enfer, c&#8217;est les autres&rdquo;, <a href="http://en.wikipedia.org/wiki/Gaze">&ldquo;Gaze&rdquo;</a>).</li>
<li>Similarly, to be loved but not known is hollow: a relationship based on mutual pride-appeasing may provide tastes of intimacy but it is not intimacy. Eyelash-batting will wear off and you&rsquo;re realize you never actually <em>loved</em> the other. You loved <em>being admired by the other.</em></li>
<li>When you&rsquo;re married, you&rsquo;re known by your spouse. If your spouse keeps his or her vows, you&rsquo;ll also be loved. Marriage is a place where humans can be fully known and fully loved without fear of abandonment. Certainly loving the &ldquo;stranger you&rsquo;re married to&rdquo; is hard, but you&rsquo;re not likely count your spouse like a baseball card.</li>
</ul>


<p>I appreciated the advice included in this article:</p>

<blockquote><p>Boyd advises parents not to, for example, shut down accounts&hellip;Instead, parents should take a deep breath‚Äîeven in the most uncomfortable scenarios‚Äîand ask questions.</p></blockquote>

<p>I guess this is it: in my youth, internet pornography was the new menace that nobody warned us about &amp; we all fell prey to (indirectly, if not directly). What will it be for my children?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Hello World" with mruby]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/11/15/hello-world-with-mruby/"/>
    <updated>2014-11-15T19:38:00-05:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/11/15/hello-world-with-mruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.mruby.com">mruby</a> is an implementation of Ruby that&rsquo;s designed to be lightweight &amp; integrated with C. To get started, you can run a bit of Ruby code from <em>inside</em> C code.</p>

<!-- more -->


<p>&ldquo;Hello World&rdquo; with mruby looks like this:</p>

<ul>
<li>Set up a new project and include mruby as a submodule</li>
<li>Write some C code that loads mruby and executes some Ruby code</li>
<li>Compile the C code &amp; run the resulting binary</li>
</ul>


<p>You can find an example similar to this one <a href="https://github.com/rmosolgo/mruby-examples/tree/master/01_hello_world">on GitHub</a>.</p>

<h2>Start a project</h2>

<p>Make a directory for your new project and enter it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir ~/hello-mruby
</span><span class='line'>$ cd ~/hello-mruby</span></code></pre></td></tr></table></div></figure>


<p>Clone mruby source and compile mruby:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:mruby/mruby.git
</span><span class='line'>$ cd mruby
</span><span class='line'>$ make
</span><span class='line'>$ cd ..</span></code></pre></td></tr></table></div></figure>


<p>(You need bison and Ruby to compile mruby, see the <a href="https://github.com/mruby/mruby/blob/master/INSTALL">install guide</a> for more information.)</p>

<p>You can check if compilation was successful by running <code>mirb</code> (interactive mruby):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mruby/bin/mirb
</span><span class='line'>mirb - Embeddable Interactive Ruby Shell
</span><span class='line'>
</span><span class='line'>&gt; 1 + 1
</span><span class='line'> =&gt; 2</span></code></pre></td></tr></table></div></figure>


<h2>Write the program</h2>

<p>Here&rsquo;s the whole of <code>hello_world.c</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* include mruby VM &amp; compiler */</span>
</span><span class='line'><span class="cp">#include &quot;mruby.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;mruby/compile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="cm">/* make a mruby instance */</span>
</span><span class='line'>  <span class="n">mrb_state</span> <span class="o">*</span><span class="n">mrb</span> <span class="o">=</span> <span class="n">mrb_open</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* write some code */</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">code</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;p &#39;Hello world!&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* use mruby to execute code from string */</span>
</span><span class='line'>  <span class="n">mrb_load_string</span><span class="p">(</span><span class="n">mrb</span><span class="p">,</span> <span class="n">code</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s break that down:</p>

<ul>
<li><p><strong>Include mruby &amp; compiler</strong>. The mruby VM takes bytecode instructions. The compiler is used to turn a string of Ruby code into mruby bytecode. <code>mrb_load_string</code> handles both steps: Parse &amp; compile Ruby code, then execute with the mruby VM.</p></li>
<li><p><strong>Make a mruby instance</strong>. Create an instance of the mruby VM. This object contains the state of the Ruby evnironment. Besides using it to execute code, you can inject values into the Ruby environment or call Ruby code from C.</p></li>
<li><p><strong>Use mruby to execute code from string</strong>. As described above, in this case, the string will be turned into VM instructions first, then executed by mruby.</p></li>
</ul>


<h2>Compile &amp; run</h2>

<p>Compile your C application, referencing the necessary mruby files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">gcc</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">o</span> <span class="n">hello_world</span> <span class="o">-</span><span class="n">Imruby</span><span class="o">/</span><span class="n">include</span>  <span class="o">-</span><span class="n">lmruby</span>  <span class="o">-</span><span class="n">Lmruby</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">host</span><span class="o">/</span><span class="n">lib</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, execute the resulting binary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">hello_world</span>
</span><span class='line'><span class="s">&quot;Hello world!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You did it!</p>

<h2>What next?</h2>

<ul>
<li>Use <code>mrbc</code> to precompile <code>.rb</code> into mruby bytecode.</li>
<li>Modify <code>mrb_state</code> from C with things like <code>mrb_define_class</code>, <code>mrb_define_method</code> and <code>mrb_define_const</code>.</li>
<li>Call Ruby methods from C with <code>mrb_funcall</code>.</li>
</ul>


<p>However, I don&rsquo;t know of any English documentation for these things yet!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why (I Think) We're Leaving Batman.js]]></title>
    <link href="http://rmosolgo.github.io/blog/2014/09/07/why-i-think-were-leaving-batman-dot-js/"/>
    <updated>2014-09-07T20:19:00-04:00</updated>
    <id>http://rmosolgo.github.io/blog/2014/09/07/why-i-think-were-leaving-batman-dot-js</id>
    <content type="html"><![CDATA[<p>Sadly, <a href="http://get.planningcenteronline.com">PCO</a> is getting out of the batman.js game.</p>

<!-- more -->


<p>From where I sit, I think it boils down to:</p>

<ul>
<li>The framework never hit critical mass (and lost what it had)</li>
<li>The framework&rsquo;s magic made some problems impossible to debug</li>
<li>Client-side apps aren&rsquo;t good for business</li>
<li>Rails, Turbolinks &amp; React will do just fine</li>
</ul>


<p>Batman.js is a great framework with some amazing, well-tested features and I&rsquo;m sorry to see it go this way for us!</p>

<h2>No Critical Mass</h2>

<p>Batman.js was an early entrant to the &ldquo;Framework Wars&rdquo;. It was production-ready by early 2013, which made it appealing at that point. However,</p>

<ul>
<li>there was very little &ldquo;evangelism&rdquo; by its creators (almost no talks, very little documentation, no &ldquo;media presence&rdquo;)</li>
<li>early adopters were not &ldquo;invited in&rdquo; (unanswered github issues, for example)</li>
</ul>


<p>When Shopify pulled out (around <a href="https://github.com/batmanjs/batman/graphs/contributors">fall 2013</a>?), a ton of knowledge and resources were removed with no viable replacement.</p>

<h2>Magic Problems</h2>

<p>Batman.js is loaded with awesome APIs that were fun to use and satisfying when they worked. However, when it <em>didn&rsquo;t work</em>, you were up a creek without a paddle. There was:</p>

<ul>
<li>no helpful error messages</li>
<li>no support on github, stack overflow or IRC</li>
<li>no documentation or information of any kind about the inner workings</li>
<li>no debugging tools</li>
</ul>


<p>I&rsquo;ve seen a lot of batman.js users pull their hair out yelling, &ldquo;Why doesn&rsquo;t this <em>work</em>?!&rdquo; Indeed, that&rsquo;s what drove me to learn it from the source.</p>

<h2>Client-Side Issues</h2>

<p>Making a whole app in JavaScript has a lot of sex appeal, but several things make it bad for real-life business:</p>

<ul>
<li>Bug-tracking tools (namely Bugsnag for JS) are not as good (especially when you throw CoffeeScript &amp; minification in the mix)</li>
<li>Browser environments are outside your control (I got a lot of bugsnags for peoples&#8217; browser extensions)</li>
<li>State can get weird &mdash; after having the app open for an hour, data can just get messed up! (Maybe this doesn&rsquo;t happen for better programmers.)</li>
</ul>


<p><em>Not my problem:</em></p>

<p><img src="http://rmosolgo.github.io/images/extension_errors.png" width="500"></p>

<p><em>No es mi problema:</em></p>

<p><img src="http://rmosolgo.github.io/images/extension_errors2.png" width="900"></p>

<p>You just don&rsquo;t realize the luxury of reliable bugsnags until they&rsquo;re gone! So many Check-Ins bugsnags leave no trace of what actually went wrong.</p>

<h2>Other Options are OK, too</h2>

<p>We have a solid data model, HTML templates and CSS to boot. It stinks to throw away all that code, but I forgot how amazingly fast it is to code Ruby on Rails.</p>

<p>JS MVC types will look down their noses at Turbolinks, but it <em>works</em> and it has a lot of eyes on it. Combined with <code>react-rails</code>, it&rsquo;s a really strong option!</p>

<h2>What Now?</h2>

<p>In short, Rails-rendered HTML, Turbolinks &amp; <code>form_for ... remote: true</code>, and ReactJS for live-updates. There are a few things I am looking forward to:</p>

<ul>
<li><strong>RUBY BUGSNAGS</strong> with stack traces, request environments and everything!</li>
<li><strong>Less state.</strong> Fewer things that can randomly affect other things in ways I didn&rsquo;t think about.</li>
<li><strong>ReactJS.</strong> <code>Batman.View</code> is an amazing thing, but it makes me appreciate the dead-simple API of a React component. It can only get data from one place, no other objects can mess with it, its lifecycle is <em>very</em> simple (and works as documented), etc etc. I write a lot more code to do a lot less with React, but I think it&rsquo;s going to be a lot more stable, and that&rsquo;s worth it.</li>
</ul>


<p>We held on to Batman.js for a long time because it lended itself to <em>live-updating everything</em>. I think React is going to cover the a few key things there, and just <em>changing pages</em> will do the rest. So far I&rsquo;ve hooked up Pusher to Flux-style stores, then wrapped anything live-updating in a React component that observes that store. It&rsquo;s a lot more hands-on than Batman.js updates, but it has other advantages.</p>
]]></content>
  </entry>
  
</feed>
